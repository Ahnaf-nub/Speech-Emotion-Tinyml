/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 07.05.2025 17:49:47

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 16
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 14672;
#else
constexpr int kTensorArenaSize = 13648;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,992 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0037071078550070524, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 31, 32, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { -1, 256, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[6] = { -434, -157, 144, -279, -216, 1230, };
const TfArray<1, int> tensor_dimension3 = { 1, { 6 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00046734840725548565, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[6*256] = { 
  10, -50, -29, -106, 15, 49, 14, 13, -90, -19, 39, -13, -61, -18, 0, -18, 1, -78, 28, -37, -10, 17, -3, 16, 7, -4, -58, 15, 49, 6, -10, -13, 2, -29, -41, 21, -7, -20, 69, -16, 1, -32, -2, 34, -22, -7, -73, 15, -27, -17, -42, 44, -10, -11, -19, -24, 4, -54, -38, -34, -86, 63, -65, 17, -10, 42, 47, -69, 30, 9, -8, 47, 40, 36, -45, -12, -4, -98, -8, 48, -9, -1, 30, -29, -78, 14, -18, -55, -3, -72, 14, -9, 17, -12, 5, -31, -10, -29, 18, -42, -5, -35, 22, -84, 9, 34, 7, -74, -71, -12, 6, -35, -48, 11, -32, 20, -27, -57, 19, -63, -45, -46, 45, -23, -68, -45, -17, -28, -9, 34, -33, -57, -22, 24, -23, 21, 17, -17, 3, 5, -4, -23, 16, 4, -56, 42, -37, -34, -8, -60, -9, -74, 6, 50, -64, -24, 32, 11, 58, -30, 1, -30, 36, -32, -17, 40, 12, -27, 3, -39, -1, -29, 6, -13, -25, 48, 33, -6, 36, 17, -57, -21, 9, -49, -16, -51, 13, -36, -22, 20, -61, -36, 28, -30, -19, -46, -7, 43, -8, -42, -41, -55, -13, 2, 26, -43, 9, 41, -17, 16, 24, -50, -75, -35, 15, -71, 15, -34, -22, -18, -1, 16, 49, -14, -10, 14, 10, -30, -4, -31, 11, -16, -16, -12, 5, 39, -57, -3, -3, 5, -21, -5, -18, -16, -70, -7, 16, -18, -21, -56, -20, 27, 3, -16, -24, -32, 
  -58, -29, 37, -20, -33, 27, -25, -97, -32, -23, -63, -19, -7, -25, 16, -9, -33, 19, -29, 27, 41, 25, -8, 33, -4, 24, -30, -17, -5, -12, -70, -14, 5, 3, -49, 30, 28, -94, -23, 41, 8, 18, -8, 26, 17, -11, -83, 20, 52, 15, -19, 43, 26, -4, -41, 2, -21, -31, -52, -20, -13, -73, -64, -34, -52, 35, -54, 52, -31, -65, 7, -55, -56, -76, -21, -3, 10, 19, 19, 25, -23, 16, -59, 38, 19, -7, -4, 37, 9, 6, 4, 3, -18, -8, -67, 0, 2, 9, -19, -28, -36, -28, -58, -1, 23, 33, -11, 18, 39, 12, -100, 37, 19, 5, -76, -7, -20, 47, -97, 26, -2, -47, -74, 22, 6, -74, 9, -14, -7, -65, 8, -26, 1, 16, 10, -56, -7, -50, -23, 8, -9, -61, -8, 47, 12, -24, 47, 32, -45, -9, -17, 74, -26, -59, -43, 7, 28, -2, 61, 2, 14, -29, -22, 21, 42, -63, -8, 8, 6, -23, -10, 50, -28, 7, -65, -47, 63, -10, 0, 69, 15, 11, 28, -55, -24, -55, 56, -15, -1, 27, 29, -16, 24, 2, 12, -45, 8, -22, -4, -32, -51, -35, 28, -1, -12, -36, 18, -6, -39, -1, 19, 37, -11, -32, -48, 31, -2, -48, -41, 10, -11, -3, -69, 17, 10, 43, -38, 2, -80, -59, 55, -51, 12, -7, 19, -1, -25, 5, 19, -52, -43, -13, 33, 29, -4, 26, 15, 11, 12, -44, -11, 30, -52, -6, -22, -10, 
  -67, -34, 44, -57, -16, -38, 1, 14, -73, 50, -13, -21, 46, 86, 13, -26, -49, 60, -38, -10, -4, 23, -11, 35, -33, -45, -74, -9, -11, -9, -25, 7, 6, -24, -17, -37, 22, -39, 0, 44, 3, -29, -5, 44, -15, -4, 7, -25, 36, 15, -110, 29, -4, 6, 4, -55, -26, -23, 18, 73, -31, -21, 78, 2, -28, 16, 42, -117, -55, 40, -36, -27, 44, 11, 31, -6, -94, -43, 4, -71, -65, -35, -5, 15, -2, -20, -6, -1, -27, 46, -13, 3, 5, -9, 8, -5, 9, 20, 38, 10, -56, -21, 7, -5, -5, -24, -14, -12, 15, -8, -4, -46, -11, 4, -12, -1, -12, 9, 24, -9, 10, 18, -13, -40, -26, 45, -88, -15, 45, 2, -51, -103, 51, -45, -9, 34, 29, 8, 61, -10, -18, -44, -2, -63, -13, 59, -28, -1, -33, -26, -3, 34, -18, -94, -104, -1, -17, -2, -58, -24, 11, -14, 38, -35, 35, 22, 23, -57, -5, 79, 5, -80, -71, 7, 60, 33, -14, -26, 42, 39, -102, 6, -48, -99, -30, -50, -73, -11, -71, -63, -40, -9, -100, -12, -3, -66, -13, -53, -10, 18, -64, 24, 11, 15, 0, -1, -4, -67, -85, 0, -85, 11, 2, 5, -11, -22, -35, 20, 48, -23, 4, -7, -40, -9, -12, -2, -3, 27, 1, -46, -26, -12, -8, -63, 8, 15, 43, -10, -27, 17, 20, -15, -16, 6, -47, -34, -21, -18, 41, 18, -45, -54, 22, -90, 30, -24, 
  10, -34, -37, -50, -47, -45, -4, 22, 7, -1, 13, -18, 54, -24, 14, 73, -23, 54, 35, -10, -66, -107, -26, -59, -3, -44, 50, -11, -5, 4, 60, 11, 14, 17, 71, -56, -9, 51, -50, -29, 9, -35, -13, -40, -103, 16, 68, 48, -12, 10, 43, -40, -65, 62, -81, -59, -6, -41, -27, -73, -46, -2, -31, -71, -51, -49, -18, -74, 18, 3, 9, -24, -75, -54, 53, -4, -10, 3, -16, -3, 17, 21, 33, -31, -11, 26, -2, 11, 0, 47, -25, 6, -10, 5, 2, -16, -6, -2, -33, 24, -38, -6, 36, 77, -8, -51, -12, 43, 18, 12, 59, 37, -74, -12, 57, -4, 9, 36, -70, -1, 17, -39, -12, 32, -29, -19, 34, -6, -15, -3, 4, -6, 4, -5, -25, -3, -2, 38, -14, -2, 24, 50, -1, 19, -32, -21, 5, 18, -18, 21, -1, -27, 12, -3, 24, -2, -31, 8, -7, 33, 1, 0, -32, -12, -21, -14, -5, -25, -20, -10, -24, -68, 19, 3, 57, 32, -2, 17, -40, -12, -4, -32, -49, -44, -8, 5, -40, 25, 35, 26, -15, 3, -1, 42, 28, -53, 11, -44, 5, 29, 71, 13, 17, 0, -17, 17, 13, -8, 30, -2, -2, -29, 17, -13, 3, 24, 8, 41, -49, -5, 4, -14, 4, 4, 14, -23, 9, -33, 12, 52, -71, 34, 17, 27, -27, -21, 54, 17, 15, -18, -1, 3, 44, -7, -50, 18, -26, -14, -14, 15, -30, 16, -7, -26, 46, 16, 
  33, 14, -75, 37, -36, -13, -41, -16, 46, -92, -48, 5, -38, -49, 5, -26, -2, -44, -8, 30, -67, 5, -13, -40, -5, 25, 5, 10, -37, -16, -61, 20, -19, 16, -65, 22, 11, 14, -48, -45, -23, 29, -30, -74, 38, 16, -51, -35, -18, -19, 19, -46, 18, -79, 12, 46, 5, -9, 45, 5, 46, -102, 7, -31, -117, -22, -31, -49, -127, 9, -12, -45, 6, 27, -25, -14, 28, 48, -16, -17, -11, 14, -37, -28, 32, -17, 1, -26, 2, -68, 21, 3, 3, 3, -32, 3, -10, 29, 21, 18, 73, -35, -6, -50, -3, -6, -33, 2, -15, 10, -66, 7, 63, -11, -39, 15, -11, -25, 20, 15, 19, -51, 3, -40, 20, 45, 21, -73, -34, 8, 8, 35, -65, -13, -36, -14, -75, -66, -46, -12, -12, 20, 5, -53, 19, -32, -21, -10, 21, -56, 1, -37, -5, 38, 23, 5, 6, -12, -59, -9, -5, 22, -67, 40, -27, 3, -21, 12, 1, -45, 29, -66, -8, -17, -69, -51, -44, -32, -49, -48, -1, -23, 2, 46, 11, 37, -17, -36, 11, -71, 23, -9, -54, -104, -38, 59, -54, 18, 14, -68, -66, -38, -43, -11, 40, -12, -3, 17, 23, 16, -30, 8, 18, 8, -18, -9, 1, -83, 41, 17, -3, 1, 31, -3, 1, -34, 20, -86, 19, -23, -1, 17, -1, -31, -12, 11, 16, -10, -28, 24, 9, -21, -31, 8, 22, -29, -47, -32, -41, -24, 57, -53, 29, 17, -9, -11, 
  -6, 52, 27, -15, 43, -10, -3, -2, 15, 55, -13, -6, 5, 33, 11, -76, 11, 7, -11, -38, 62, 13, 28, -15, 19, -71, 0, 4, -57, -7, -24, -18, -17, -41, -5, -56, -42, -33, -19, 33, -9, 3, 0, 24, 6, -2, 0, -44, -55, -22, 15, -55, -11, 18, 74, -7, 7, 66, 53, -26, 20, 6, 26, 69, 64, -42, -8, 21, 30, -60, -51, 34, 30, 10, 24, 8, 2, -21, 3, -40, 45, -10, -40, 23, -10, -6, -43, 12, -17, 4, -37, 12, 11, 7, 20, 0, 3, -9, -16, 60, -6, 70, -66, -4, 9, 24, -11, -66, -17, 5, 17, -59, 12, 10, 50, -34, 23, -39, 39, -84, -12, 69, 10, -32, -8, 0, -68, -52, -27, 22, 32, -20, -16, -34, 10, -72, -21, -1, -26, -22, -32, 5, 10, 2, -23, -56, 14, -61, 58, 71, -5, 10, -9, -3, 6, -25, 10, 6, -1, -7, -12, -13, -63, -64, -50, -82, -50, 33, -8, 11, -38, 43, 35, -15, -15, -28, -70, -15, -46, -18, 8, 42, 33, 19, -4, 36, -4, 29, 4, -6, 7, 8, 46, -19, -45, -5, 36, 3, -3, 40, 39, 24, 2, -1, -72, 13, 3, -14, 16, -48, 20, -70, 6, 49, -10, -24, -19, 11, -16, 6, -48, 0, -49, -13, 7, 1, -17, 47, -20, 6, 3, 42, 1, 24, -2, 22, -69, 10, -10, 0, -7, -46, 6, -55, 45, -26, 17, 19, 8, 39, 45, 13, -9, -110, -31, 40, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 6,256 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0086135920137166977, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[64] = { 411, -2101, -770, -2505, 796, -1167, -2924, -1138, 157, -473, -1442, -1604, -1308, 146, -1349, -1761, -1163, -1954, -1217, -1295, 1393, 327, -1770, -677, -1010, -2008, -369, -1045, -3040, -882, -421, -1364, -757, -2571, -1738, -1573, -2249, -942, -1700, 974, -1812, -440, -3318, 614, -308, -2187, -573, -1631, -991, -710, -1504, -1987, 75, 121, 1345, -1784, -2260, 2169, -576, -1662, -1698, -337, -2275, -991, };
const TfArray<1, int> tensor_dimension5 = { 1, { 64 } };
const TfArray<64, float> quant5_scale = { 64, { 0.0002197015710407868, 0.00023414578754454851, 0.00021552018006332219, 0.00021061468578409404, 0.00022745034948457032, 0.00022435214486904442, 0.00017424268298782408, 0.00022503318905364722, 0.00021479126007761806, 0.00023492454783990979, 0.00021973806724417955, 4.8307359975297004e-05, 0.00021821413247380406, 0.00023015901388134807, 7.3175106081180274e-05, 0.00021078968711663038, 0.0002311590505996719, 0.0001937200577231124, 0.00021978589938953519, 0.00018651159189175814, 0.00020965628209523857, 0.0002033199998550117, 0.00018782919505611062, 0.00023928881273604929, 0.00011049235763493925, 0.00022886502847541124, 0.0002218680310761556, 8.9593610027804971e-05, 0.00012292036262806505, 5.7411747548030689e-05, 0.00022200062812771648, 0.00010413426207378507, 5.0617334636626765e-05, 0.00011303193605272099, 0.00022771510703023523, 0.00022895922302268445, 0.00022839465236756951, 0.00023010717995930463, 0.0002343522064620629, 0.0002268435200676322, 3.5633340303320438e-05, 0.00020220468286424875, 8.7316788267344236e-05, 0.00022800306032877415, 0.00020905479323118925, 3.5783228668151423e-05, 0.00023376720491796732, 0.00021641676721628755, 0.0002400248049525544, 8.2151695096399635e-05, 0.00022049981635063887, 0.00022462042397819459, 0.00023062455875333399, 0.00022114760940894485, 0.00019463333592284471, 0.00023379003687296063, 0.00012513282126747072, 0.00020443911489564925, 0.00022269945475272834, 0.0002363556413911283, 0.00019439766765572131, 0.00021861273853573948, 0.00018801975238602608, 0.0002022447733907029, } };
const TfArray<64, int> quant5_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[64*3*3*32] = { 
  /* [0][0][][] */ 0,19,54,-98,-9,11,-68,-34,14,-12,-14,-87,-71,-1,-3,6,11,25,-4,-24,-11,-8,-27,65,13,52,-27,12,12,37,-28,-30, 13,-20,-24,2,-15,16,-74,-37,21,-14,40,2,-127,0,-72,15,-15,-11,14,56,-76,10,21,-5,40,-64,9,-5,-12,17,-13,76, 16,-57,-95,0,-23,13,29,-28,16,72,-18,19,29,-2,-10,10,-5,-32,10,12,-16,7,32,-62,-44,27,-1,10,-4,21,-40,98, 
  /* [0][1][][] */ 14,-73,3,-79,-11,-5,-64,-64,6,-53,-85,-64,-15,11,-68,6,10,-43,6,-88,19,5,39,-43,-86,-16,11,4,-5,29,23,-41, 5,-34,-26,-69,-8,1,57,-33,27,-2,-66,-32,-32,16,-24,0,-28,-31,4,-95,-100,12,39,-23,39,-62,23,12,-13,12,-57,-40, 11,14,-89,0,2,2,7,-15,34,18,8,35,23,0,-30,10,-12,43,5,-42,37,-1,-8,1,4,-40,13,-7,17,21,-60,8, 
  /* [0][2][][] */ 7,28,0,42,16,13,15,58,-6,13,-19,36,20,-6,8,6,16,15,2,-27,16,-9,13,-32,-12,19,-11,8,17,27,49,-23, 10,13,110,-35,42,-8,-8,6,-24,-62,-20,-40,-19,-9,54,7,-13,9,-11,-23,-60,-7,22,4,-58,3,30,-3,8,-3,-110,-13, 1,-32,-50,-36,23,12,-18,14,4,-84,-4,-27,53,-7,-36,-6,-2,-2,-3,-57,-48,11,-5,-12,-12,25,19,11,22,20,-26,2, 
  /* [1][0][][] */ -9,16,-79,26,-5,-9,13,-39,-1,-28,-31,9,-52,-2,-62,-12,-7,-37,9,-65,-74,6,4,-87,-80,-70,-7,7,17,23,-15,1, 5,-48,-51,-26,-29,9,-68,-45,24,-28,-1,27,-37,-10,-62,1,0,17,-10,-89,41,-11,-7,-111,-45,-52,-1,-12,-10,13,-58,-8, -8,19,-107,-20,-13,10,-16,-29,29,16,54,30,-87,-3,-68,-8,1,13,7,-64,9,9,-12,26,15,-4,-2,6,-24,33,-12,-18, 
  /* [1][1][][] */ 1,-9,-26,14,50,4,38,3,23,-13,-31,87,25,-2,68,3,-10,-37,10,-19,-58,-12,8,-71,-6,3,-13,1,17,-1,-59,48, -6,22,-64,-52,-6,-3,-74,-45,9,-28,-28,-13,59,-8,-31,-9,-8,-39,-3,34,54,9,24,9,12,-9,19,-4,9,-28,-34,-92, -1,23,-70,-105,-21,8,-60,-59,7,-13,19,60,53,8,-91,5,-7,-57,-4,-20,46,-4,-35,-19,-1,-16,9,-7,11,-58,-55,19, 
  /* [1][2][][] */ -12,0,35,70,7,2,29,10,-3,3,-32,91,83,-10,1,1,3,-8,4,-10,-84,2,23,24,11,-29,0,-1,-10,1,-39,49, 4,10,-15,-24,7,-13,-69,11,-27,-55,9,6,54,-6,-16,-5,-25,-26,-3,-3,8,-5,-3,14,33,30,-4,-5,10,-10,-3,-10, -15,-17,-29,56,-4,-9,-38,-2,-10,18,-26,27,46,-14,-17,-1,-10,-39,7,-42,-11,-15,-13,-127,-42,-34,-16,6,1,-35,-50,20, 
  /* [2][0][][] */ -9,-74,-71,-19,-49,-22,3,-6,-11,46,-116,-27,-28,-7,-61,-7,-3,-41,-8,-16,-31,3,-46,-33,-70,28,11,-6,8,30,-34,-75, -2,-41,37,29,-60,-3,6,19,6,-4,38,-42,2,-4,23,-12,5,-24,-10,-30,6,-9,-3,-22,-33,10,25,-1,-14,-5,-19,44, 8,33,40,-42,-20,-9,-3,70,22,-60,-71,95,-5,-5,42,-9,-3,-119,3,36,-108,3,23,4,33,52,18,-2,11,-16,52,-32, 
  /* [2][1][][] */ 2,38,-3,30,-11,-15,90,-29,12,-56,-31,83,-1,-14,-15,-3,1,-31,11,47,6,0,9,-56,-34,-61,42,7,-5,-8,18,-10, 15,-62,-119,126,-1,-2,7,12,44,45,37,-21,-83,2,59,4,3,-62,13,-87,48,8,46,-53,14,-27,19,4,-9,-12,15,-71, -4,-20,-125,13,38,13,-7,-14,6,18,16,-89,-26,3,-50,9,-3,-28,-3,16,-3,-3,-30,-63,12,51,3,-6,-5,5,-98,6, 
  /* [2][2][][] */ 12,1,-34,-51,-11,11,-33,14,16,3,-25,98,-91,10,-127,-4,7,14,-7,-18,-35,-10,-14,-38,18,-19,-9,3,-8,-1,-21,-18, 4,17,23,13,53,15,11,-16,14,-68,-35,99,-63,-1,-102,3,-15,-76,5,-59,-89,-14,3,52,23,-1,-16,3,-14,19,49,89, 14,45,-54,-9,9,-1,-58,-37,16,8,3,16,-12,9,-10,2,-10,4,9,-47,63,7,13,-42,12,43,-22,0,-11,6,74,29, 
  /* [3][0][][] */ -18,102,35,0,-54,-13,36,15,-1,-107,-108,-41,61,-4,39,-9,10,-64,-6,25,109,-6,52,63,43,45,9,-6,8,38,32,-4, -17,-14,64,29,43,-22,-66,-17,2,-70,-72,-84,-4,-7,-18,-19,-7,-30,4,-9,30,3,25,32,8,19,33,1,6,7,-31,-29, 5,42,79,67,-35,-26,-39,36,16,-71,-27,32,11,-17,-51,2,-3,20,-15,13,-39,0,19,39,8,33,27,-12,0,1,33,-85, 
  /* [3][1][][] */ -5,-24,-62,-112,-62,-15,-77,-35,0,-32,-80,-65,0,-10,0,8,12,-66,-17,-42,23,-2,-27,15,5,-21,-15,0,-4,35,6,6, -1,28,55,-15,13,-11,40,0,-5,-96,-98,-44,7,-14,71,7,-1,-72,-13,-114,-50,-6,11,39,10,-21,14,-13,4,22,-87,-45, 5,-13,26,-48,-30,-25,-7,-6,18,-76,-113,-9,10,5,-60,-1,14,-30,-16,-50,-12,-5,-14,24,3,16,21,3,-3,22,-38,-77, 
  /* [3][2][][] */ -6,-50,-127,-84,-46,25,-98,20,-14,-1,-40,5,14,-12,3,-8,0,-33,-5,-13,10,6,-5,-70,6,52,5,-15,-7,23,83,-28, -4,-3,8,-98,-5,-4,-80,-5,1,-43,-72,-33,1,0,-26,-6,-1,0,-8,-56,-57,-5,2,23,-6,17,22,7,-6,51,-102,-29, -3,17,42,-43,23,5,-58,21,18,-79,-67,38,28,-9,-41,-16,11,6,-2,-53,-68,-1,-1,40,22,-18,7,-2,14,29,-1,-75, 
  /* [4][0][][] */ -1,40,20,-23,-2,-6,-12,-6,-3,-80,-39,-27,-127,5,-20,-5,-8,-60,-7,-9,-31,0,6,-9,-60,-44,0,-8,-6,-10,-31,31, -9,-62,17,-55,20,18,-54,-51,-16,-17,23,-61,-84,-8,-31,-3,2,20,2,-39,-28,0,39,-15,44,-45,4,-6,4,-5,-74,-19, -5,-2,-45,-38,49,-5,73,-75,11,-17,-5,21,61,7,-23,13,-19,-51,11,23,16,6,45,-73,-1,31,-11,-7,12,-38,-112,89, 
  /* [4][1][][] */ -1,29,17,-60,59,21,-56,27,-24,-6,-26,53,-2,-1,-125,-5,1,-13,-12,31,18,6,-20,-34,-15,-4,-18,1,-5,-21,12,3, -16,-47,-8,-87,-22,13,15,-26,-6,-46,3,-41,-91,-3,-2,4,-1,0,-7,-6,-58,-2,-28,-38,8,-10,-28,4,11,-48,-60,8, -12,21,-39,-42,-24,11,-113,-67,11,-4,36,63,83,9,-44,-3,-20,17,12,-15,38,3,-8,29,-21,0,6,7,12,-34,-26,27, 
  /* [4][2][][] */ -3,-39,-4,9,16,11,-22,45,7,-36,2,108,25,8,-43,-6,-9,39,4,-35,-40,9,9,-8,-10,8,-33,11,23,-27,-2,-59, 5,-44,32,-26,-22,11,-66,-14,-30,-72,17,-3,-53,-6,58,-13,-3,-9,-12,-65,-84,1,28,13,-13,-21,-20,10,22,3,-42,55, -1,36,-3,19,20,-5,3,10,-11,-55,29,30,44,-7,-97,0,9,-40,-13,-66,-19,6,3,49,7,22,-12,6,12,13,70,-25, 
  /* [5][0][][] */ -10,79,40,54,-5,-6,35,6,-8,-20,-92,-9,-56,-11,21,-11,14,13,-3,6,53,-1,83,53,-15,-85,40,-2,-5,-7,49,-78, -5,-35,25,118,4,6,66,-23,1,-39,-28,-31,-49,10,80,10,26,-42,15,32,-24,1,21,-50,-90,-54,-3,10,-8,-1,-58,55, -4,60,-36,-10,-14,0,-26,-25,-7,-127,36,4,-28,11,2,3,26,-40,8,14,-1,0,-1,15,-47,-15,6,13,9,14,4,12, 
  /* [5][1][][] */ -1,-10,-46,18,-18,0,51,-17,3,11,-34,14,-74,6,40,1,6,25,-7,23,1,8,2,-77,-96,-103,-14,-16,14,0,-47,-42, 11,-48,3,-2,44,7,7,-35,11,24,-17,12,31,12,-57,-7,-1,23,-1,-36,-87,15,-9,45,-42,-39,-9,8,12,-5,64,-10, 1,23,29,-32,2,-4,-46,-54,12,-22,29,17,-39,7,-119,8,11,44,1,-79,36,-3,-21,-42,6,13,0,-8,0,26,13,17, 
  /* [5][2][][] */ -2,57,-79,-107,16,-3,33,-89,6,-26,35,-45,-91,-8,86,2,15,-16,3,6,-11,13,3,-21,-71,-31,-1,3,-14,-2,-14,73, -4,-2,36,-21,-49,8,17,-39,3,-48,-36,-39,-42,2,18,6,24,46,-5,-79,-92,8,-1,-2,-26,-72,-4,5,-3,-5,-14,-102, 13,-25,-6,-72,6,2,19,1,-5,-37,-47,10,23,-3,-58,4,11,-8,12,-32,-55,-3,15,18,48,21,1,8,0,26,82,-84, 
  /* [6][0][][] */ -9,-45,21,-62,-32,-11,-38,-17,8,22,-50,-23,-63,-11,-14,5,12,-7,-12,-21,21,-5,11,-87,-95,-56,7,-1,7,37,-48,-21, -9,-20,30,-50,-2,-8,-78,-40,16,-32,-44,2,-27,-3,-10,9,-7,-12,-6,-36,12,1,-10,-15,-37,-55,-17,-7,-5,-1,-51,-100, 8,-58,-42,-33,-5,1,-26,-27,12,-51,-27,-57,27,-1,-13,-11,-3,-34,3,-23,-20,10,18,-33,-59,-32,-3,-8,1,7,-43,-15, 
  /* [6][1][][] */ 2,43,22,-8,-14,-19,7,-16,-19,-34,-43,12,-83,-9,47,1,17,-69,-21,-103,-82,3,0,50,-1,-32,-8,-6,3,33,-9,-97, 9,17,-60,-56,9,-13,-59,-39,-2,-50,-22,46,-6,-9,-25,-11,7,-50,-17,-24,-18,3,2,3,-4,-42,12,-9,14,-3,-13,16, 0,-13,-25,-68,-8,-1,-72,-52,10,-24,-8,-21,-7,-4,-25,6,6,-40,-6,-43,-38,-18,10,-127,-56,-46,4,1,11,3,-40,26, 
  /* [6][2][][] */ -4,1,0,-7,7,0,-46,-40,-5,-21,-90,4,-58,6,-37,8,13,-47,0,-40,-18,-11,17,9,53,-86,-7,5,19,6,-34,-47, 7,81,59,-7,29,-1,25,-12,-14,8,-1,-10,-83,-19,3,2,15,-69,-9,-9,21,-9,-12,36,1,-34,8,6,26,-13,-39,21, 5,-16,-75,-96,-1,-17,-83,-28,-7,-51,22,6,-26,-6,42,6,13,-30,-13,-41,-22,-18,2,-27,-113,-30,-9,3,11,-3,-49,57, 
  /* [7][0][][] */ -5,-41,-85,-22,-7,-11,-20,-12,15,-47,-15,-35,-26,-11,-4,8,-7,-109,-5,-50,-43,-11,-40,-78,-56,55,-3,5,1,4,-53,-42, -5,-6,2,-48,-57,-5,-36,-25,-3,13,32,14,-30,3,-34,3,-10,-20,13,14,6,-2,-64,-93,-36,-55,-1,-3,7,21,-40,-39, -1,-54,-46,-49,29,-5,-7,-69,1,74,-7,-81,-85,14,49,5,-23,-5,14,-11,-97,-2,-27,19,4,-16,-14,12,2,17,-121,48, 
  /* [7][1][][] */ 12,-61,-91,-52,54,15,-8,-66,6,-69,-23,34,79,14,11,-7,-8,-10,-7,-5,14,6,-5,-69,-84,-42,0,-3,24,53,42,8, 3,35,-14,-3,-13,11,-11,-101,7,12,-25,-42,-70,-1,-28,0,-1,34,8,-11,-127,-3,-49,23,38,-106,16,11,-6,55,-50,-32, -2,36,-95,21,10,3,18,-76,19,36,41,-23,-18,8,20,-3,7,20,-5,52,40,10,-16,0,7,17,2,15,-10,77,-57,-8, 
  /* [7][2][][] */ 13,-82,-35,-33,33,21,21,-40,0,25,-17,8,-30,10,-88,4,3,81,-7,-28,-27,7,9,-65,9,-82,-18,-1,-2,26,-66,-12, 0,-17,-85,41,10,14,20,78,4,2,8,41,29,16,-86,11,-3,-11,2,103,-2,-9,-22,19,63,-60,7,-6,8,8,-120,42, 3,22,-48,11,11,17,0,69,-2,5,32,32,23,-1,-8,9,9,8,-7,26,34,10,0,26,39,90,21,10,28,24,10,40, 
  /* [8][0][][] */ -16,-32,-82,-99,-20,7,-30,-59,2,-60,-98,-88,-81,-4,-118,-19,-1,-95,14,-72,-43,-19,-17,-53,-16,-75,-9,-7,5,47,-4,-34, -9,-69,-87,-27,-5,-1,-118,-87,16,-39,-6,53,-14,4,-74,5,3,14,15,-122,70,-8,-12,-125,0,-76,10,2,10,54,76,25, -6,-28,-79,-105,15,-4,24,-54,27,35,8,-78,-91,4,-79,5,12,10,-6,16,-65,-2,24,19,7,-96,0,-7,-12,65,-51,4, 
  /* [8][1][][] */ 9,-101,-62,22,-16,-27,5,40,36,13,-44,12,15,-17,34,-5,8,-61,-1,39,-127,-3,-1,-56,-4,45,32,-15,-17,-14,-72,44, 11,-81,-33,3,30,-3,0,-29,30,21,-4,16,-15,3,-107,-5,-5,30,1,55,22,15,10,-49,20,-69,-23,-14,7,-16,0,2, 0,-18,-31,67,45,-12,-35,-35,21,14,18,-47,-21,13,-95,-18,2,-75,8,20,43,-4,44,-22,-4,-32,-13,-7,-9,-20,-72,-5, 
  /* [8][2][][] */ -10,18,-32,-58,-8,4,-121,81,19,17,15,108,116,-6,35,-7,5,-23,8,-1,-24,0,-14,15,-39,69,-4,-2,3,-15,-44,45, -7,51,12,-18,-19,6,-13,14,3,-29,-54,-38,-24,-3,-59,15,-1,4,12,-35,-97,12,-16,47,7,3,-23,5,4,3,-37,-44, -7,-67,-38,-56,-18,9,-67,-42,-52,4,-67,-24,-46,-14,25,-5,19,-4,-8,28,56,-15,-9,-97,-75,2,-1,5,10,11,-60,-67, 
  /* [9][0][][] */ -5,-90,51,-19,-21,4,3,-23,-17,-61,17,-105,-70,2,-21,6,3,-118,1,-45,-62,2,-43,-31,-59,-3,-3,5,-17,-29,-83,-3, 0,-22,-58,-26,-4,-11,-12,-13,-29,-15,-23,45,21,-2,-8,1,-15,-97,0,101,11,-11,-44,-87,-36,2,6,-10,-17,-28,-52,-33, 2,-43,47,40,3,4,-36,-37,-1,-41,24,49,-28,6,39,6,-4,3,-14,4,-60,2,19,9,-49,-9,7,-11,-4,28,46,-35, 
  /* [9][1][][] */ -5,-66,7,-36,-20,6,-6,-122,-23,-33,-16,-52,-93,-9,69,-9,-7,-15,4,15,-87,7,-13,8,15,-125,-4,9,9,-17,-73,74, 3,50,-29,37,-32,-6,-73,-33,-25,-30,54,-42,5,-5,-109,7,12,-40,-1,-30,9,-5,-29,31,-1,-127,-13,9,8,2,-33,-53, 0,-74,-8,79,-3,5,46,12,2,-36,41,13,0,-7,-77,-14,-21,63,9,3,-97,-5,19,-61,-62,-59,6,-6,5,19,10,-20, 
  /* [9][2][][] */ -13,-64,-67,28,-7,-1,22,-32,-14,46,-26,20,5,10,-18,1,5,33,6,-30,58,-6,4,88,-50,-16,-7,7,8,14,-66,50, -6,8,52,-52,3,0,-56,-37,-7,-20,22,-87,-95,2,-69,7,-3,7,0,-2,27,-1,10,14,18,-30,2,-1,-18,-7,-88,-5, -2,-38,-59,-91,6,-2,0,-42,21,4,-3,10,-9,8,6,0,0,-32,6,61,46,-1,-8,-69,-29,-63,-11,-7,-13,12,-48,61, 
  /* [10][0][][] */ 4,68,71,26,22,3,4,28,-10,-19,-27,16,34,4,-50,-4,6,-11,-5,-44,-24,0,-6,17,-3,-46,28,-13,-15,-54,24,-78, -5,-32,-36,-57,7,-21,-32,-3,-19,-55,27,4,-44,-1,-10,-5,10,-13,10,-8,40,-14,14,-57,-13,39,-2,0,0,-20,1,-42, -11,-83,-5,-101,21,-18,-50,-80,-17,32,-67,-102,-103,-4,84,3,-5,-85,7,-59,-63,-2,25,-28,-40,-65,6,-3,-39,38,-127,34, 
  /* [10][1][][] */ 4,-58,23,9,8,-22,-58,-12,-10,56,-37,-70,10,2,11,-10,-1,27,-7,14,-105,2,32,76,31,-21,-6,5,-21,12,-48,-69, 3,-107,-52,-8,-9,-22,10,-22,-10,-37,-5,-36,-8,-3,-104,9,-6,15,6,21,16,5,64,-83,-23,15,-33,-5,-18,1,-1,-71, -3,-28,-116,-31,31,-5,-19,-86,-38,22,-33,-91,-86,-10,53,-1,-18,-25,3,22,-55,4,-21,30,-11,-72,2,-7,0,8,-49,48, 
  /* [10][2][][] */ -13,13,37,48,-41,-6,53,-29,-19,4,12,-86,-62,5,-9,0,4,3,5,-21,-21,4,6,11,-34,-94,-26,-1,-17,35,-56,-9, 5,-84,-11,-55,-25,-16,9,-38,-27,3,-52,-38,13,12,-37,0,-8,45,-5,-63,34,-11,6,-96,-16,35,-39,-3,-27,30,-84,-38, -11,25,-78,-55,-12,-14,19,-38,14,2,77,30,-39,0,-5,3,14,-10,15,27,13,-3,-7,43,-12,-68,7,-7,-39,17,30,23, 
  /* [11][0][][] */ 45,-47,-8,-45,38,44,-10,-85,25,-2,-94,-11,-102,39,-102,83,6,-71,47,-32,-74,25,24,-9,-4,-92,-25,55,-43,8,-53,-25, 21,-119,-50,13,67,33,-20,-30,27,-33,-17,-74,12,-17,-98,16,-28,-127,-48,11,11,24,6,-21,-49,-25,64,-8,47,-18,-81,-93, -5,-67,0,-56,-21,-22,-3,-55,-2,-42,-74,-15,-46,8,-78,-70,-81,87,33,-70,-16,8,-53,40,-49,-20,54,10,39,-8,9,19, 
  /* [11][1][][] */ 12,38,-36,-63,-37,-30,-71,-12,46,-41,-54,16,-81,8,-94,23,58,-59,30,-74,-100,-8,28,-12,-29,-24,23,71,37,19,-64,-12, 58,1,-44,-83,41,-25,-6,1,-18,-81,24,-13,-40,-38,-103,27,-51,2,-56,-66,-43,-7,-54,-67,-68,-6,-21,-16,-64,7,-105,4, 15,-89,-60,16,-30,-35,-54,-7,-21,-25,-33,-84,-91,-38,-1,17,-44,-89,-14,-54,62,35,4,-68,-54,12,-68,-36,15,22,-95,-96, 
  /* [11][2][][] */ -39,24,-33,-1,-12,11,22,-3,-7,-37,-103,18,7,-24,28,53,-8,10,-31,-12,-44,-66,-19,-8,16,-23,40,67,8,-11,-39,-37, -43,-10,-10,-9,-28,-16,-33,-3,13,-50,1,17,4,-40,-4,45,1,-65,-60,8,-24,-15,-2,-14,-1,30,-38,-59,-27,9,-56,-8, -50,-48,-38,-15,-46,-17,-6,-49,-56,-65,-58,-117,-20,-56,-102,-76,-65,-45,-17,-48,-93,-19,-45,-109,0,-88,33,68,-31,-7,-87,-66, 
  /* [12][0][][] */ 8,83,48,-60,-16,-14,54,-45,-17,42,27,-37,-17,11,-47,-3,-2,25,-4,-2,-36,4,0,32,51,-66,12,6,18,-5,-47,28, -2,-35,-9,42,-20,-6,21,-14,-29,44,-57,-25,97,8,-60,2,-12,30,-5,11,-53,-2,8,-42,-16,33,-11,7,5,-8,-11,-59, -11,56,127,75,-21,13,50,66,-20,-35,-31,-40,30,3,42,-7,0,33,0,-92,16,7,9,53,-2,-12,-7,2,-6,11,40,-96, 
  /* [12][1][][] */ -2,-24,-30,-10,15,-1,7,-29,-16,-45,3,-71,-6,-14,-42,-2,15,-24,-2,-14,19,7,-7,-21,-13,-73,3,-8,-27,-5,-49,-3, 5,-51,-37,39,-5,18,1,-80,-29,-46,-20,-74,-46,-11,-76,0,13,-24,0,22,-75,-1,27,-7,-32,-47,-3,-1,-4,-12,10,21, -14,49,34,68,17,21,33,29,-2,-26,34,-13,-25,-12,5,-12,24,-43,-11,-24,4,13,-13,26,-7,-29,26,-1,-6,-4,-21,-64, 
  /* [12][2][][] */ -8,-11,27,94,-27,-4,-13,21,-8,-24,-23,52,25,-3,0,-1,3,-36,1,-12,-8,-18,-10,19,-2,-4,4,-1,-31,-19,84,-39, 1,-47,-30,6,21,-17,53,-42,-13,-13,14,20,-29,-6,-71,-14,-16,-19,-1,17,-68,2,-1,15,-1,-36,-1,-7,-13,-10,41,43, -1,20,25,29,10,9,-7,8,-8,-15,8,49,-26,0,-48,6,8,-45,1,25,11,-5,2,10,-7,-14,24,6,6,-2,21,79, 
  /* [13][0][][] */ -3,-51,-11,-82,-35,-12,-79,-84,9,-8,-76,-72,-24,-15,-54,-7,15,-48,-7,-53,17,-11,20,-67,-43,-34,-33,4,-15,20,-48,-44, 5,-13,-61,0,35,3,-28,-4,34,-37,-73,5,54,-1,-26,12,7,20,6,-51,-58,10,17,6,13,-3,-10,-4,15,47,-13,-101, 2,-6,20,9,42,-7,60,27,24,-79,-7,-51,55,4,9,0,4,-59,-2,-5,22,11,39,0,-8,-12,1,15,-12,17,3,-79, 
  /* [13][1][][] */ 5,-87,39,-71,-79,-15,7,-97,34,-35,-15,-106,-62,-9,-101,-8,14,-38,-11,61,69,-16,-41,-14,-25,-69,-4,7,-23,-38,-122,-10, 5,46,92,-20,30,9,-37,31,34,-86,-25,49,36,-4,-25,6,-7,-44,-5,26,-23,5,-77,23,-20,2,-11,-5,2,10,76,-25, 8,-29,-18,11,11,-7,7,11,10,-36,-30,57,-18,1,62,-13,11,0,0,-40,-39,-2,-55,7,-1,-68,9,11,-19,55,-27,-59, 
  /* [13][2][][] */ -5,-28,63,-20,-39,0,3,6,25,12,-38,28,-4,4,12,-9,1,38,-2,-80,95,-5,-4,-5,-19,23,15,-9,9,-7,-19,-57, 9,28,72,-42,2,14,-8,-28,24,-25,27,-4,-41,11,-127,12,4,-5,6,-23,7,2,7,-3,-20,-74,-27,-3,1,36,-89,2, 12,-57,-86,-7,-24,-4,-112,-32,18,-5,22,-26,-95,3,23,5,9,-85,-2,-16,-90,-11,-2,-112,-40,-17,-21,7,-10,70,-39,54, 
  /* [14][0][][] */ -19,-33,-69,14,-13,-5,-44,-78,45,-17,-43,-31,-16,-19,21,17,34,-28,15,-62,-16,24,22,-45,-13,-5,15,3,7,16,-32,-23, 19,-55,-32,10,20,-15,-42,-39,33,-7,-58,-36,-33,45,7,-18,-10,-53,-8,-25,-70,0,-24,-20,-35,-60,-1,-42,19,0,-37,-66, -10,-64,-4,-12,-28,-23,0,-5,1,-80,3,-33,-51,14,17,8,10,-27,-33,-41,-13,15,-44,-45,22,-34,4,2,-33,-10,-13,-44, 
  /* [14][1][][] */ -38,-56,-52,-34,-53,12,-39,-9,-30,-71,-97,-84,-66,32,-64,5,-11,-72,5,-3,-24,-6,13,-29,-30,-33,-3,-36,-17,27,15,-42, -20,-20,0,-53,-41,-33,-50,-18,10,-49,-69,-59,-75,-10,-27,14,-1,-127,14,-34,-38,22,30,-5,-65,-43,13,-17,-50,18,5,-18, -1,-20,-44,-70,14,-32,-25,-31,19,-49,-77,-82,-36,-46,2,-3,9,13,-10,-32,1,10,22,-44,0,2,-40,1,1,-38,-17,-42, 
  /* [14][2][][] */ -49,-13,-14,33,5,-30,0,-33,-16,-33,-2,-22,3,-29,-19,9,-37,-12,-40,-29,7,-36,-6,-9,-37,10,-3,9,-21,-13,-48,-47, -34,-27,-30,-25,17,12,18,2,-1,5,11,-38,15,12,-14,-11,-22,-27,-13,18,-13,28,-6,-45,-3,0,-16,-9,-40,3,-31,-4, 7,-3,5,34,16,13,-16,-34,-28,-33,-41,-28,15,-40,-8,-3,39,-27,-46,-21,-16,42,-27,-26,17,-4,-46,51,-18,14,-3,-9, 
  /* [15][0][][] */ 2,-55,81,-59,-1,-13,-125,-102,-13,33,-35,-11,-35,14,-31,10,-7,22,5,15,-7,16,-25,-65,-46,-99,7,15,5,-39,-47,-112, 8,-109,25,-13,-12,-3,-14,-70,-9,34,-39,-73,-73,16,-104,17,7,-34,5,27,-60,12,-24,62,39,-16,-19,-3,28,-16,36,24, 13,119,32,127,-5,-7,2,37,8,-36,77,-84,5,-14,23,11,2,-41,-9,-4,125,-10,-50,79,50,-39,-11,10,5,-29,107,-37, 
  /* [15][1][][] */ 7,-33,-37,-82,39,1,-33,-86,-9,-63,-28,-15,-7,11,10,11,-25,4,17,-71,50,-4,29,-117,-55,-29,16,10,19,43,-30,-37, 6,-46,53,-59,2,3,-44,-53,9,-34,-95,-92,-63,5,-32,-4,-22,-20,-1,5,-98,-2,-6,60,-16,-37,23,-7,-5,43,-15,-55, 2,-40,-10,-59,-7,-14,-34,-20,-1,-1,1,3,20,9,-24,-9,-5,62,15,-12,-19,-12,-3,16,18,-24,-4,-8,4,1,-89,-9, 
  /* [15][2][][] */ 13,17,-49,-62,29,0,-38,-13,-15,-11,13,-8,-28,0,20,0,-8,12,6,-29,40,3,32,-23,-76,22,1,-4,9,-25,-75,-8, 5,43,-43,-65,8,13,40,0,-5,-9,-48,-83,-13,8,52,13,-1,-64,-4,23,-47,-15,17,-22,13,-46,8,-15,19,-21,-76,55, 12,67,-44,-35,-15,7,2,-31,-19,8,-6,-98,-27,7,63,12,5,5,6,21,14,3,31,-26,28,-81,11,-11,12,-41,-43,-14, 
  /* [16][0][][] */ 5,4,-24,-78,-37,-13,-75,26,30,-20,23,8,-20,-6,27,-12,-6,-42,-13,-12,26,-4,-2,-33,-32,31,-9,-3,13,-18,68,27, -11,21,84,-33,-1,-2,-4,-21,33,20,-7,-8,-8,-1,-90,-12,5,-39,-7,-14,38,-14,7,42,16,-27,10,-6,14,-48,44,-39, 5,11,13,-42,-18,-2,-68,-2,9,-24,17,-86,-39,3,-100,-12,2,-7,-13,25,27,-14,1,49,-30,-109,-8,-6,6,-10,-48,-17, 
  /* [16][1][][] */ -1,-6,-23,-1,27,-8,-43,29,41,-99,-11,36,-14,3,13,-2,4,-66,-8,-68,-28,3,28,-66,-71,-3,-4,2,14,-2,20,3, -14,4,18,17,-17,-10,-8,-1,29,-108,17,16,-21,3,2,-1,10,-66,7,-59,-44,-7,8,-31,-45,-2,3,-3,-4,-11,32,-13, 6,-28,-53,-66,-27,5,-71,-53,8,-49,-29,-11,-57,-3,4,-10,-2,-16,6,-27,3,-5,10,-71,-127,-57,-9,-10,-27,23,1,-52, 
  /* [16][2][][] */ -12,33,26,-80,11,-2,-19,74,4,-71,-35,26,-12,-2,-28,-7,-1,-74,-4,-61,-53,-2,-9,-52,-51,-12,3,-1,18,18,45,-2, 3,22,11,-21,-12,-14,-32,14,-18,-10,-28,27,5,6,-33,-11,9,-34,-5,-42,-51,-13,-13,-7,28,4,-9,-8,0,31,46,29, -3,-1,-25,-42,6,-7,-20,-14,-7,10,-54,12,-61,-8,-16,-9,9,-46,3,-47,-50,-6,-5,24,-19,-42,-4,-4,-10,41,21,-15, 
  /* [17][0][][] */ 2,20,30,53,77,-3,62,-15,1,9,9,5,-124,10,-6,-12,0,61,22,-117,11,-3,29,35,14,38,-1,14,-23,43,0,-30, 1,21,-7,109,25,-1,7,-32,-8,40,-61,2,-68,5,2,0,-17,-6,0,-104,-41,5,49,-44,-3,-88,22,-18,-7,48,65,-14, 7,-36,-127,41,-14,15,-26,54,-19,8,5,18,5,5,38,6,-18,-28,27,-60,-88,1,45,82,15,56,11,-11,-6,18,-12,10, 
  /* [17][1][][] */ 4,75,45,-36,-15,-8,57,-2,-6,5,33,-1,-44,1,-25,13,6,30,-3,-2,-40,2,24,42,48,-20,-1,-8,10,0,64,-81, -11,24,17,-24,9,5,70,-40,-30,21,-54,-23,4,9,45,0,-1,-89,-8,-39,43,-7,71,10,45,-42,-24,4,-27,-1,-36,-8, -14,52,79,-53,-21,-19,62,-45,-5,-15,36,-79,-17,-9,-66,0,-7,15,-7,17,-55,9,68,-18,-8,-88,4,-11,-21,57,-43,-38, 
  /* [17][2][][] */ 3,37,44,126,20,-7,62,24,35,-66,46,44,-52,3,-9,24,13,67,12,-48,-43,6,25,47,58,-56,-21,3,21,-17,-11,-1, -14,-33,17,48,47,-28,-52,36,16,-63,-73,46,47,2,-31,-8,9,-123,-6,-47,-40,9,-7,-6,15,46,28,8,10,-22,52,115, -16,-68,-32,28,13,0,-25,47,-21,-32,-4,14,-15,10,6,6,-21,-29,5,-54,22,-1,8,-100,-70,46,-1,-2,29,23,30,10, 
  /* [18][0][][] */ -14,-15,0,12,-21,5,8,25,-28,-51,-11,29,54,7,50,18,17,-3,-14,53,90,2,-43,26,-19,29,19,2,-28,28,64,-70, 2,-43,-21,83,-6,-7,21,-6,-9,-62,-20,-6,-51,8,74,11,-7,-88,-2,32,-47,0,-3,-13,-44,-8,28,-4,-21,16,-8,8, 4,12,1,-35,7,-8,11,2,-26,-81,-28,89,69,-6,-99,-6,-13,-77,-1,17,-3,-14,44,-72,-48,44,4,-5,9,28,40,38, 
  /* [18][1][][] */ 0,47,-25,91,9,15,-53,-11,-17,8,-10,-12,-125,-5,-33,0,14,-15,-3,18,57,15,-16,16,-29,-37,1,-9,-25,-22,-81,-107, 1,-8,-39,2,2,13,-12,-86,4,40,21,-69,0,5,-76,3,-5,7,-8,10,2,-14,-5,16,-19,-33,-5,10,-15,-34,-11,14, -5,29,-96,-57,50,1,3,-13,20,-5,56,-43,-20,3,2,6,17,0,8,21,55,11,-18,57,29,34,0,12,-12,-34,-11,21, 
  /* [18][2][][] */ -5,13,-43,-99,-15,-12,-12,-8,23,-72,-44,-41,-31,-10,79,-2,3,-25,-10,43,-17,-11,-10,-35,-118,-51,-6,-9,-11,0,-26,5, -16,-35,-34,44,-35,-17,9,3,18,-14,-58,-1,36,-17,-30,0,-8,38,-8,-19,-127,-15,-33,-1,-51,-15,-25,-12,-36,-19,-62,-54, -12,-17,-82,9,4,-1,9,-2,19,12,34,-18,15,-4,10,-6,-13,11,4,-8,0,-3,-2,84,-19,62,22,-8,-19,9,46,-53, 
  /* [19][0][][] */ -3,-47,-124,-79,-50,8,-122,-104,-20,-17,-27,-106,6,-3,-43,-5,-15,21,-15,-51,54,4,27,-92,-29,-81,1,19,-5,-10,84,-1, 15,-63,-7,-104,-1,16,27,-64,-20,13,-1,-80,-42,-10,-74,-18,2,10,-3,-82,-32,9,13,20,8,-127,-4,9,-9,-3,-20,-79, 15,25,80,-1,0,-9,-5,16,-4,-27,-65,49,43,-5,-16,-4,-4,14,0,-11,-24,-8,-9,34,8,-58,33,6,-7,-7,-58,-78, 
  /* [19][1][][] */ 5,30,-80,-8,29,-24,28,1,6,-101,-24,-27,-40,-3,-6,1,-21,-48,0,32,57,-3,5,-109,-43,35,-6,-1,-14,1,96,29, -4,-41,-34,-32,23,5,-3,-29,6,-17,-120,-44,-35,9,-74,-10,-16,-48,-12,-13,-43,7,11,-23,18,-28,38,5,-13,8,29,-105, 9,74,74,32,20,-2,-7,15,17,-69,-81,48,82,4,16,5,-13,-41,6,-84,11,-12,-9,32,13,20,37,1,-14,15,-43,-63, 
  /* [19][2][][] */ 6,-106,5,117,-34,-10,21,65,-19,12,-19,-46,-29,6,29,6,-14,-117,9,11,28,4,33,-58,-86,49,-9,1,17,18,-77,67, 2,48,19,121,-27,-23,68,-49,-11,-6,-41,-37,-18,-9,-32,7,1,-80,6,51,17,-14,27,-33,-13,-34,24,4,13,19,21,0, 10,-39,-21,-77,9,-6,-2,-31,-42,-4,-17,4,46,-13,-60,-2,20,-102,-9,47,-25,-6,23,-84,-41,-12,28,11,21,3,-8,-25, 
  /* [20][0][][] */ 11,-67,1,-64,-12,14,-12,-78,-14,-61,29,-1,-44,-8,-45,-2,10,-12,2,48,-27,7,15,-63,-45,-11,21,10,13,-6,-76,29, 3,50,63,-62,34,29,-60,-20,11,-30,-32,69,35,4,-55,-4,8,8,5,-2,-54,17,15,38,-12,21,9,4,30,23,-89,-56, 4,-44,-71,24,15,17,-57,-22,-9,-80,-48,-23,-101,0,-2,-12,23,14,1,-44,-82,-6,1,-53,-23,-63,27,1,0,49,-48,-59, 
  /* [20][1][][] */ -14,-8,-44,-23,51,20,-5,-43,1,-1,-47,23,-50,-8,-86,-2,-11,-62,7,14,57,-11,17,-35,-43,-27,16,-8,7,5,-56,39, -2,68,52,22,18,10,-83,4,-11,-7,-84,73,28,6,-6,-18,-9,-27,0,-25,-2,4,-31,0,-1,-15,9,-15,26,39,-12,-92, -12,-7,-108,-83,26,13,-49,-3,-32,-34,-65,5,-32,-2,4,-15,-17,-15,0,-77,-13,-8,8,-65,-40,3,-17,5,4,28,-12,15, 
  /* [20][2][][] */ 4,39,33,108,0,8,85,-28,-15,-62,-23,37,-9,1,23,4,3,-30,5,76,-117,-3,26,61,-28,-51,23,-16,4,-15,-28,-26, -6,-22,-8,28,76,6,33,4,-15,-127,-24,99,35,-2,-7,-15,8,-53,-20,2,-91,-3,21,-57,-50,0,-3,-12,19,32,25,-27, -5,-53,-68,-41,-2,-2,-81,-17,-15,-4,-14,33,13,-7,-38,-19,20,59,8,-53,18,-12,22,-35,-14,56,4,3,28,36,117,-12, 
  /* [21][0][][] */ 4,25,-30,-27,42,0,18,-65,33,-35,13,56,22,-7,3,13,-3,-55,6,-74,48,3,-7,37,-5,-65,-12,-2,9,-45,-127,-3, 12,22,-3,7,23,-17,-32,-5,42,-47,-77,33,-13,-1,-82,-7,-13,-103,18,4,-90,12,57,-30,1,15,2,-4,-6,-59,-72,-39, -4,-34,-26,64,32,3,-5,3,-7,-47,4,12,61,-3,-8,-12,7,-95,14,32,-70,10,56,-56,-80,-35,-8,7,12,-22,-34,-9, 
  /* [21][1][][] */ 9,10,91,-13,44,7,-67,-32,34,-27,34,12,-11,4,-19,-7,-42,-5,9,14,-30,11,-37,-1,-60,-22,-21,-6,8,-11,-36,9, 7,-120,-47,-13,33,11,12,-22,7,-66,-60,20,-57,9,12,4,-39,-95,-11,-65,15,-5,20,-6,-65,18,-22,14,-22,12,23,-49, -5,-43,-99,-46,-16,-9,-106,-54,13,-44,27,-58,-7,5,-1,6,-30,-12,-9,12,-3,-10,78,-121,-10,21,-10,6,1,-3,33,39, 
  /* [21][2][][] */ 3,0,21,-34,22,12,-89,26,26,58,28,69,-1,2,0,0,-9,74,4,90,80,-5,-3,-37,20,-54,-30,9,19,10,-59,-22, 2,-53,-72,111,-16,15,66,29,28,24,-89,102,-1,3,48,11,3,-44,-2,-28,-29,-9,3,-23,-91,9,-25,-8,17,-34,97,3, -4,-46,-96,-5,-30,12,16,13,12,50,29,68,-21,6,-83,7,-11,32,3,-9,55,-5,-13,-22,-28,36,-28,10,6,-35,22,40, 
  /* [22][0][][] */ 1,-11,-8,-52,6,-2,-46,-37,5,-1,-17,-39,-51,4,-37,6,6,19,-6,-30,-35,3,-10,-27,-3,-1,-15,11,-9,-2,-27,-8, 4,10,-8,-54,-18,-14,-22,-6,-2,-58,10,-32,-10,-17,-58,-6,13,-36,-11,-20,-65,7,1,-9,-30,-32,-8,7,-11,-9,-23,-33, -14,-7,-4,3,-15,0,-31,14,-15,-13,-22,-4,-41,2,-55,-9,15,-47,-6,-49,-54,-10,4,-10,10,-19,-13,-18,0,-7,8,-58, 
  /* [22][1][][] */ -3,-66,-31,-40,1,2,34,-60,-2,-18,-35,-32,-75,0,-88,-7,4,19,16,-13,-30,14,-4,-30,-63,-54,14,7,-12,0,-35,-29, -16,-13,32,-75,-15,-9,-63,-42,-7,-41,-63,-8,-42,2,-20,-12,7,-75,2,-49,-35,-7,39,-40,-14,-85,3,-17,-12,-7,2,-31, -2,-19,-44,41,-1,-3,49,-43,4,-19,-34,-54,-18,5,25,6,-3,-1,-1,-46,-30,0,16,-32,-17,-35,4,-19,-12,-9,-53,-17, 
  /* [22][2][][] */ -10,18,-23,26,10,12,127,-12,-5,-61,-26,-49,23,12,49,-7,-4,3,10,-49,-9,7,-2,9,-40,15,-10,10,-15,17,-2,-58, -7,-19,4,-20,11,2,-36,-21,-13,-56,-86,12,-12,-15,8,-3,12,16,-7,11,-95,-16,-3,-45,-62,-27,-12,-12,4,17,45,-59, -10,-39,-66,-32,-9,0,-58,-3,-7,3,-40,-31,-54,-1,-24,-13,-6,-29,3,-31,2,-14,-12,39,-9,-13,8,-1,-6,-6,-2,-53, 
  /* [23][0][][] */ -2,-16,-43,-63,-15,2,-60,-47,9,3,60,-33,-81,-1,-78,3,8,22,7,29,22,2,43,6,-39,-56,-6,-8,-3,10,93,-2, -2,-20,15,-43,-50,-6,-19,3,-15,-24,-15,-20,-78,-3,31,-11,-11,-35,-6,-42,-23,5,11,29,34,17,-10,-8,-31,23,54,-35, -9,-25,31,-55,14,-1,-65,-12,8,-18,-37,1,87,4,-43,-3,-2,3,-4,-5,36,-8,41,-1,23,34,14,2,1,29,12,-43, 
  /* [23][1][][] */ 5,-42,-1,-10,-91,6,25,-46,-36,-70,-57,-37,-50,-1,34,-2,-14,-50,3,-7,-45,6,-8,-56,-31,0,14,-13,-21,16,4,-127, 2,-15,18,8,-56,2,-19,-13,-42,-74,-54,16,8,-7,-45,-8,-13,-38,-3,-16,-74,-2,19,-12,-26,-29,18,-2,-19,24,-15,-30, 3,-55,-24,13,-27,-3,-25,8,-45,-9,-70,1,20,-3,19,-5,-3,-5,-1,-66,35,-6,37,-57,-31,67,20,-11,-7,16,65,-41, 
  /* [23][2][][] */ -11,2,35,-17,-26,4,38,-67,-26,3,-31,-63,-34,0,-37,11,2,-50,2,35,-1,-6,20,9,-51,-81,3,-5,-31,29,-74,15, 0,-44,-24,89,-10,-21,43,-97,-15,-14,9,-4,-10,0,-32,-16,-14,71,-6,54,-31,-3,8,-35,-83,-93,-8,-1,-14,4,-47,-47, 0,-45,2,57,21,-5,62,-12,-24,-3,-50,-29,-13,2,86,-7,3,-80,1,49,-47,9,-4,-75,-51,20,-5,-2,-9,-7,4,52, 
  /* [24][0][][] */ 17,-20,-84,-101,5,0,-49,-5,9,26,-5,-24,-38,-6,-59,-22,0,-2,-9,-31,-36,4,-15,-50,-33,0,8,-11,-1,27,-30,-70, 19,-95,-104,-93,-6,-15,-111,22,3,-7,-19,-11,2,-3,5,-25,-5,-7,25,-62,-42,-13,-12,-31,35,6,0,15,-20,8,-45,-72, -12,-49,-63,-26,21,-18,-28,-96,20,30,-65,-86,-127,15,-105,3,-22,-56,-1,18,-34,-10,-23,-95,-5,-90,-7,2,-22,28,-100,-41, 
  /* [24][1][][] */ -15,-97,-40,-53,-16,15,-74,-17,-6,-95,-75,5,-49,-2,-88,14,-11,-58,-3,-29,-62,7,17,-55,-38,-45,-11,11,-24,-35,-17,-81, 19,11,-51,49,-27,-14,55,-16,28,-82,-61,24,2,-10,-16,-15,-12,-61,9,-30,-11,-26,0,-24,-75,8,-22,15,-21,-42,12,-65, 1,-60,-87,14,-1,-5,-37,-28,31,-30,-66,-7,-16,24,-82,18,23,-25,3,-71,-60,-12,5,-15,14,5,-2,-14,5,-14,-95,-63, 
  /* [24][2][][] */ 21,2,-45,-76,18,5,-35,-68,11,-12,-29,-22,-64,-15,-75,20,-6,-76,-5,-33,-42,12,0,-45,-64,-32,-2,6,11,11,-15,-69, 19,-26,-57,-41,9,-17,-100,-107,17,-40,-68,-92,-49,-13,-30,13,15,-54,28,-76,36,-2,-8,-121,-64,6,11,-1,6,6,41,-114, -6,-34,-99,-53,13,-7,-122,-99,18,-39,-64,-88,-37,1,-91,-2,-8,-26,22,-4,-62,-16,3,-56,-36,-107,-3,-23,-12,3,-51,-57, 
  /* [25][0][][] */ -11,-38,-30,-38,16,-3,-62,11,0,-16,-46,-21,-79,-13,14,9,-1,-17,-15,-50,-46,15,9,6,-18,-17,7,7,23,-42,-50,17, 4,-56,-83,-34,-40,0,79,-98,3,-58,31,-19,65,-10,-21,-11,-2,-2,3,-27,18,-6,-37,-82,-51,-9,13,-6,-10,-63,-3,35, -9,-19,51,-52,0,-1,-63,21,31,17,31,-7,-2,-9,-127,5,-1,82,1,-89,15,-13,9,-7,42,-90,44,-4,-36,-39,-28,-34, 
  /* [25][1][][] */ 3,-14,-67,-28,-24,-3,10,-27,24,58,-112,-41,-99,-14,-29,7,12,-25,-2,-67,-90,-9,-8,-32,-10,-85,2,0,21,-8,-81,1, -1,-97,-15,-42,-28,3,-107,29,2,-3,-9,-34,0,-7,26,-3,-6,-39,5,26,56,-15,-22,-66,-34,8,0,8,-22,-6,-10,-6, -4,18,-99,-64,8,-10,3,-59,7,-17,29,-71,-8,-3,-38,-7,-2,-5,-6,-19,89,-12,1,6,-59,-57,-2,-7,-32,-11,-62,-43, 
  /* [25][2][][] */ -1,-1,65,28,-24,-8,24,-4,56,-32,-55,6,1,0,-63,12,3,-1,7,5,-80,-8,6,-88,-48,28,-5,-3,14,17,28,-67, 9,-66,-15,-65,0,-5,-5,37,-14,-64,-31,11,38,-2,-23,-5,-5,-34,-7,34,-18,4,-6,-21,9,32,38,-11,8,-1,116,-63, 2,-5,-62,-31,-21,1,-2,-3,-23,23,1,76,-28,0,16,-4,-3,58,6,46,24,1,-15,-27,29,33,-11,0,7,-11,109,-51, 
  /* [26][0][][] */ 5,-45,53,30,20,-4,-20,-35,5,29,42,11,20,-11,8,12,18,-34,-7,-18,17,-8,30,-30,-10,10,-1,-5,20,-13,-23,79, 0,3,115,-19,0,-2,-15,-1,-11,2,-60,-69,-59,-12,-78,-10,0,-12,1,27,26,-13,-4,56,35,-44,-17,9,0,11,-8,-73, 5,26,35,23,4,5,6,20,9,-53,-72,-105,-47,8,38,-7,0,2,8,15,-58,6,7,-21,-30,25,-4,6,-18,-25,27,-82, 
  /* [26][1][][] */ 10,-39,-97,2,-16,7,68,21,-10,69,-57,-9,53,7,-4,5,12,48,-4,-47,-34,-9,36,33,40,-6,1,10,6,-1,-87,8, -1,12,55,-28,-6,-4,2,-45,-9,-33,-83,-93,-117,7,-64,10,2,-7,-10,18,-20,-13,-1,-21,-42,-46,4,2,9,6,-67,-30, 1,6,10,-56,11,-24,-48,-24,34,-30,-44,37,-43,8,16,8,1,-16,-1,-47,-34,-9,-18,-30,-26,-39,19,13,-4,-43,-29,-8, 
  /* [26][2][][] */ 11,-5,21,-23,3,-2,-35,11,-4,-60,-42,39,37,7,51,0,-11,1,9,-33,7,-12,12,41,-12,49,-7,4,-22,-1,40,-38, 6,10,-16,-4,9,-12,-38,47,-13,-52,-20,58,3,-1,11,-1,9,-7,4,127,-105,6,-1,31,32,-5,-8,11,11,11,-25,19, -3,46,31,82,43,-12,19,107,8,-20,-9,79,-4,7,-18,8,-1,-15,-2,-7,-69,1,-27,-20,20,61,-13,-1,8,-53,49,-52, 
  /* [27][0][][] */ -1,-58,-35,-5,8,0,-49,-56,-17,-50,-23,-28,-38,-26,25,-27,-13,-64,-40,-29,20,-20,-3,-47,-52,-15,-9,-7,-1,-25,-45,-17, 13,-1,5,-15,-11,10,-7,-32,-23,-14,-41,-28,-6,-2,-36,2,-34,-28,-18,-4,3,-28,-24,0,-12,-59,16,13,-17,-1,44,-59, 12,-26,14,-52,4,-10,-42,2,13,-55,-22,-26,-14,2,-93,-19,10,38,-7,-20,-25,-34,20,19,-9,-45,18,0,-38,-34,-32,-60, 
  /* [27][1][][] */ -35,-32,-17,-22,11,8,-22,-22,-33,10,-25,-39,-52,-29,-16,12,-4,-44,-10,-21,23,-8,10,-37,-39,-26,32,-25,-11,-1,-15,-31, -39,-40,-14,13,-38,7,-1,4,-27,-39,-98,-11,-50,-11,-64,1,-18,-127,-38,-6,-68,0,-23,-35,-58,-55,-8,-2,-21,2,-72,5, -6,-22,-69,5,-12,-1,-46,-21,-22,-54,-25,-4,-26,14,-3,-6,-3,-95,-16,-41,17,4,6,-35,-76,-36,12,-15,-25,28,-3,-75, 
  /* [27][2][][] */ 0,1,22,6,-1,-2,-1,7,-33,-40,7,8,29,-28,-34,-3,-32,-25,-6,-3,-58,-2,-21,-25,-3,-18,23,6,-3,17,-20,2, 15,-34,-31,-23,-33,0,-43,-30,13,-4,-20,-23,-32,12,-32,13,-32,-32,-34,-30,-51,2,-20,-18,-17,-27,-6,-12,2,-32,-46,-42, -8,-40,-20,12,17,9,-6,-29,-26,-49,-40,-22,-24,-23,-32,8,17,-15,-10,-19,-50,4,20,-2,-31,-4,-6,-26,-10,-35,-29,-72, 
  /* [28][0][][] */ 7,-50,-94,-21,17,-22,-62,-127,2,-20,-29,-61,-71,8,-19,4,11,-42,-14,-57,38,-10,2,-107,-72,11,-20,-7,-2,-13,10,-43, -3,-31,8,-7,-17,-24,-35,-116,14,-66,-19,36,-16,14,-3,-19,-23,-34,-22,18,-87,-9,-27,-35,-70,-86,-6,15,-20,11,43,-60, 6,-68,-89,-25,9,9,-37,-19,19,-71,56,-108,-104,11,-66,-19,-26,-20,6,37,-37,-20,-8,-56,-70,-24,8,-1,-2,-6,-20,1, 
  /* [28][1][][] */ -26,-51,-50,-49,-19,-13,-28,-59,-24,-105,-67,-19,-36,-27,-26,-15,8,-77,7,-15,-71,-8,-19,-69,-35,-85,-20,18,-24,-25,-60,-42, 2,-100,-22,-48,11,3,-8,-18,-6,-25,-39,35,-63,-18,-23,-28,8,-13,5,-67,-69,-14,-8,-24,-69,-27,5,6,-2,13,-51,-74, -24,-85,-51,-36,8,15,-58,-48,-3,-21,45,-34,-49,-4,47,-5,-7,51,-7,75,98,-5,-8,-86,-79,22,-2,13,-12,-16,-48,-58, 
  /* [28][2][][] */ -4,-20,-26,-1,7,-14,4,-64,-25,-18,-44,-64,-70,-9,-66,-7,-8,-55,9,-17,-14,-20,-15,-28,-29,-48,-8,3,2,6,-38,-20, 5,-57,-43,-20,-4,-23,-34,3,10,-39,-57,-20,8,4,4,11,-12,4,6,-71,-22,-5,-9,-12,-83,-50,-5,-12,-1,-27,-35,-36, 9,-18,-26,-15,-3,-5,-42,-2,-10,-6,78,-33,-40,-1,14,2,-7,32,18,-16,-73,6,-2,7,-104,19,-2,-7,-22,6,-4,-7, 
  /* [29][0][][] */ -40,-47,-63,-34,8,-9,-27,-31,-33,-31,-47,8,-24,6,-78,32,-10,7,-26,-22,-61,26,0,-50,-6,-3,54,-9,16,-20,-37,-53, 26,-57,2,31,-2,-4,-7,-39,2,-15,-35,1,-49,-33,-20,21,-40,-64,2,-55,-49,-7,54,-50,-23,-46,1,21,-24,4,-13,-32, 19,22,-34,-29,-16,11,-65,45,-54,-22,-11,-23,-69,-17,-34,-4,-26,-37,29,-14,-25,-22,-40,-8,-4,15,-49,21,-32,3,-43,-50, 
  /* [29][1][][] */ -64,-47,-44,-26,-1,43,-46,-70,-15,-45,-24,-97,-127,-37,-56,7,-14,-15,25,-24,-38,-36,-27,-40,-60,-69,-10,55,-4,-28,28,-25, 10,-63,-70,-47,-12,-33,-11,-74,6,-65,-31,-7,-55,-24,-16,31,-20,-33,24,-28,-120,-64,23,-38,11,-58,-2,-4,-36,24,-18,-14, 17,-7,-6,-8,47,54,15,28,4,22,-22,29,-58,51,-39,-20,-24,-49,16,0,-8,-3,-38,-6,-37,23,-28,47,20,46,-32,-11, 
  /* [29][2][][] */ 0,30,11,-38,-7,18,-40,-21,-42,15,-32,-7,41,6,7,-15,-18,2,-29,-23,13,-28,-57,-14,-8,-4,13,-17,-16,-60,24,-12, -14,-16,-64,-65,-27,10,15,10,-21,-6,-62,-31,-29,7,-11,-32,-48,-55,-70,-14,-24,2,-19,-15,-6,-61,-47,-31,1,-11,-12,-13, -4,-47,2,-15,-36,-4,21,40,31,21,15,-69,-63,-35,2,-17,21,10,12,-37,-53,40,-24,-47,-39,-55,-1,-7,-25,-32,19,-45, 
  /* [30][0][][] */ -10,-28,-38,-7,39,-4,-43,-1,-17,22,-58,4,-14,-2,-82,9,29,49,2,-56,-60,-11,3,-127,-14,24,3,-7,24,3,44,-102, -11,-94,-102,-75,25,-7,-67,-49,-23,37,18,-56,-119,-12,26,16,-15,17,3,46,14,-12,5,14,-26,-111,-20,13,-7,10,-20,-3, 2,15,76,-28,33,-11,-51,-45,-6,36,33,9,-75,10,-30,3,-9,9,10,-5,27,7,0,121,64,-63,-6,-2,-17,-36,-76,-4, 
  /* [30][1][][] */ -8,-23,-111,-8,13,2,2,-56,-27,-41,-73,-47,-91,-11,7,2,21,-73,-11,13,67,-1,-16,8,-57,-90,-15,4,16,47,-118,-12, -9,15,43,-46,-2,5,10,-95,-18,-64,27,-105,-70,-7,9,7,-14,-9,17,-29,-43,-3,-7,-20,-72,-58,-7,9,2,88,-47,-51, -8,-41,-33,-2,-5,-13,-41,-44,-25,-25,-121,-125,-92,5,34,0,-11,14,16,3,-9,-6,-18,38,-20,-20,15,-7,6,61,-60,-90, 
  /* [30][2][][] */ -15,9,47,60,45,-25,-30,6,23,-13,6,68,24,-7,28,2,17,-41,4,-38,14,-4,2,3,-29,-21,1,6,10,22,26,-11, 6,9,-47,-48,23,-11,73,9,1,-8,10,17,6,-10,13,-5,-6,-62,-4,-91,4,-9,-7,-45,-28,2,29,-1,5,11,-3,-6, 6,59,7,-78,19,-5,80,22,6,-33,13,-43,12,-11,35,-9,-25,-19,1,38,61,5,5,-14,-22,-20,29,-8,2,0,20,-13, 
  /* [31][0][][] */ -7,5,30,-97,8,0,-88,-9,0,13,-51,26,-3,-31,-25,3,3,-61,14,-87,-29,-8,-3,-22,4,-6,15,12,1,12,-84,-28, 0,5,-56,-98,-33,-19,-73,54,-11,-99,-66,-32,10,12,-112,-11,-15,-78,-31,-37,-58,-24,-14,-127,-46,41,-14,-25,-25,11,23,-39, 1,-88,-25,-114,-9,-29,12,10,0,-42,-58,-55,-51,-25,-72,-6,0,-85,-17,28,-85,-11,8,-23,-80,-90,13,-32,-20,-22,-120,-59, 
  /* [31][1][][] */ -16,-24,-19,38,-27,14,14,-20,-15,-35,-77,7,-28,-14,-21,-17,-7,-74,-1,-40,-35,-25,-32,-87,-16,23,27,-14,11,10,-19,-23, -23,-39,-22,-20,-32,-20,-14,-61,-12,-47,8,-94,-76,-27,-48,-2,0,-79,-32,-18,-40,4,14,-58,-48,40,13,-19,-6,-17,-80,45, 5,-21,-6,-14,-6,-28,-111,-3,10,-73,-28,-33,-41,14,-23,16,-5,8,-1,1,-47,-6,13,-52,-25,-55,-17,-30,-33,-16,-63,-52, 
  /* [31][2][][] */ 2,-36,-13,-41,10,-28,-42,-50,-13,-34,-67,-76,9,-3,-61,-3,-21,-35,14,-77,-92,2,-10,-10,-24,-57,-1,-16,14,10,-30,-12, -13,2,-11,-18,-5,5,-61,-53,0,-49,-44,-73,-80,6,-66,3,-33,-15,1,-58,-72,-23,-29,0,-39,10,-16,-5,12,-26,-42,-13, -15,-67,-41,-48,-6,7,-81,-62,2,-39,9,-39,-69,1,-1,-30,2,-27,14,-71,-55,-1,-10,-39,-82,-38,-29,12,0,-33,-47,-41, 
  /* [32][0][][] */ -41,-18,-25,-47,19,-57,-28,10,-50,-61,-34,-18,-21,-60,-26,-1,21,-127,-66,-13,-34,-48,2,45,-79,-49,-21,-31,-66,-7,-11,-80, 19,-12,-32,13,28,-41,8,-76,10,-17,-19,-47,-22,1,-15,-59,-71,-102,-14,-30,6,2,-4,-75,-35,-51,-48,-54,-30,-14,-51,-15, 1,-61,7,-20,-21,-39,-31,31,-62,-68,-33,-15,-27,26,-26,-55,-29,-11,23,-42,-56,31,13,-68,-70,25,23,-26,-18,-16,-21,-75, 
  /* [32][1][][] */ -47,-58,24,12,11,22,-11,-60,16,-3,-53,-77,-61,13,-75,14,25,-60,31,24,-100,-12,4,-62,-19,-91,-13,29,1,9,-61,-10, 9,-33,-62,13,24,7,-65,0,-50,-64,-43,-8,-26,-50,-50,-10,30,-54,-11,-61,-27,-56,-48,-8,-9,-11,-15,-55,-63,21,-33,-26, 3,-8,-88,-51,14,-1,-34,-25,-30,-58,-17,-60,9,24,17,6,-64,-57,-33,-50,-67,-45,17,-109,2,-46,19,46,33,-29,-68,8, 
  /* [32][2][][] */ 19,-2,-2,-25,-47,-61,-5,2,-53,-37,-27,18,5,-56,20,-40,11,-44,-15,-54,-19,25,-66,-45,-55,-14,27,-7,-26,-54,-51,8, 19,1,-102,3,-6,-36,-1,-46,19,13,-49,-2,-14,-60,40,-51,-16,-19,-31,-52,-5,8,-38,-70,2,9,-49,24,-16,-46,-1,-70, 31,30,17,-37,-11,9,-25,19,-16,-45,-72,-42,-17,-2,9,2,-20,-10,-2,-16,27,9,-16,28,15,1,-54,-17,24,-39,-42,-51, 
  /* [33][0][][] */ -5,-77,-80,84,13,-27,-25,-15,0,-114,-127,-40,-79,-29,10,3,-17,-26,9,-69,-81,-29,-10,-27,59,17,27,-6,-14,5,-22,-14, -12,-52,3,18,-19,8,-54,-64,-22,-56,-117,-14,-8,5,-34,-19,-25,-57,-27,-42,-93,-26,9,-2,-115,16,-2,12,8,-21,-85,11, 1,11,34,24,-9,-7,13,72,9,-42,-81,2,6,-2,14,2,22,-62,7,-11,-70,-11,-2,-31,-39,0,27,1,-24,4,21,-5, 
  /* [33][1][][] */ 12,35,-19,81,26,9,-24,-35,-15,-11,-52,-108,-23,0,56,5,-12,-41,-29,70,68,-20,3,11,19,36,-21,-12,2,5,-15,-40, -24,7,-37,-108,-14,1,38,-83,-25,80,-69,-108,-92,-27,4,-18,-23,-11,-6,18,0,-2,-3,29,-54,-35,-19,-10,-11,-22,-61,43, -25,-50,-9,-119,14,8,58,-27,13,34,-71,-45,-57,-15,-86,-19,5,-126,1,30,61,2,7,-55,39,-51,-5,-4,-14,-21,-117,29, 
  /* [33][2][][] */ 0,16,15,-114,-16,-28,-81,-112,-23,-77,-9,-43,24,-9,-40,-3,14,-59,-18,-30,-11,-29,-11,-7,15,-6,18,15,11,-13,-77,18, -11,-17,33,-65,12,-18,-74,7,6,-102,-43,-3,-37,-16,-75,1,1,-72,4,-85,-64,-11,-21,70,62,-52,9,-11,-14,-18,-32,-89, -22,-92,-84,-109,10,8,-108,-86,-22,-11,30,-74,-110,-10,40,-25,-23,-9,-28,-60,-8,-8,25,-80,-50,1,-3,29,-21,-2,-43,0, 
  /* [34][0][][] */ -3,62,37,88,15,-18,3,52,-21,33,-46,-51,7,0,-3,-10,-23,78,-18,47,-22,-1,12,-44,-11,-26,17,-10,6,15,-37,-44, 6,-87,-45,-18,16,-14,36,31,-29,64,-26,7,12,12,-24,10,-17,26,-18,2,-95,8,-26,5,62,9,29,6,2,42,-4,2, -7,27,-19,-90,17,-6,-18,-114,-23,-8,64,-78,-107,-4,-117,7,-22,-10,1,-2,78,-9,19,-22,-8,-38,6,3,-14,38,-73,0, 
  /* [34][1][][] */ -11,66,-28,-21,13,-9,70,-102,-11,-40,29,-99,-56,6,-29,-9,-16,36,-10,8,-77,8,-34,-9,12,-127,-12,2,5,-16,-82,-3, -1,-49,-25,3,40,-23,-48,-52,-24,-25,-57,-77,-95,3,-79,3,-3,-20,-14,10,-58,-2,-22,-1,-25,-36,10,-3,7,0,-53,-60, 6,45,62,-3,9,-12,36,38,-35,-32,-13,-89,-11,2,12,-8,8,5,-11,-79,-5,0,-17,3,-12,-4,1,-3,9,16,41,-13, 
  /* [34][2][][] */ -7,65,-53,-86,25,4,-2,42,-13,29,21,35,13,6,-31,6,-4,20,-2,16,-24,4,9,22,43,-36,-11,9,20,-22,-100,78, 1,57,35,17,20,-6,41,5,-18,-14,-58,3,-65,0,-69,-20,-9,-15,7,12,-5,-1,7,7,5,17,17,11,13,21,27,-31, -6,1,69,-3,6,-3,10,43,3,-14,-42,20,-53,10,4,12,-14,8,-4,-72,-15,-6,0,6,31,-14,2,4,7,13,31,-76, 
  /* [35][0][][] */ -3,-23,23,-9,24,-9,-28,-44,8,-94,-39,-66,13,-4,-32,5,15,-109,-14,-32,-17,3,-6,-56,-104,-15,-19,-3,-18,-8,-81,0, -7,-35,6,-37,33,-14,-65,-2,-11,-127,-34,18,25,-13,22,-8,0,-122,0,-24,22,10,39,-71,-74,34,-18,-12,-6,-26,82,17, -5,51,33,4,43,6,65,23,7,-81,-96,1,-40,-10,4,2,-7,-115,-18,-89,32,9,29,-55,8,-15,-20,4,-8,-20,15,-69, 
  /* [35][1][][] */ 4,-18,12,-43,-1,-31,1,6,-8,48,-80,-32,-7,-13,15,-9,-11,-40,-12,35,6,6,24,32,-40,31,-13,-6,-16,-11,23,20, -11,-83,-4,-25,34,-14,-79,5,-31,3,-54,-59,-35,-1,-88,9,-2,-41,1,-1,21,6,36,-1,-20,-6,19,-1,-25,26,-56,28, 0,2,-37,39,32,-23,71,-45,-8,-32,-26,7,-15,-14,23,-8,-14,-21,-6,-27,-88,-10,73,24,-23,-24,-11,3,-2,22,-72,-23, 
  /* [35][2][][] */ 4,-22,42,49,28,13,-100,8,5,-18,-100,0,44,8,14,-2,12,-66,6,-7,-91,15,5,9,-37,-33,-20,0,-7,12,93,-25, -1,-36,-26,-27,15,20,-38,12,-6,-42,-27,-1,-42,9,37,7,4,-33,8,48,29,1,7,-96,0,14,-20,3,11,0,68,15, -1,49,46,50,42,2,76,-28,4,13,-16,-69,4,8,-50,2,-3,41,-8,20,-49,2,-1,78,38,-20,13,-5,-12,38,-19,0, 
  /* [36][0][][] */ 4,57,39,-76,-27,11,76,-23,25,39,-15,15,-11,8,-57,1,7,-7,3,17,-29,-10,9,-43,-19,-5,0,-12,2,48,-10,53, 0,-112,-55,-29,54,3,35,-41,36,47,17,-14,-35,0,-127,-14,-1,16,1,10,13,2,-45,-96,-79,-56,12,-1,37,-18,90,75, -1,77,110,-19,30,-11,-86,-44,29,12,67,-94,-64,-4,-106,-3,10,-2,1,-54,22,-4,27,46,17,-39,6,-11,30,22,85,-26, 
  /* [36][1][][] */ -1,25,-59,16,-7,-15,34,-8,14,31,-38,-10,-26,-8,-49,-2,-4,-32,-5,-4,-44,8,30,9,-5,6,25,4,-25,51,-51,-25, 3,-60,-14,-4,53,-14,8,4,6,8,-64,-19,-63,-4,-22,0,-5,-2,-3,-43,20,-7,-5,-45,-70,7,28,-9,-7,-15,13,-63, -2,-2,0,76,6,7,29,-11,28,-5,-3,-35,40,4,26,-2,-10,-11,-7,-17,68,6,-23,-52,-13,-9,15,-2,3,-6,94,-29, 
  /* [36][2][][] */ -5,-29,-5,29,3,-18,33,-4,10,-47,58,-63,-47,-1,-23,6,7,57,-14,0,-15,5,9,18,-27,-92,6,-7,-31,32,-96,-30, -10,-37,-57,24,-4,-1,43,-7,22,-37,-18,-83,-82,0,24,4,20,-55,-6,32,-33,-10,17,-54,-80,3,17,-14,13,-24,-97,77, 5,42,25,24,17,8,-15,-48,20,31,17,-13,-25,-14,-27,-7,9,-38,-7,-43,-17,1,-2,43,15,-19,0,-10,-12,-47,-35,-23, 
  /* [37][0][][] */ 4,31,-11,-24,-5,10,-11,-26,30,-75,13,-24,-12,7,-61,5,-8,-55,3,38,-17,0,33,-35,-9,-53,-3,10,-13,26,-92,1, -6,11,-50,-77,51,7,-57,-6,-26,-49,6,-60,-89,13,-12,10,-8,-6,-6,54,-28,2,-25,-15,-81,-60,4,-10,-28,-3,-59,14, 4,-49,-3,2,21,-9,26,-27,1,96,-30,26,-41,-2,-21,16,-7,42,-1,31,-67,-1,-23,-40,45,-68,-3,2,-8,-17,-62,29, 
  /* [37][1][][] */ 11,-17,14,1,0,6,-63,7,16,-45,-50,-7,-26,-5,-49,11,2,-79,12,-127,-64,8,50,-68,-17,-47,30,12,-13,8,-32,2, 8,48,42,-78,-24,-6,-1,-19,19,-39,-10,-31,9,3,-45,9,5,10,1,17,-83,-12,53,-19,69,-45,4,5,4,-21,-42,-15, 12,-3,-94,27,-1,-9,-5,-2,22,31,-34,-53,-77,-6,-40,8,-2,-26,-3,24,-24,0,31,17,26,-36,-22,-6,30,-17,-25,-46, 
  /* [37][2][][] */ 3,-24,-16,-10,36,7,-62,14,21,-20,-11,-58,-54,-3,-28,1,-15,-1,7,3,-72,-4,8,38,-14,-32,7,-4,-16,50,-62,26, -1,-21,36,-30,8,2,-31,22,29,-31,26,-49,-12,4,-15,-1,4,-59,-4,34,31,-12,-6,-24,-34,18,12,10,5,-19,-110,-2, -7,32,-65,-28,-3,-4,-2,-5,42,4,63,-89,101,1,23,-8,-12,-40,0,57,93,-10,18,12,-1,-7,7,-7,-5,-11,9,36, 
  /* [38][0][][] */ -2,52,19,6,41,-14,-18,-38,-28,-11,-53,48,-24,11,-5,-6,-1,-24,-7,-17,-5,-8,-75,12,-46,-23,10,-4,12,9,-8,-16, 5,-15,15,-26,16,-3,34,-59,-27,-75,-11,-20,-69,0,-3,-2,-7,-60,1,7,22,-2,-9,-55,-29,-34,-8,-2,-14,1,-50,7, -12,-125,0,-29,36,4,-17,-34,-35,-7,-23,-88,27,2,50,-3,-2,-52,-3,11,45,-6,19,-72,-26,-49,-2,-6,3,7,-125,36, 
  /* [38][1][][] */ 2,4,31,25,12,1,22,-8,-16,46,-50,-57,4,-10,33,-8,-7,-74,4,26,-14,-2,25,86,-59,-65,0,8,-10,23,-19,-41, 0,-33,-60,-19,39,10,36,-45,-16,-29,-28,-37,-42,-2,31,13,-13,2,-10,-22,24,0,29,7,-2,-58,9,1,-10,7,-107,-2, -11,32,-70,-31,25,6,-6,-55,-20,-15,-36,-23,61,-3,113,1,-13,-109,4,-30,-54,8,-3,-7,18,1,-3,2,15,-1,-27,-7, 
  /* [38][2][][] */ -3,-29,-64,-31,11,7,-56,-6,-24,34,-29,-55,-81,-4,-1,10,4,69,14,34,13,5,-4,-84,9,-47,13,-5,18,-2,-3,-26, -1,-36,-30,-52,17,-11,-68,-63,-13,30,-44,-25,-87,14,-127,-8,-6,42,7,-28,-33,-10,-13,-44,-4,-68,3,-4,-6,-24,-54,-71, -6,22,-87,-13,-20,-1,-44,-61,-10,-5,27,-38,-44,-1,-6,-9,-4,-9,8,-9,-14,10,10,63,5,-48,10,3,-2,7,17,-4, 
  /* [39][0][][] */ 5,51,7,-39,35,-13,0,-5,5,-86,-34,65,37,-11,-80,-3,16,-1,1,12,-39,2,19,-2,-40,9,-24,-5,-33,13,-16,-29, -7,28,14,-15,60,13,-99,-1,-7,-76,-65,21,-12,-11,9,7,-5,-15,-4,-104,-36,6,42,26,-14,-8,8,-2,-36,36,-43,-51, -9,54,68,-21,31,1,-1,4,-12,-127,24,32,33,-9,0,-25,6,29,-5,-31,-40,4,67,-13,53,66,-30,8,-15,50,15,37, 
  /* [39][1][][] */ -11,9,-56,-62,-25,-18,-106,-19,-7,-11,-29,-45,-59,-1,-70,-17,10,-11,-7,59,-14,5,0,14,-52,-32,19,-4,-21,-32,-89,-50, -13,18,38,74,29,-10,18,13,9,-60,-76,-1,-34,19,-50,-2,-11,-69,-17,-47,-100,-33,22,-15,3,-31,-28,-3,-10,-16,-28,-94, 1,-78,-4,7,5,26,7,102,-25,-27,24,-10,-39,-10,72,1,-23,-34,3,-63,50,-20,-26,-4,-22,60,-17,-5,17,8,26,14, 
  /* [39][2][][] */ -3,-60,-38,-6,45,-7,-72,-47,-30,-1,13,-21,-86,0,-78,15,-9,-43,-10,-76,7,5,19,-21,-23,-13,-29,-5,28,29,11,11, -8,27,28,21,-6,-28,-14,-6,1,-73,15,77,-92,-6,-105,-22,-3,16,-6,39,-78,5,-27,-45,-9,-71,-25,1,-4,18,-8,-55, -10,30,-1,35,64,1,-33,34,-11,-8,14,16,70,-2,81,-6,-6,-45,-5,-36,2,10,-18,50,4,72,-20,7,16,35,102,-45, 
  /* [40][0][][] */ 42,25,-32,11,-76,-73,28,-59,17,-3,-67,7,-52,20,-37,-44,-3,-73,-59,19,-77,-51,-21,-64,4,-39,-10,-43,-2,24,-71,-64, -66,-66,-20,-23,-11,-20,-91,53,-33,-19,-55,-82,-24,23,39,6,22,-83,21,-1,-42,44,-82,-84,1,3,-33,-7,6,-32,-40,-25, -84,-21,-39,29,-6,-62,-64,-51,-3,-44,-73,42,21,-75,-11,-56,23,-74,33,-41,15,27,-39,38,40,21,-4,-60,1,-91,-94,-21, 
  /* [40][1][][] */ 59,-53,6,-61,-73,-40,-39,18,6,-2,-127,-54,-43,-59,-69,8,94,-120,-65,-83,-77,-45,11,10,-36,6,-21,-40,34,-83,-21,-21, -27,-24,-45,-71,14,-65,-82,-16,-33,-38,-51,-73,-49,-72,-69,-57,-14,-21,-27,-57,-108,-10,42,-62,-60,-3,20,-59,-12,-36,-75,-15, 2,-30,-1,3,-58,-38,-3,-17,-6,-68,-33,2,-24,21,-10,-82,-7,6,-6,-50,-49,6,4,-77,-51,-21,-34,67,-36,48,-27,-55, 
  /* [40][2][][] */ -17,33,-70,-41,88,39,-42,-50,61,46,14,49,-66,38,52,-68,4,-49,26,3,-65,-4,-17,-88,-14,23,17,59,51,-77,-64,-28, -29,-80,-11,-84,87,-64,-39,13,-68,-22,-102,-22,-14,85,-51,-31,23,-27,-74,-12,-48,-74,-14,-51,-18,-51,14,-32,-84,-10,-52,24, 0,-70,4,-13,-68,-28,-2,-10,-77,-88,-58,-35,-51,-4,1,20,49,-8,-32,-3,-74,-74,-68,-16,-79,35,-39,58,-18,-29,6,16, 
  /* [41][0][][] */ 2,21,-29,-76,76,19,-12,5,-6,-8,-19,20,-77,-2,35,-10,-7,-39,3,39,-30,-1,-58,5,-7,24,9,-8,15,-39,-62,16, -8,-49,-72,-48,-15,18,-110,-75,-2,50,85,11,8,11,-121,7,3,-28,3,-10,64,-4,-23,72,48,-77,-2,-5,38,-26,-90,27, -6,-40,-29,3,-25,0,38,-35,-3,40,-41,-48,-15,3,-47,-17,-9,-79,3,-24,-97,-7,-26,-108,-59,-77,11,-8,12,27,59,79, 
  /* [41][1][][] */ 9,9,42,-94,-4,2,-59,-7,-39,-42,-58,37,-26,6,5,12,-25,-54,8,11,48,2,-4,-14,-93,14,-3,6,0,-14,80,-29, -6,-61,-44,-45,19,-2,34,-62,10,-8,-17,-66,39,-3,-77,-4,-1,-24,12,7,38,7,-9,-12,97,-7,-18,-3,-4,5,-17,-26, -5,15,-6,23,-14,-19,-21,-35,-5,-46,-9,-17,-30,-5,-90,0,6,12,-10,-52,-30,12,4,-80,-2,-22,22,-11,-5,81,30,26, 
  /* [41][2][][] */ -4,-31,-15,38,35,-10,7,73,-35,-82,17,76,41,2,51,17,7,-77,9,46,-34,11,-17,-88,-87,82,-29,-3,3,-69,8,55, 7,39,19,5,17,-18,36,-5,-52,-69,-17,10,7,-3,-23,7,-8,-76,-20,1,-67,-2,-10,-74,-44,-4,-14,-12,-19,-35,-11,5, -6,34,-35,-32,-36,-13,-59,53,-37,41,22,92,-17,-2,-36,-15,10,15,-20,27,-17,-4,-17,-43,51,117,-29,-5,-5,23,127,19, 
  /* [42][0][][] */ -10,-76,-32,-20,-35,-33,-41,46,-42,-56,-46,53,-7,6,-55,14,16,-64,6,-95,-41,-16,-31,-52,-126,-17,16,39,-26,-12,-23,17, -13,-28,-2,-62,-30,2,-29,-22,5,-77,-28,-90,12,-42,38,-18,-21,-32,18,-62,17,-20,-6,-60,23,-2,-10,-19,-15,5,-77,-31, -36,-13,43,13,-13,-9,-9,25,-34,-44,-127,-51,3,-11,5,-35,18,-83,15,-23,-33,-27,10,9,-36,-6,39,-10,-25,-5,0,-66, 
  /* [42][1][][] */ -8,6,-48,42,-12,-27,-55,-19,-9,-34,7,-82,-64,-6,-6,2,-17,-30,-18,-9,-50,-35,3,-90,-73,-99,-29,-20,-11,-16,-59,-40, -7,-41,-66,-63,-13,-33,-28,-85,2,-63,-45,-14,-61,6,34,-37,-16,-110,-30,-30,-48,-19,4,-11,-14,-33,-27,18,-12,-15,-78,-51, -17,-35,-60,-86,8,12,-61,-89,-2,-88,-90,-78,-29,-16,2,-29,-34,-95,-7,-87,-49,-14,-25,-34,-20,-98,38,-39,-4,-34,-40,-62, 
  /* [42][2][][] */ -3,-50,-70,-40,3,0,-74,-40,-31,-67,15,-29,-48,-26,-52,12,2,4,-36,-55,-51,8,-30,-65,-75,-68,-10,-10,-28,22,-76,-22, 10,82,41,-4,16,12,-50,-8,-32,-23,-96,-14,10,9,25,-7,-7,-64,-18,-100,-33,-31,-19,0,12,-23,-17,-9,6,-2,-19,-58, 1,4,7,-31,-17,17,-51,19,0,-28,-24,11,-15,5,-30,-38,8,-32,10,-66,-19,-5,-28,-51,7,12,-15,4,-2,-20,-6,-84, 
  /* [43][0][][] */ -6,66,16,-12,32,-16,-5,-38,34,-11,17,-45,-100,3,-3,-9,-12,-32,-2,-3,-13,1,33,53,-12,-103,-5,0,16,56,-45,-9, -12,68,12,37,7,-10,-28,16,-14,-39,-45,96,40,-4,-60,-11,-5,-43,-16,-54,-43,8,8,21,14,9,36,-2,8,47,34,-36, -6,2,-83,-49,-44,-10,-127,42,-33,-106,7,2,-60,-16,-17,-2,0,16,-15,-83,-15,-2,-23,-55,-11,57,14,1,20,-5,76,-2, 
  /* [43][1][][] */ -10,44,46,-34,-51,-16,-41,-54,19,-11,-4,-96,-80,-5,-59,4,18,-11,3,-54,-2,-4,-17,2,1,-43,-33,4,31,46,-14,-37, -9,38,21,28,10,-5,-74,6,14,-40,-107,58,-20,3,12,-1,17,8,0,-52,-35,3,11,56,24,-11,9,3,17,80,-51,-59, -8,-95,-32,5,-19,8,38,-17,-6,-4,-5,-88,39,-6,66,0,11,-22,-2,-55,4,-1,55,-30,-89,30,16,0,15,-5,-20,51, 
  /* [43][2][][] */ -15,-36,-33,67,24,13,5,-1,18,-50,-55,16,16,4,-49,-4,0,-35,-8,92,-57,-11,30,-3,16,-51,27,2,8,14,-6,-65, -10,-7,-22,22,-25,8,-5,-30,2,-27,-7,45,-51,-16,-46,1,13,24,25,18,-34,4,25,-120,-99,-56,-5,7,8,63,4,-74, 15,-6,-50,33,-13,5,21,30,25,32,-5,6,-48,-3,63,-5,9,34,-1,-8,82,-3,19,-23,-24,51,19,4,23,4,51,9, 
  /* [44][0][][] */ 13,19,27,-54,-25,-18,-21,3,6,83,-46,-112,-8,-4,-58,-6,10,-13,3,40,11,-1,9,1,11,4,-13,4,-1,22,-105,-50, 3,3,92,-101,-43,-25,-28,-36,4,23,-78,-82,-94,12,-56,-12,-2,52,3,7,-44,3,-2,-21,-5,-48,-14,-14,-8,32,-127,-100, -15,-50,-32,-30,26,-6,-65,1,36,-54,14,7,-15,5,14,1,-2,4,-6,-66,36,-5,13,-49,-39,-40,12,2,-15,22,-15,-8, 
  /* [44][1][][] */ -2,34,-71,77,-27,-4,30,-3,24,-98,-4,12,67,6,15,3,4,-14,-2,50,-67,-10,2,-37,-28,16,1,-10,28,1,45,23, 5,-29,15,-20,-36,-23,1,66,30,-96,-113,16,4,6,82,-1,5,-52,0,-83,-4,-12,61,-60,-43,84,34,4,-1,20,-49,-90, 12,-26,-17,-42,23,-9,-40,-52,22,-68,-48,-17,35,-12,-30,-11,-19,7,-4,-45,3,-7,37,-18,-9,-14,30,2,12,29,39,-34, 
  /* [44][2][][] */ -7,-75,-94,31,4,-26,-22,-76,1,-4,-6,-63,-48,-10,-15,0,-3,-58,-16,17,-11,-16,14,-86,-33,-19,11,-11,-20,26,-7,23, -19,25,53,35,-29,-23,60,24,24,-33,-31,11,-6,-15,-6,-8,0,-32,-19,-61,-35,0,13,15,36,16,38,2,-18,58,6,-53, -10,1,77,37,23,-9,-56,7,30,-39,-55,84,78,-9,-61,-10,-7,-40,9,-70,27,-3,1,-37,-16,37,36,12,11,60,84,-45, 
  /* [45][0][][] */ -17,-96,-10,-56,-84,22,16,70,-18,-12,-68,-34,-29,-18,-58,-58,-80,-69,-59,-57,30,-100,46,-15,9,-24,10,-21,32,32,-16,28, 1,-44,-12,-20,26,-76,-98,-17,22,-58,-95,-4,-47,24,-76,-51,-59,-72,14,-45,-45,-31,52,-84,-15,-8,-85,-95,9,-62,-21,-26, -46,-27,-72,21,-86,8,14,-39,40,18,-28,3,-23,-25,-24,-7,-97,-55,-95,-2,-15,2,-69,-77,-27,61,35,41,-35,3,-108,-108, 
  /* [45][1][][] */ -48,-49,-40,-11,-68,-46,-84,-89,-85,15,-49,-44,-120,13,-18,3,48,-92,-50,-21,16,15,41,6,0,19,-65,-76,-48,23,-43,-31, -43,-41,17,17,-14,13,35,-14,-93,-42,-77,-86,-42,-77,-56,-22,60,-2,-15,-56,1,-40,-54,-66,-69,59,12,10,24,-43,-50,-56, 32,-79,16,-19,12,-60,-94,-50,-31,12,-19,-28,39,-64,-44,-66,17,-53,7,24,9,-1,14,-33,-88,69,69,34,30,62,-71,-81, 
  /* [45][2][][] */ -76,-1,41,-42,-81,36,-52,-65,-44,-106,-43,20,-105,-52,19,22,-70,48,35,-59,79,6,-7,-13,-92,-30,-45,10,-68,-24,-37,-28, -52,5,-8,-22,-34,19,-68,-44,-82,40,30,-26,-27,-63,-4,-77,90,-40,12,38,-24,13,-51,-19,-106,-127,66,-65,-69,-18,-59,-51, 14,-77,-22,40,6,-78,13,16,-33,-57,-41,24,31,-26,23,31,95,-47,-11,-28,27,-58,-34,-105,33,-22,38,5,-74,32,-122,21, 
  /* [46][0][][] */ 8,-55,-104,-34,28,19,-5,-31,21,-25,33,-46,-29,8,-4,1,15,52,-4,-7,54,-8,-29,-29,8,-76,-15,-12,-4,10,-29,-37, -12,-3,-58,19,-5,13,-28,-74,25,28,-44,-47,-8,-9,-127,-5,10,-64,1,76,73,-3,-18,-36,-14,-72,-11,-4,-19,7,4,63, 2,30,36,49,2,3,18,101,34,-100,-35,-66,-17,3,-34,7,21,-13,8,-79,-34,9,-27,-60,-21,19,21,1,-6,0,62,-39, 
  /* [46][1][][] */ -3,-35,-79,6,8,-6,-3,-10,36,-44,32,57,28,0,11,13,7,56,6,-31,-42,11,68,30,45,-38,-8,-13,2,0,-25,12, -1,27,-65,16,-9,-8,-15,2,14,23,10,-56,7,3,-1,-2,-7,-72,-9,-13,-27,8,32,30,3,-29,-4,-4,0,-10,57,-2, -10,-14,-45,-7,15,-24,-23,47,11,-39,-47,-17,-17,-4,50,-8,4,-18,6,-69,-23,0,24,-24,-64,9,-14,-12,-6,20,-59,-28, 
  /* [46][2][][] */ 6,-19,-8,-25,8,19,-73,28,2,10,-14,83,23,-6,-19,-17,4,11,-14,-97,-38,-5,-12,-76,-50,-2,-14,-6,12,-25,66,7, 4,65,-31,-41,4,8,-25,6,26,-2,29,9,2,6,-33,6,4,-15,-2,53,2,0,-10,28,4,-17,-15,4,7,-20,15,-26, -2,-38,-82,24,6,8,-26,11,10,-7,-15,-102,-13,-2,-18,-7,1,-30,-9,-28,14,-13,-5,-97,-73,-22,-29,4,-13,-15,-14,-54, 
  /* [47][0][][] */ 8,83,-12,-80,-38,11,24,63,2,4,24,38,17,-4,-27,1,11,41,3,-70,-20,-4,45,5,32,-43,16,3,-22,16,-27,-40, 5,-56,5,-46,12,11,-68,23,3,38,-98,21,-19,-1,-47,18,-4,38,5,-27,-20,-5,20,-120,-31,-2,5,11,-11,28,-6,-38, 8,0,48,-52,-40,-6,-41,3,-27,14,29,35,-59,-2,19,21,-10,44,4,4,-39,-2,-20,17,4,-45,23,-4,-41,18,-10,-7, 
  /* [47][1][][] */ 4,-6,-5,-71,-26,-3,-43,-97,-3,-8,50,-123,-11,12,-50,9,5,26,-13,1,64,-6,-3,-22,9,-100,-10,-7,-3,-7,41,-61, 9,36,-31,-12,-44,1,-16,-22,-19,0,-59,-27,-123,10,-54,8,15,-48,-12,44,38,-10,53,-8,-28,-60,14,-5,10,29,-22,-12, 9,60,103,22,-2,-12,36,45,-8,-53,-89,30,44,0,19,6,-3,-47,-11,-48,-91,-12,62,-29,15,-3,14,12,-15,29,35,8, 
  /* [47][2][][] */ 6,-108,-57,-26,30,3,-11,25,-14,0,6,45,-7,13,-8,-2,-3,59,11,-26,14,3,-4,-66,-23,41,14,15,-23,-3,113,-15, 9,-50,-63,24,-36,4,21,-59,-4,11,20,-51,-36,15,41,0,-6,6,12,-78,-65,1,32,3,-16,24,-13,-2,-30,49,71,-34, -5,9,50,-18,34,1,-26,0,14,2,-55,21,12,-7,-49,2,7,0,-10,127,-6,5,26,-13,1,20,26,-7,-38,66,-32,-27, 
  /* [48][0][][] */ -10,-41,-32,-78,-5,-9,74,-12,17,-31,-55,8,26,-12,-19,2,-17,-67,-9,-14,-50,-9,-1,-30,9,4,15,-5,1,13,89,46, 2,-98,-69,-48,12,11,-14,-39,-27,-2,-6,-59,-74,-4,-47,-6,-9,-7,1,4,3,11,-38,-99,-27,-113,-34,-7,-8,20,12,6, 3,49,127,20,32,10,-24,-27,-22,4,-82,-4,-31,10,-101,6,14,3,2,-7,-50,2,37,50,27,-71,19,6,-15,-11,-40,-45, 
  /* [48][1][][] */ 6,-36,-56,12,29,11,32,-18,14,12,-47,-27,5,-9,2,-4,-12,-19,-2,-6,-64,2,6,-51,-28,30,8,-2,3,-8,-42,-32, 8,-48,-46,-11,-46,21,47,28,9,12,-38,-7,-25,2,-50,5,-21,24,-10,-7,-18,-6,-23,-20,1,-17,29,-4,7,-47,61,-83, -9,-28,-9,82,-37,10,5,24,-11,7,-97,33,21,1,57,-14,6,36,9,-94,32,6,31,-36,-58,15,24,-5,19,-45,4,-75, 
  /* [48][2][][] */ 8,-43,-14,41,-1,-3,23,-25,22,-7,49,-63,-50,-3,22,-3,-25,60,4,37,13,0,0,-31,2,1,12,-12,10,43,-79,14, -5,-21,16,83,-23,6,52,19,-12,-63,-14,-59,-30,5,-15,-6,2,-94,-3,6,5,8,4,-35,-64,7,13,-4,-16,-11,-68,-15, 2,-9,-9,-4,-4,16,47,-86,-8,-11,-1,20,47,-7,-32,12,18,-21,-3,1,-7,0,1,-9,-11,22,-17,7,-14,-23,-12,-54, 
  /* [49][0][][] */ 8,-17,-56,-50,-30,-16,-61,-34,-23,-61,-42,6,7,-2,36,-21,20,-16,-8,-30,-108,-27,-5,-53,-49,39,5,15,17,-32,-27,-6, -33,-36,-76,-76,-42,-24,-57,-47,12,-38,-88,-29,-41,-19,-80,12,-11,-74,12,-12,-114,-15,-7,-56,-72,-16,29,-6,20,-32,-33,-14, -17,-4,29,-20,7,-13,-92,-13,20,-20,-52,-14,-41,9,-22,-6,-32,9,-14,19,-11,17,19,-29,-56,28,-3,21,-31,5,-27,-6, 
  /* [49][1][][] */ 7,-29,-52,-22,-37,-32,-29,-47,-19,-96,-16,-13,-18,-41,-82,-44,5,-59,-17,-18,-85,-26,7,-45,-52,1,-9,-39,-5,-28,-28,-32, -8,-77,-84,-4,-11,-3,-93,-33,11,-80,-13,-42,-78,-19,-56,-31,-13,-104,2,-65,51,-26,-28,-72,-58,-17,-39,-1,-5,-32,-77,-37, 3,-60,-66,-75,-38,6,-27,-16,-10,-69,4,-53,-57,-20,16,-9,3,-68,-28,0,-41,11,18,-3,-59,7,-27,-27,-3,-35,-37,-21, 
  /* [49][2][][] */ 0,-7,-71,-75,-31,11,-68,5,16,-44,-26,20,-73,15,-25,-14,-26,-38,-14,-34,-40,4,-41,-42,-80,-36,11,-33,-34,7,6,-9, -12,-43,-37,-118,-19,-34,3,74,-1,16,3,-46,-53,-7,40,9,-25,-62,-4,-5,-39,-44,-25,-43,-9,-33,-6,-35,-21,-19,19,-19, -17,-12,11,-26,-7,-7,-23,-38,9,-9,-24,-45,-51,-34,-127,-1,-15,-29,1,-12,-66,2,8,-95,-53,-30,12,-14,1,-37,16,-6, 
  /* [50][0][][] */ 10,-47,-47,-11,-17,-8,-20,-61,3,-55,48,-103,-66,-8,16,8,19,36,-11,61,114,3,-6,-66,-35,-94,-7,-10,-15,31,-40,-64, 3,-9,-91,10,-36,-4,22,-127,13,84,-25,85,2,3,-34,9,26,14,0,7,10,2,-36,-34,46,-47,14,6,12,33,48,14, -9,-111,-83,-23,-9,-17,-72,-65,19,5,-8,15,-58,4,-53,3,16,-37,2,-12,-20,8,-29,-121,-59,2,19,5,7,2,-34,59, 
  /* [50][1][][] */ 11,30,-73,-15,-27,-12,-73,-26,39,-71,8,60,21,-5,-68,12,14,31,-13,-41,-13,-4,2,-81,30,-58,-15,-1,37,-7,72,-63, 11,-32,-57,10,-8,-14,-3,-27,-4,18,0,10,-70,1,-73,-1,-3,-55,10,22,-64,-4,10,30,24,-33,-4,3,10,10,37,-8, -1,-47,1,-88,14,-11,7,-48,29,-34,6,-125,-115,-12,10,-9,4,13,-2,-30,-72,-3,-8,-52,-37,-30,-14,-6,-19,-11,-91,-55, 
  /* [50][2][][] */ 1,-37,-76,-55,32,8,-116,23,-26,-20,-17,37,-25,12,-51,3,-3,11,-3,-30,33,-10,8,-88,16,-35,5,11,21,30,3,-69, -3,38,-80,52,-19,4,21,-11,-5,-3,17,-7,20,5,-95,0,-12,-48,0,4,17,-11,6,43,27,35,-24,11,10,40,6,-4, 3,7,40,-20,1,-1,73,-90,50,-31,-93,-54,-20,-7,1,14,8,-78,-4,-19,-85,8,-5,-9,-3,-66,12,14,-10,26,-38,4, 
  /* [51][0][][] */ 9,-53,2,44,6,3,31,-19,28,26,-75,-34,-5,-18,11,-8,-25,-101,1,1,-72,-1,-2,-52,-32,-21,44,8,-22,-16,-28,-36, 9,-23,-21,36,-20,3,-14,39,14,-116,-58,73,34,-10,7,-3,-12,-51,3,-37,-102,8,-21,-71,-75,31,29,3,-13,25,36,-69, 8,-86,1,-14,4,15,50,7,21,20,8,47,6,2,0,10,-8,33,-5,-55,62,-8,11,-124,-42,11,-6,12,-8,8,76,1, 
  /* [51][1][][] */ -1,49,86,-48,-1,14,82,-1,19,35,-20,-110,-127,9,-25,10,-4,-44,-4,-8,19,2,16,96,-22,-28,26,10,-7,-34,0,13, -4,96,-24,10,-9,5,-24,-41,-2,-7,-33,-35,-21,4,35,-7,6,-5,0,3,64,-2,7,37,6,-25,2,-2,-12,10,-95,-35, 1,-31,20,17,-40,20,69,-33,21,5,-27,-6,15,6,73,3,10,-58,8,-46,-27,0,7,-18,-3,-3,9,6,-21,-7,-69,32, 
  /* [51][2][][] */ 9,-70,-57,28,15,8,10,11,14,3,-69,-9,-27,6,-33,-5,-13,22,5,-111,-54,-1,20,-29,-34,13,6,6,-10,-8,90,-82, 13,-75,16,-27,-6,20,-5,-77,5,24,35,-72,-115,4,-9,-1,25,42,3,8,2,5,-12,-42,-12,-81,-12,15,2,17,-30,-64, 10,3,52,28,-8,-4,32,1,9,23,18,32,-37,-1,-54,11,-8,18,4,6,-23,-8,23,29,12,-27,-12,2,-6,1,-55,-13, 
  /* [52][0][][] */ -4,-25,-20,-42,-15,0,-56,29,-11,-104,-85,-27,20,10,-8,7,8,-69,-3,20,5,-3,13,-2,-37,78,-8,14,-9,-3,-1,15, 7,-127,-31,27,-66,3,-67,-59,-22,-18,61,-24,27,-8,-6,4,15,-58,6,-32,-9,3,-40,-55,11,-71,14,5,5,18,-61,56, 7,16,48,86,8,-4,38,-22,-29,-14,12,-28,-1,-2,-6,-7,11,-41,-8,-28,5,1,20,10,2,-63,26,-3,0,-24,22,-59, 
  /* [52][1][][] */ -4,-63,21,-35,34,-1,-18,-54,-20,26,-88,4,-19,8,-33,4,-19,-87,-1,-32,-25,-9,-29,-57,-78,-10,2,9,-4,-16,47,43, -5,-38,22,30,48,0,9,-27,-14,9,31,-4,-58,6,49,-6,-10,-10,-8,7,24,5,5,-51,6,-33,4,0,-1,12,-27,82, -3,11,67,-10,41,11,32,13,-21,-62,-43,10,-94,2,-11,-4,-2,-14,9,-45,13,-10,-20,24,4,-11,8,-9,-18,3,-65,-39, 
  /* [52][2][][] */ 0,3,-54,54,-13,5,-36,-3,-15,-78,22,22,-23,-4,1,-3,-3,14,1,72,-34,-2,-21,-4,-16,40,-19,13,3,4,-10,-12, -5,8,31,74,30,2,101,-26,-25,-15,-37,18,0,1,20,-10,-2,-119,11,40,-45,5,34,-23,-32,45,-15,5,2,-41,-5,12, -4,-26,-57,9,19,0,10,-44,-7,-3,-9,2,7,-5,-46,-6,-7,-8,6,-8,-72,-6,-7,-72,17,54,12,-5,4,-6,-32,-47, 
  /* [53][0][][] */ 3,-38,-107,-40,-32,4,-65,-126,-20,-19,66,-92,-103,-8,-84,-6,-8,-4,-4,6,111,-12,-18,-97,14,-91,-3,-11,-8,8,65,-63, -3,-14,13,3,25,11,3,10,0,43,-13,92,17,-3,-48,-17,12,-48,-4,2,-17,5,84,-20,31,-26,11,7,-3,14,-18,-24, -9,21,17,41,8,-6,-15,66,-18,-75,-68,-7,60,-8,25,4,-9,-43,-15,-117,-69,-10,19,-7,-9,45,10,3,-5,27,61,-63, 
  /* [53][1][][] */ -12,-33,-84,-26,-26,1,-6,10,-21,-40,29,8,-4,-1,-24,2,25,30,2,-2,62,3,-4,-12,-15,5,-23,7,-8,-11,30,-21, -11,2,0,12,31,6,-34,-7,-13,-8,-7,77,-29,-9,-8,-3,-2,-5,19,-57,-86,-13,4,27,29,-14,-19,2,1,6,-34,-54, -3,-29,-24,-73,31,-7,-15,-9,-26,-47,-25,-27,35,4,-14,4,8,3,-17,-63,-2,9,-28,1,1,38,-20,10,-5,41,-23,51, 
  /* [53][2][][] */ -9,0,7,70,28,9,83,-29,-16,10,-75,-52,-15,5,22,8,0,-127,-8,46,20,6,-22,-54,-70,-57,-6,4,3,12,-69,-50, -1,35,-49,37,56,18,13,-13,-11,-12,27,46,4,-11,-19,-8,16,-9,-9,26,32,-11,-9,16,-5,9,-21,-11,0,33,-66,-27, -5,-93,-58,20,10,6,-20,18,-23,-4,-33,-17,39,-5,-43,-2,-13,41,-4,38,61,8,30,-68,-43,17,-35,0,-2,37,15,12, 
  /* [54][0][][] */ 18,2,51,55,-44,-7,53,-75,14,-26,4,63,89,16,9,2,3,-24,4,16,70,1,90,46,60,-48,-4,-1,-52,2,-106,-38, 15,-91,61,15,11,3,-32,8,-18,-113,76,-77,-55,17,29,-7,-13,-72,1,51,-88,6,11,-78,-37,11,-23,-3,-55,-12,-122,15, 13,-36,-79,-33,13,2,-30,-44,-8,-57,26,-13,55,5,-44,4,-11,-7,6,60,-30,-1,48,-43,-21,-87,7,-3,0,-24,-91,54, 
  /* [54][1][][] */ -3,-17,54,13,-36,12,-34,36,-12,33,17,97,52,3,-37,9,42,34,14,-50,127,0,42,26,-20,-25,28,-4,0,13,-70,-18, 6,-38,70,1,22,20,-4,-9,-16,4,-21,-76,-36,6,-9,5,23,-82,13,-83,-88,-4,16,-6,-27,-30,-40,-6,-26,-28,-47,-57, 5,23,-64,38,21,16,-110,-71,-20,7,49,-37,-19,12,-113,-2,-12,-20,13,-15,-23,-5,34,-43,-1,-63,14,4,-20,-19,-62,15, 
  /* [54][2][][] */ -6,0,36,25,73,3,-3,38,-11,-8,23,92,71,6,10,14,-9,-2,4,-2,2,1,8,-26,23,12,-18,13,2,-24,-76,7, 13,49,17,-61,49,18,27,-47,-19,-96,-12,-92,-46,17,-29,-12,17,29,9,-87,-77,4,44,-12,-15,-58,-35,-5,-9,-60,-34,-34, -4,-20,-79,50,63,10,6,-38,12,-51,-3,-44,16,19,19,-2,-1,40,3,-3,-72,4,23,10,-1,-81,2,-8,-35,-37,-113,33, 
  /* [55][0][][] */ -11,11,21,-24,-8,-6,3,8,-12,-127,-89,-42,-22,3,-11,-10,-8,-76,0,-77,22,-13,-5,9,-92,-11,3,3,8,-6,-46,-63, -13,22,-11,48,0,-8,-22,-18,23,-102,-86,27,7,-2,33,-2,-13,-76,-2,-103,13,-6,20,1,-47,35,1,-6,-5,-17,62,-97, -12,-21,99,13,5,-10,-88,-30,23,-17,-42,-30,28,-8,-74,-14,-32,7,5,-86,29,-8,30,-2,58,26,3,-4,-25,-27,-29,-12, 
  /* [55][1][][] */ -8,-27,4,-49,-60,-5,37,-54,-18,-11,-50,-5,-24,-5,-21,-9,20,-8,-3,25,69,2,36,-64,-1,-46,-3,6,-15,26,-9,16, 0,67,42,-12,-9,-3,-35,59,24,-76,-80,3,20,-10,31,-6,9,-70,-8,-69,-43,-8,1,58,8,11,-32,-7,-17,-26,-72,-57, -13,-51,-20,-34,20,-7,-10,-47,13,-118,-19,-14,6,-2,-21,3,-11,22,5,-69,9,3,53,17,33,-1,17,-2,-20,25,-107,-5, 
  /* [55][2][][] */ 5,-29,40,36,10,0,118,-23,0,24,-41,1,36,-4,41,-13,-16,6,-8,40,27,-14,11,1,-14,-6,0,7,-18,24,26,-84, -3,-17,-20,-55,-5,-15,-63,-9,8,-26,-42,29,56,-8,3,5,-23,18,-12,3,8,-7,6,-4,-51,68,-13,-10,-14,-20,70,-6, -11,-9,33,-44,17,4,-37,6,23,-41,-56,-11,42,2,-58,-8,14,27,-7,-38,2,9,-6,15,35,-23,19,-13,-18,4,-6,15, 
  /* [56][0][][] */ -16,-39,9,-7,-14,-14,13,4,17,-45,-95,7,64,-17,-31,-4,-12,-50,-19,-2,8,-4,-3,-17,-36,2,13,17,-1,-5,-6,-29, 12,-45,-34,12,1,-17,-114,-9,1,-120,-69,-20,25,8,-54,-4,10,-3,3,-53,1,-4,6,-10,-30,26,9,-18,-17,11,6,-63, 11,-39,-46,-57,-7,3,-73,-27,-22,-72,-34,-28,-6,-27,-108,2,-15,-60,-19,-27,-13,5,3,-43,-34,-12,22,-15,12,-8,-62,-14, 
  /* [56][1][][] */ -14,-38,-38,-3,-10,-16,-71,-35,-7,-17,-56,22,-1,0,-45,-8,0,24,-16,-59,-5,0,-1,-4,-25,-8,-2,6,-19,-23,-29,-72, -7,-69,-26,-38,-6,-25,-36,-25,-42,-94,-43,-12,-36,-9,-75,-4,4,-108,4,-69,-73,-15,-4,-66,-64,-12,5,-1,20,6,-67,-60, 1,14,-50,-6,-3,4,-38,-41,-8,-42,-80,5,22,-27,-127,-23,-9,-91,10,-58,-41,-13,-16,-33,-38,-52,-6,-14,-18,18,-28,-14, 
  /* [56][2][][] */ -19,-35,-36,-7,7,-19,-39,11,-8,-51,-77,-9,35,-23,35,4,1,-97,-27,-12,-5,5,11,9,-10,39,-3,-4,-5,0,37,-45, 6,-52,-26,-13,1,-4,-34,-62,-20,-55,-26,-11,16,-9,-28,-20,2,-32,-21,-73,-35,8,17,3,-6,-17,8,11,-13,-14,-94,-43, -25,20,26,-4,-26,-10,-36,-16,38,-20,-58,11,-10,3,-57,-5,18,-11,8,-46,-86,-17,21,7,7,-44,8,-10,-6,7,-30,-72, 
  /* [57][0][][] */ 2,24,74,-10,12,-1,-2,46,15,-78,49,116,91,-2,41,-3,2,-70,-5,54,-60,10,-1,-21,17,78,14,8,5,46,-32,57, -2,-22,25,-39,-47,11,12,-32,15,-89,27,23,-66,-4,-87,14,0,-77,-1,4,-93,-2,59,-113,-71,-16,4,17,-14,5,-40,13, 5,-14,-51,27,27,12,-20,-18,16,-35,19,55,-17,-3,-46,6,3,66,7,52,-23,1,41,-36,-32,17,18,-1,-11,24,63,24, 
  /* [57][1][][] */ 11,-60,13,-62,27,-11,-105,-2,13,6,20,59,-26,6,9,-8,0,-109,2,-127,-52,-1,68,24,-23,-8,3,-5,18,-5,-115,67, 1,-103,-72,-40,-16,3,-94,-47,29,-30,0,10,-98,17,-92,-3,13,-52,15,-104,-80,12,15,-69,-61,-35,-8,10,-26,33,-124,-23, 6,71,64,-13,27,5,-2,57,5,-57,-4,50,26,16,-114,4,-3,37,-2,13,-15,-11,-7,-4,-8,-26,-21,8,-16,58,59,-27, 
  /* [57][2][][] */ -4,-26,-25,24,34,-28,-107,44,22,46,1,75,46,7,26,-10,18,-1,-10,-45,86,-2,-9,18,21,-27,28,6,5,32,-65,38, 18,-38,-31,-79,20,18,-107,-16,25,-25,-18,-64,-89,8,-21,8,16,-34,14,-26,-46,-9,20,-57,-70,-6,18,4,-19,28,-74,-6, 12,11,15,-26,18,11,-43,-23,38,25,35,20,65,5,-78,17,2,27,-4,-17,41,-8,-12,-87,-63,14,21,5,-8,24,40,51, 
  /* [58][0][][] */ -9,-6,5,9,21,4,-16,3,-23,-53,-56,32,48,-3,7,-8,-2,-20,9,-34,-21,9,42,-37,-35,-9,-6,-1,-20,24,81,-35, -2,-92,-71,-51,-17,4,-12,-14,-19,-12,58,-83,-117,3,-72,9,12,15,17,-54,-2,10,59,-50,-9,-39,6,16,-16,13,-27,30, 5,35,96,52,5,-6,-96,15,-11,-31,-127,-62,-106,10,-61,5,-1,7,-1,-60,-43,-4,34,26,39,-21,2,14,-13,21,-35,-113, 
  /* [58][1][][] */ -3,-15,34,-10,-2,8,26,-27,-25,-93,0,0,-32,7,-45,-10,-20,-32,-4,18,-30,11,32,-35,-70,-66,-4,-7,-26,35,-56,-52, 7,-89,-41,2,-48,-1,-14,-48,-26,-22,20,-16,-58,12,42,4,-19,-88,0,-22,-20,-19,14,0,-67,-5,9,-4,-16,1,15,38, 11,-26,19,-53,23,-2,-21,-29,-9,-6,28,-3,39,9,-71,3,-13,-5,-3,39,-18,-6,18,-51,0,-56,-9,-6,12,-24,5,-5, 
  /* [58][2][][] */ 9,-76,28,13,-27,4,-16,3,-16,11,7,-3,-65,0,58,-9,-15,-22,8,-30,13,9,6,-23,2,-50,-11,-4,-8,4,-57,-30, 4,-51,-58,15,-5,5,-71,36,20,-37,-4,38,7,-9,75,7,-14,-85,0,20,-1,2,-26,-20,-105,27,-4,-6,7,32,-78,59, -3,94,16,-18,8,-6,-5,-25,13,-54,7,-38,-75,4,-9,7,-3,-41,3,-73,-66,10,-7,79,30,-90,46,-8,4,26,-81,-43, 
  /* [59][0][][] */ -5,13,-5,14,3,-3,-28,50,9,-39,-22,86,83,-4,-44,-1,1,24,5,-34,5,5,-58,51,3,37,5,-4,5,21,74,-81, -5,-79,-27,-16,-1,6,-62,-20,3,-92,-29,-32,-34,-8,31,3,-8,-72,-6,-95,-78,-14,2,23,-7,-11,4,-9,0,13,45,-1, -6,-68,23,84,-10,-8,-4,52,-2,-41,24,32,43,-10,1,6,5,16,-4,-49,58,4,20,-94,-64,112,-7,2,-12,24,-51,55, 
  /* [59][1][][] */ 0,1,18,123,-19,3,-59,-45,-11,16,31,-9,-54,0,-54,-13,4,12,7,57,92,10,-2,-26,2,-72,-7,5,-9,8,-11,-39, -9,25,-48,29,-8,0,8,-110,7,32,-8,-99,-88,-1,52,-10,-1,-85,-5,-22,-18,-9,-24,31,7,-53,-10,-2,3,12,-100,-39, -1,-90,19,-77,-17,-4,-47,-53,6,3,-21,-28,-19,-1,-17,3,-14,-13,4,-47,42,-14,0,-67,-46,-64,-28,-3,-5,-21,0,33, 
  /* [59][2][][] */ -3,-52,7,-37,-17,-11,-52,-17,-13,-51,-1,-48,-62,-3,-5,1,-5,0,-11,0,-59,5,-29,22,41,-12,-14,5,3,-18,-28,-82, -1,0,-52,-83,-19,-7,2,-24,3,-14,53,24,-51,-3,-114,1,12,-65,3,-8,7,-13,-5,-17,-45,-18,-11,-8,-11,14,-67,57, -10,-62,0,-11,-20,7,8,13,4,-5,-16,0,-12,-12,-107,0,-9,-127,-7,-36,-6,6,-26,-23,-1,-3,-7,-13,5,7,50,-5, 
  /* [60][0][][] */ -8,-26,-2,-16,-30,22,88,28,27,45,-38,33,45,-6,10,-8,19,-26,-1,15,40,-8,1,-23,1,5,6,7,2,8,3,91, -2,-9,122,29,-15,11,-16,-32,12,-10,-92,-127,-75,5,-73,-1,9,21,-6,-38,-48,11,12,9,13,12,12,-9,9,3,-58,-72, 4,-24,-14,59,-5,5,3,-50,10,-27,-106,-44,-104,-13,-42,-17,18,-7,-10,44,-43,-4,16,-22,-32,-36,5,7,-17,-51,-77,-58, 
  /* [60][1][][] */ 0,60,6,-40,-17,-27,19,30,25,-30,-76,-78,30,-6,65,-17,3,-58,-22,5,-1,12,-11,69,21,10,-5,-9,35,42,-44,-31, 2,-12,59,-16,0,-9,14,-15,27,-46,-93,-62,-30,-19,-32,-14,-7,-14,-24,-69,-12,6,47,21,30,-38,34,-9,-5,16,-103,-80, -14,4,-9,-5,-24,-14,-55,-31,15,-10,-66,-16,-94,-14,29,-1,-8,-6,1,40,-33,-10,-17,-6,-72,-77,17,-16,4,22,-13,-98, 
  /* [60][2][][] */ -5,52,20,-57,-38,21,-115,-40,14,-27,-73,-3,71,0,37,3,8,-18,-16,78,8,-17,-12,-17,46,55,1,-4,0,16,53,42, 2,61,48,-40,-7,10,-48,16,35,-58,-63,9,14,-16,-52,-1,-13,1,1,-22,-56,-15,-3,56,55,-51,0,-8,11,1,-21,-54, 3,23,33,72,-27,14,-22,61,44,-112,-64,23,-26,-2,-48,-3,2,-41,-1,-45,-98,5,-13,14,-31,16,3,-9,-9,-46,71,-17, 
  /* [61][0][][] */ -8,58,116,-24,-24,-9,60,-49,8,-21,-75,-56,15,7,-39,7,-13,-32,6,-113,-46,-4,38,77,32,-81,-8,2,2,22,-56,-127, -9,-11,-82,100,58,10,-27,-32,-27,46,-18,-87,-55,-7,34,-6,2,23,-2,-45,-4,-10,47,100,-58,-62,1,3,-16,-21,-85,-67, -15,-37,66,74,10,3,-13,40,-29,4,-5,35,37,-3,35,-10,-13,16,1,74,42,4,34,5,-54,65,3,-5,7,-3,24,-69, 
  /* [61][1][][] */ 7,-7,16,-15,-5,-12,4,-36,51,-35,-99,-50,-79,-11,-19,0,-3,-23,1,32,43,-10,22,-34,-26,-102,5,2,-5,35,-22,-29, -3,-87,-38,-29,-42,-14,25,-84,41,-55,52,-33,-71,-3,-21,-8,-10,25,4,-35,28,-3,-30,26,-100,-82,-8,3,-23,-20,-7,-81, 6,-3,29,-7,50,2,-38,56,12,-19,-12,52,14,-15,-93,-13,-7,54,4,-57,-52,-10,-32,-20,-6,23,20,4,-21,-55,18,-40, 
  /* [61][2][][] */ 2,-40,-69,-33,0,7,-60,-66,-5,-49,-6,-32,-16,-8,-33,1,3,-45,0,-21,-34,-6,-3,-5,-9,-42,-4,-2,10,-4,-6,26, -8,-49,-107,-27,4,-24,-38,-81,-10,-100,8,-42,-44,-6,105,6,1,-9,-12,-74,49,-6,15,-10,-46,12,1,-12,2,-24,-14,-37, 1,19,-49,-64,0,11,-21,-54,-44,-103,-56,-44,-24,-14,-99,1,6,32,-15,-12,-87,-5,6,-22,-35,-32,4,-1,-4,-16,-72,-47, 
  /* [62][0][][] */ 11,-43,-9,2,5,1,16,-78,28,47,32,-127,-86,1,-70,-13,-1,25,3,74,109,-3,10,-68,-38,-55,-17,6,-25,38,-118,-26, -4,74,73,-33,-79,-16,18,23,27,5,-32,-19,-49,1,-46,14,4,-8,-18,-55,-61,-5,-43,110,56,-7,2,-13,-1,0,2,-56, 1,-61,-99,31,-43,-20,-87,49,8,-72,-1,30,48,3,-18,8,6,-52,11,-84,65,-18,25,-74,-30,55,-5,-4,-64,-11,103,-101, 
  /* [62][1][][] */ -9,-26,31,-59,-29,-8,58,-37,32,26,-66,-55,61,12,-6,-1,4,-25,7,38,66,-1,-17,-64,-77,20,18,-4,-7,29,50,-38, -7,-16,1,39,-86,-20,-12,-10,47,-49,24,-24,-49,-7,-17,-8,22,-8,10,-56,-22,-12,51,-37,-2,18,-36,2,0,20,-99,-34, 6,-77,-50,93,-58,5,42,3,33,-106,-108,37,64,2,2,-9,35,-66,3,-3,-9,-17,40,-1,-123,64,-18,-12,-42,-50,107,-22, 
  /* [62][2][][] */ -14,-22,-54,-73,-57,-1,12,26,15,3,-74,31,27,4,-57,-9,-31,-7,-17,-10,3,-15,-22,-28,24,-5,-14,0,-6,-40,18,-53, -6,93,46,-29,-45,-24,21,2,7,-54,76,50,-43,3,-121,-18,-1,-2,-11,-22,-58,-14,9,44,8,-19,1,-13,2,-26,-87,-48, -5,-120,-101,52,-7,-24,-40,-9,14,15,-25,37,-66,1,-8,-11,10,-116,-9,-10,9,-12,-3,-88,-95,13,-13,-4,-8,-20,68,17, 
  /* [63][0][][] */ 3,-21,-16,45,6,-4,-38,14,-9,-39,-39,6,-9,8,20,-16,1,-29,0,-39,-31,-11,-4,-10,-35,14,-2,-8,-4,-13,20,-19, -13,-37,-27,-24,4,-10,-52,-6,-6,-42,-6,-19,-12,-10,-6,7,-12,-21,6,-18,31,2,8,-85,-25,0,1,-6,-6,-14,-36,4, 8,-9,-35,-17,-17,-14,-3,-7,1,-35,-17,-20,-37,-11,-45,3,-2,-55,-8,-26,5,8,-13,-38,-16,-37,-3,-17,-7,-5,-30,-39, 
  /* [63][1][][] */ -7,-91,-51,39,-16,7,-46,1,-17,-41,-37,-79,-79,-8,16,-12,-13,-81,-10,-20,-29,-6,-18,13,-54,-3,-13,6,-8,-6,-38,16, -11,8,3,-55,-10,-12,-42,-37,2,-58,-4,-59,-23,8,-84,-7,-5,-66,-7,-8,-16,-7,-20,-68,-17,-24,-5,-8,-12,-4,-67,42, 1,-49,-41,-19,-6,-1,-52,20,-14,-28,11,-23,-25,-16,13,6,-9,-71,-9,-2,-31,-12,-11,9,-46,22,-8,-1,-3,-1,-40,-6, 
  /* [63][2][][] */ -8,-2,-7,-73,-15,-10,-27,-26,4,-46,14,-7,-32,-13,-9,-14,0,12,1,-43,-5,3,-6,-38,-28,-21,7,-16,-1,1,-36,-28, 5,-27,-24,-15,-2,-11,-3,-36,-16,-39,-127,-37,-57,-6,-14,-13,2,12,6,-27,-72,-3,-9,-14,6,-26,-1,-3,6,-11,-39,45, 0,-11,-6,-9,6,6,-18,34,3,-19,-55,-39,-48,-10,77,7,-14,-72,6,-35,-48,0,-3,-32,-27,-9,1,-10,3,6,12,-9, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 64,3,3,32 } };
const TfArray<64, float> quant6_scale = { 64, { 0.0071683158166706562, 0.007639594841748476, 0.0070318873040378094, 0.0068718334659934044, 0.0074211391620337963, 0.0073200524784624577, 0.0056851054541766644, 0.0073422733694314957, 0.0070081045851111412, 0.0076650036498904228, 0.0071695065125823021, 0.0015761490212753415, 0.0071197845973074436, 0.0075095160864293575, 0.0023875217884778976, 0.0068775434046983719, 0.0075421449728310108, 0.0063206036575138569, 0.0071710674092173576, 0.0060854093171656132, 0.0068405629135668278, 0.0066338260658085346, 0.006128399632871151, 0.0078073986805975437, 0.0036050907801836729, 0.0074672969058156013, 0.0072390022687613964, 0.0029232166707515717, 0.0040105856023728848, 0.0018732025055214763, 0.0072433282621204853, 0.0033976419363170862, 0.001651517697609961, 0.0036879510153084993, 0.0074297776445746422, 0.0074703698046505451, 0.0074519496411085129, 0.0075078248046338558, 0.0076463297009468079, 0.0074013397097587585, 0.0011626272462308407, 0.0065974360331892967, 0.002848929725587368, 0.0074391728267073631, 0.0068209380842745304, 0.0011675177374854684, 0.0076272427104413509, 0.0070611410774290562, 0.0078314123675227165, 0.0026804055087268353, 0.0071943607181310654, 0.0073288059793412685, 0.007524705957621336, 0.0072154966183006763, 0.0063504017889499664, 0.007627987302839756, 0.0040827728807926178, 0.0066703399643301964, 0.0072661293670535088, 0.0077116969041526318, 0.0063427123241126537, 0.0071327900514006615, 0.0061346166767179966, 0.0065987440757453442, } };
const TfArray<64, int> quant6_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[32] = { -1859, 396, 11, 937, -2461, -1725, -1662, 2085, -3117, -3433, -158, 3036, 528, -1282, -729, -2832, -2067, -2934, -2081, -286, -2122, -944, -1254, -1253, -2083, 834, -3384, -859, -3280, -2691, 1542, 1001, };
const TfArray<1, int> tensor_dimension7 = { 1, { 32 } };
const TfArray<32, float> quant7_scale = { 32, { 2.7345286071067676e-05, 0.00013288627087604254, 0.00015026063192635775, 0.00013683967699762434, 8.8792643509805202e-05, 4.6157299948390573e-05, 0.00014765093510504812, 0.00013025218504481018, 4.6662746171932667e-05, 0.00014367727271746844, 0.00013150005543138832, 0.00014325816300697625, 0.00014739185280632228, 3.2791551348054782e-05, 0.0001400013716192916, 3.1011986720841378e-05, 4.6543987991753966e-05, 0.00013555548503063619, 3.8635407690890133e-05, 0.0001441666972823441, 0.00014519097749143839, 3.3445492590544745e-05, 8.3589628047775477e-05, 0.00013630124158225954, 0.00012788065942004323, 0.00014499030658043921, 6.6150256316177547e-05, 3.6573772376868874e-05, 4.8196510761044919e-05, 0.00010058042244054377, 0.00014753927825950086, 0.00012799841351807117, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[32*3*3*16] = { 
  /* [0][0][][] */ 0,44,-39,-30,-28,18,-16,-107,2,-48,-84,48,47,-88,-28,46, -65,35,39,-34,-85,-88,41,-61,-32,-107,-93,-73,2,-73,38,-61, -98,-78,12,-68,-90,-10,-103,36,39,-62,-86,-79,38,12,-57,-28, 
  /* [0][1][][] */ -126,19,-62,-71,-50,11,-46,-109,1,36,45,-8,-59,36,12,-7, -57,-87,24,-48,16,-41,-100,-75,-85,23,30,3,-27,-89,-55,0, -105,51,-5,-98,-82,35,17,23,-79,-51,-1,37,-48,-25,47,-18, 
  /* [0][2][][] */ 42,-72,-29,-36,-24,-77,40,8,-2,-87,-49,14,-33,9,-72,29, -88,-52,-9,-107,-120,-13,-117,25,33,-27,-22,-32,-127,20,-101,23, -72,-11,37,-12,-80,-64,36,-1,-100,-72,-68,9,13,-28,-41,41, 
  /* [1][0][][] */ -97,-105,-43,-13,20,-109,-33,20,-61,-48,-16,13,33,-9,-49,-1, -8,14,43,-70,32,-72,-41,1,-7,-51,-10,4,-54,-64,-9,-40, -60,-104,-106,46,-10,-16,2,-63,-72,-70,-86,-1,-25,70,-15,-110, 
  /* [1][1][][] */ -49,-25,13,23,6,19,71,33,11,20,32,-7,74,39,-16,51, 39,20,-28,-118,-30,-41,-1,-34,-10,-2,10,-16,-89,-119,19,-60, 22,-33,-47,-32,-127,56,72,-67,-48,0,-49,2,-61,36,46,-68, 
  /* [1][2][][] */ -29,48,33,87,-26,-14,48,26,16,48,17,-12,0,32,-17,57, 56,29,-27,6,63,2,-11,-14,-2,-65,-42,-15,-61,-19,17,-44, 4,75,-70,-75,-42,42,36,-56,-70,-115,-90,13,-58,-78,7,-61, 
  /* [2][0][][] */ -39,26,55,-8,18,-42,3,36,77,21,13,-6,66,-45,-32,109, 68,-60,-43,-28,-52,-3,40,-64,-46,-30,-35,-12,-76,-15,44,-63, -49,-88,3,-3,21,16,-50,-1,-86,-3,-12,-13,37,24,-38,-50, 
  /* [2][1][][] */ -35,-2,27,17,-10,41,31,-35,-14,50,-1,7,19,0,-30,59, 56,-98,-78,-109,-55,-127,47,-101,-31,-58,-103,-10,-91,-54,24,-29, -50,-62,-9,21,43,5,-20,-7,-78,-3,-30,-19,16,-1,-52,-84, 
  /* [2][2][][] */ -58,18,-21,-19,-8,113,-24,-37,-43,-1,-11,9,-23,6,-8,32, 59,-62,-57,4,23,27,41,-33,-46,-68,-61,2,-34,-18,23,-55, -96,-7,-12,-2,-65,3,-116,-12,-2,-8,-18,15,-54,-62,-84,-13, 
  /* [3][0][][] */ -49,-66,-21,-11,12,-96,-46,-53,-65,-59,-93,14,5,-32,-49,-69, -5,-50,-36,-48,-105,-60,12,-76,-72,-64,-90,0,27,-59,-16,-77, -10,-44,-8,-8,-70,-26,-7,-58,-64,-56,-71,-6,-30,3,-4,5, 
  /* [3][1][][] */ 26,-114,-43,65,7,61,-26,-80,-88,29,-69,-10,-101,-24,-22,27, 50,-127,78,-27,-45,44,37,-112,-28,39,-93,8,-6,-48,39,-85, 22,-78,5,-82,-18,23,33,-72,-73,-9,-51,15,-39,-58,12,34, 
  /* [3][2][][] */ -81,-57,-59,-119,-45,76,-109,18,-89,-87,-35,19,-3,-68,-73,73, -16,-35,-74,51,60,105,-30,-31,-73,9,-15,-10,-20,44,21,-85, -51,-95,-54,22,54,121,-115,35,-29,-71,-3,-11,6,-1,16,31, 
  /* [4][0][][] */ -61,-77,-17,-24,11,-30,-58,-59,-83,-78,-43,31,-8,-22,-45,-29, 16,-56,-12,-48,-37,12,-37,-23,-55,-44,-74,-5,-9,-67,13,-13, -26,-60,-99,-66,-38,-77,-17,-77,-86,-98,-62,-16,-53,-101,-28,-90, 
  /* [4][1][][] */ -55,41,10,-8,-23,-49,-123,-7,-46,-5,-53,15,-17,-20,-103,-9, 46,62,23,-60,-76,19,-38,-29,-8,-51,-28,9,-18,-124,-30,-19, 3,77,-58,-52,-86,1,9,-76,-15,-88,-66,11,-104,-127,44,-69, 
  /* [4][2][][] */ -63,-38,-6,-58,-30,7,-113,-23,-15,-46,-49,5,-68,-43,-90,-81, 45,-71,-12,-4,-57,18,-36,-46,-42,-72,-16,18,-53,-73,24,-46, 14,-6,-16,-1,-25,11,-23,-66,-37,-60,-3,-19,-48,-83,-15,-5, 
  /* [5][0][][] */ -19,-10,-19,-39,-53,19,-9,-19,-31,-34,-36,9,-15,-19,-46,12, 7,-19,-67,-57,-52,35,36,-10,-18,-68,-77,27,-53,5,18,-86, 13,-13,-10,-21,-28,82,-2,2,-40,-3,-24,-3,-51,-24,-19,6, 
  /* [5][1][][] */ 43,-29,4,-69,-24,24,-57,-10,-76,-94,-94,38,-50,-28,-59,-23, 0,-127,-59,-55,-7,24,-71,-28,-52,-31,-50,49,-106,-7,7,-38, -58,-90,-12,-18,36,64,-70,-29,-96,-64,-43,21,-7,-62,-44,-20, 
  /* [5][2][][] */ -51,-18,-78,5,-119,-38,25,-35,-71,-68,12,-33,-62,-49,-46,-32, -80,-75,-71,-54,-92,-2,-2,10,-28,-70,-3,-29,-68,-86,-13,-85, -65,-64,-71,-78,-8,23,-6,-7,-40,-28,-5,8,-38,-74,-18,-27, 
  /* [6][0][][] */ 60,2,-20,-118,-40,12,13,-36,-42,-41,-90,5,-46,-64,20,-33, 22,3,-25,-9,-47,16,32,-53,-42,-41,-59,8,-94,-5,44,-40, 36,-38,26,-50,-40,4,11,-43,-1,-34,-24,0,-33,-31,17,-47, 
  /* [6][1][][] */ -15,-10,-31,15,2,-11,-66,-7,-35,-49,-39,13,5,-5,-9,-20, -19,-51,-3,-127,-3,-55,5,-1,-47,-8,25,2,-1,-86,-47,43, -24,-94,-89,45,-57,15,-10,-53,-38,22,-30,12,-26,30,7,-30, 
  /* [6][2][][] */ -31,-43,-43,43,49,79,14,-5,17,22,19,13,32,2,46,-87, -9,14,29,-29,-2,28,-57,31,4,-20,31,-5,44,-89,-22,48, -41,17,-88,-26,-39,8,35,-32,-34,-30,-59,-3,-51,16,5,28, 
  /* [7][0][][] */ -24,-81,3,-18,-58,22,-68,-4,-33,-3,2,-1,-23,-28,-82,34, 21,-33,3,-113,-112,65,-25,-75,-53,-27,-33,10,-11,-65,-5,-14, 23,-34,-87,-6,-63,12,7,-10,-44,26,-23,5,-42,-7,-13,-89, 
  /* [7][1][][] */ 11,-68,46,-29,-80,-7,-23,-65,-31,46,-24,-2,-12,-38,5,-14, 39,-114,81,-57,4,-3,49,-26,-58,-64,-47,-14,-8,7,14,-39, 6,-115,-81,36,-5,-64,45,22,-6,64,35,-2,23,48,7,-108, 
  /* [7][2][][] */ 13,-102,-21,-9,-38,-118,-40,-56,-72,68,-116,-9,-68,-34,2,-4, 35,-92,45,-59,38,-127,17,-14,-118,-82,-53,7,21,-19,34,30, 12,-75,-49,-13,11,-112,52,11,28,42,7,-4,43,15,-13,-40, 
  /* [8][0][][] */ 68,67,-73,-9,-74,3,-35,-14,-93,-37,-49,27,-2,-101,-83,17, -7,43,-45,-36,-4,49,-104,-53,-26,-39,-88,-40,-85,-58,-32,-94, 19,73,13,-54,-72,-51,-65,-43,-17,-12,-9,-37,-66,-32,-41,-80, 
  /* [8][1][][] */ 0,-13,-58,-64,-37,24,-7,-22,-3,9,-49,-60,45,-44,-71,-2, -77,-52,-31,-92,-4,59,-81,-43,-10,-65,-34,-34,-48,-6,-48,-14, -46,-60,4,-100,-57,57,4,-51,-76,-65,-26,7,-89,-69,-16,-30, 
  /* [8][2][][] */ -122,-63,-53,-96,-96,-23,24,-42,-66,-90,-38,-30,-68,-48,-76,-42, -72,-13,-58,-106,-27,-44,-106,-75,-72,-18,-30,-57,-66,-77,-53,-32, -61,-35,-96,-79,-93,6,-90,-26,-77,-70,-116,12,-98,-127,-126,-77, 
  /* [9][0][][] */ -81,33,53,8,37,-12,27,29,25,10,-3,-3,51,-7,-79,50, -80,-102,-10,4,27,4,-127,-12,-5,-83,12,-5,19,36,-61,-82, -111,-76,-20,0,79,-42,-83,29,-36,-42,18,6,55,26,-105,40, 
  /* [9][1][][] */ 30,47,45,3,-28,61,24,-13,50,28,-15,-9,-4,-39,-31,17, -13,9,24,6,-20,-13,-35,-15,-28,-12,23,7,-26,17,-10,-24, -31,-12,-43,46,28,23,5,18,31,35,-1,15,-1,32,-55,0, 
  /* [9][2][][] */ 14,11,-34,-29,-70,29,40,-68,6,19,-36,-15,-71,-45,10,-86, -32,61,-22,10,-74,39,7,-32,-18,-18,6,-21,-21,18,9,-23, 35,-26,-53,-23,-61,53,38,-28,58,19,-11,-14,-58,-33,39,20, 
  /* [10][0][][] */ -88,56,-37,-32,13,-126,-96,-2,-9,-13,-6,17,-32,14,-100,-30, -4,1,48,66,26,75,39,40,32,41,-25,-4,43,96,-46,-44, -47,74,-3,3,1,-14,-115,1,94,-1,3,1,7,-77,-59,44, 
  /* [10][1][][] */ -99,-80,-3,17,-16,-36,-84,-23,-61,-36,-29,1,-36,-10,-66,-127, -14,-3,-14,21,-8,-25,71,-14,-19,25,-11,3,4,90,-1,-47, 5,-21,-12,-54,11,-16,18,-30,37,24,-5,10,1,-42,-12,-32, 
  /* [10][2][][] */ -63,47,63,-27,15,22,-77,-9,-19,-11,28,-11,-15,-21,-86,-71, 48,-21,-31,0,36,20,-5,-5,-35,-17,-17,-5,14,62,-23,-52, -26,-50,28,-14,41,5,24,7,-29,11,1,-9,-7,-60,-12,-4, 
  /* [11][0][][] */ -58,-92,-67,-48,-76,26,-9,-63,-127,-45,-32,-15,-77,-44,-41,-86, 39,64,27,-45,2,65,39,-32,34,24,19,-14,-11,30,22,41, 44,-100,-90,-21,-20,99,101,-48,-27,7,-8,-1,-74,5,38,-87, 
  /* [11][1][][] */ -45,-48,-56,-74,-81,-48,-65,-23,-30,-79,-71,5,-83,-94,-66,-12, 8,35,4,-43,-11,15,20,-6,18,-35,20,7,11,-29,29,44, 44,-54,-21,-14,-109,-15,19,-44,-49,17,-17,-11,-33,-10,6,-65, 
  /* [11][2][][] */ -42,-57,-104,-105,-80,-43,-84,-120,-41,-102,-113,14,-77,-89,-61,-89, 12,75,-26,-94,8,-47,-8,-44,-63,-10,-84,14,48,-10,15,0, 60,38,-13,-78,-58,-68,28,-59,-65,22,-122,-7,-104,-41,16,-58, 
  /* [12][0][][] */ -16,-5,-81,-104,-127,2,-2,-109,-109,-118,-108,5,-122,-102,22,5, -48,3,78,5,63,-49,48,-19,-55,-1,18,-13,26,45,-28,-14, 48,-48,-46,38,-3,46,42,6,16,24,37,8,11,-2,34,-3, 
  /* [12][1][][] */ 18,-9,-84,-60,-36,5,19,-65,11,-25,-68,-3,-33,-53,31,-60, -20,-12,68,16,47,66,11,7,-32,-22,45,-6,9,5,-75,40, 95,-35,-86,-25,-72,41,-20,-33,-2,58,-13,-10,-76,-79,41,-21, 
  /* [12][2][][] */ -17,-82,-52,-49,-3,-69,7,-40,-28,-55,-38,5,-39,-50,-19,-26, -31,19,64,10,73,-4,19,14,-34,-22,0,1,42,50,-15,33, 34,-101,-78,-15,20,-84,-25,-26,-66,-58,-8,-16,-12,-12,-8,31, 
  /* [13][0][][] */ -77,-36,40,26,-80,33,19,20,42,-91,-27,-52,-85,-81,39,-42, -20,-58,34,33,-53,-23,-23,38,-100,5,-46,-29,-5,-56,4,-64, -49,67,37,-18,-13,20,17,-72,24,-9,-68,45,13,-71,-26,44, 
  /* [13][1][][] */ -90,-27,-60,0,-33,8,-39,-21,-5,16,-32,8,-38,-38,57,-36, -111,-47,13,-79,-48,-15,-111,-6,-14,10,18,-27,4,-44,-93,22, -113,-33,-35,25,51,-2,14,25,31,-58,-62,-48,-59,39,-88,-30, 
  /* [13][2][][] */ -23,-20,34,41,26,53,-71,-34,-8,-57,43,-29,-20,8,-26,-33, -31,17,-73,-83,-17,-3,-109,-79,-16,-35,57,-32,-53,-9,-47,-23, -127,-71,-37,-34,-5,4,19,-59,28,-31,-8,48,3,-59,-48,-30, 
  /* [14][0][][] */ -74,6,-71,-43,-97,93,-58,-123,-25,-33,-108,9,-67,-71,-58,-66, -41,-7,80,-55,-62,50,-7,-45,18,-29,-25,-2,-21,-58,-2,16, -90,-39,-48,33,15,56,17,-9,-39,18,29,-10,41,64,-29,-70, 
  /* [14][1][][] */ -12,24,-119,-102,-80,53,29,-57,-55,-54,-80,-7,-112,-80,-2,41, -10,76,84,-14,-28,25,-15,-46,-22,54,-19,-8,-9,23,48,-57, -69,-56,-56,33,35,69,49,19,-1,-20,14,-4,40,47,0,-19, 
  /* [14][2][][] */ -87,48,-19,-83,-60,-3,27,10,-56,-99,12,5,-44,-76,-49,90, -50,-34,50,-41,26,-15,-11,14,-118,-71,26,-4,-39,0,1,-127, -76,-16,-36,22,30,-27,-1,61,-15,35,35,-4,34,32,-85,-44, 
  /* [15][0][][] */ 20,-7,16,-78,-65,-54,6,-87,-55,13,56,-71,-83,-66,-91,-29, 4,40,-27,-47,-60,12,-10,37,-70,-99,4,-67,1,-45,12,67, 24,-8,-88,-65,-76,-6,-54,41,-77,-53,-22,24,-99,-75,10,31, 
  /* [15][1][][] */ 24,27,11,-8,17,-71,-52,35,7,-12,26,-32,27,-25,-76,-60, 29,-106,-25,23,-67,-68,-43,-3,-15,15,-117,56,-39,-2,-127,-28, -56,20,19,-93,32,30,-49,-49,-57,-84,-23,-8,-95,-6,-69,-52, 
  /* [15][2][][] */ 52,-19,-104,-11,-105,-99,-52,10,-14,8,30,-36,-103,-102,79,-93, -3,-4,10,-77,-93,5,-92,-55,17,-5,-66,54,-58,14,-53,-93, 56,36,-14,-8,22,-20,17,-32,36,47,-85,-10,-66,19,-52,-72, 
  /* [16][0][][] */ -76,-78,-63,-50,-27,33,-57,-46,-77,-69,-14,15,-33,-77,-36,-59, -124,-42,-73,-65,-82,-14,-93,-25,-86,-75,-30,-18,-104,-117,-75,-64, -60,-16,-97,-43,-74,29,-87,-88,-52,-49,-74,22,-18,-89,-127,-40, 
  /* [16][1][][] */ 57,37,-43,-41,-55,-31,-56,-18,18,-21,46,66,-49,-43,-34,-21, -45,10,-25,-63,-45,-11,-67,-7,39,41,-18,-10,4,-32,-37,27, 44,-35,-49,-1,-79,-50,-26,-19,2,-15,29,46,-78,-21,-30,-18, 
  /* [16][2][][] */ -19,-41,25,-22,-3,25,3,-39,-37,-30,13,-3,-27,-20,-35,-5, -50,-30,-12,-69,-6,-67,-66,-16,-44,0,-28,-39,-41,-7,-20,-65, 11,12,-25,-33,-43,-31,15,-61,-42,-55,-52,12,10,6,-53,26, 
  /* [17][0][][] */ -16,-10,-98,33,-34,-39,2,-38,-4,50,-3,-13,-2,18,-23,-81, 31,53,49,26,-2,82,-126,29,67,35,-1,-11,63,-44,-48,32, 31,18,44,-18,13,21,-90,26,15,0,40,4,-6,-60,-39,24, 
  /* [17][1][][] */ 37,31,-72,11,-84,-28,23,-59,-18,40,-59,2,24,-9,22,-99, 56,22,36,-39,-30,43,13,-14,42,-6,-17,-9,6,-21,4,12, 25,37,78,-30,33,80,-26,-20,-12,4,7,12,-28,-19,66,16, 
  /* [17][2][][] */ -33,-39,-75,7,-54,-127,-21,-55,-44,-21,-67,3,12,52,-10,-66, -64,5,-71,31,-21,-55,-26,1,-16,-71,-42,-21,-49,-18,-4,3, -43,40,56,66,51,19,-22,20,43,0,79,12,5,-2,-47,12, 
  /* [18][0][][] */ -3,5,22,-70,-29,-33,-9,-49,14,-25,-46,-67,-17,-58,11,-47, -9,-60,-22,-78,-34,22,-26,23,-6,-29,-15,-8,-10,-16,-46,30, -10,-21,15,-15,-49,-38,21,20,31,-20,7,19,-14,-18,-14,-14, 
  /* [18][1][][] */ -20,-15,-77,-63,-22,36,6,-26,11,-2,-75,-18,-89,18,-39,-26, -57,-60,-12,11,45,-35,-71,-32,-20,-92,-8,-44,-89,-79,-2,-55, 40,-50,-56,-38,-48,6,4,-6,-41,-30,-5,41,2,-69,-20,-73, 
  /* [18][2][][] */ -77,-67,-63,-110,25,-17,0,-58,-23,-60,-32,-8,-45,21,44,-49, -48,-29,43,-46,-41,-12,-7,-9,-30,-54,-127,-40,-47,45,31,-49, -51,37,38,-29,-85,-13,4,16,-27,-83,-56,-57,-2,5,-11,-72, 
  /* [19][0][][] */ -2,7,-16,-41,-15,-31,45,-65,-98,-80,-26,-6,-37,-44,18,9, -10,-42,-87,-62,-31,-31,-2,-34,-98,-127,-95,-4,-38,-81,-4,-59, 26,-25,-38,-93,-46,26,23,-55,-112,-47,-87,1,-84,-87,-22,-28, 
  /* [19][1][][] */ -32,-16,109,33,38,-11,-7,20,-53,28,38,-5,40,80,57,-25, -106,-26,-23,61,-14,46,-38,23,63,18,13,2,-5,25,-50,-35, -12,41,39,-29,-25,10,-102,2,-17,-10,21,3,18,-32,-23,72, 
  /* [19][2][][] */ -104,5,56,7,6,-1,-64,44,-16,20,30,7,44,61,-70,40, -42,-14,-76,-11,-14,-101,-109,-25,37,5,3,1,-69,-38,-71,-63, 32,15,17,-50,13,-22,-51,5,-4,-3,-9,4,40,-23,48,2, 
  /* [20][0][][] */ -25,-26,-69,27,4,-123,-55,1,-15,-9,-13,-9,-13,13,-48,-28, -102,-28,27,54,51,108,76,38,58,19,12,-11,80,47,-59,29, 6,-17,-32,-102,-68,26,106,-7,14,-125,-22,10,-61,-43,24,69, 
  /* [20][1][][] */ -4,4,0,1,-10,18,-67,-19,-16,-13,22,9,-64,-14,8,16, -58,3,-13,60,36,66,16,36,66,40,18,-5,46,52,-36,-29, -49,26,21,-73,-41,-32,-59,32,12,-21,48,1,-76,-110,-34,31, 
  /* [20][2][][] */ 30,-49,-110,-127,-105,-43,36,-108,-118,-61,-64,-4,-99,-58,5,16, -45,-14,10,-11,-52,48,-23,-41,1,-16,-25,6,-77,-17,-67,-3, -67,-8,-79,-19,5,-67,-56,-47,-11,-21,-34,15,-64,-1,-60,-20, 
  /* [21][0][][] */ -104,-47,-25,47,-80,37,-69,-12,-26,38,-59,44,-45,-59,-81,0, -127,-16,31,-29,-57,-12,10,34,-4,-17,-23,63,-76,-105,37,-33, -29,-34,26,-90,-109,23,-29,17,37,-24,-79,-55,-100,-82,-89,-33, 
  /* [21][1][][] */ -22,-34,54,26,-14,11,32,-75,-28,-70,-48,-29,-9,28,19,-32, -122,-12,-84,25,-6,-41,10,-26,-75,-39,16,8,-6,-27,-7,-13, 2,3,4,-83,28,50,11,27,-37,-124,-68,20,2,2,25,-120, 
  /* [21][2][][] */ -47,-48,38,-64,-100,-3,25,27,5,16,43,-21,-88,-109,28,-43, -11,-68,-1,-52,-1,-40,-17,-25,-80,-30,-67,43,-93,-35,-104,24, -74,7,-12,48,8,-13,-50,19,37,-65,-40,66,-26,-97,-43,33, 
  /* [22][0][][] */ -112,-37,-2,-28,-39,5,-87,-12,-19,-44,-49,-33,-117,-44,-85,-83, -85,-11,-28,-57,-13,-30,-127,-49,-32,57,-55,-11,14,-62,-92,-50, -74,-8,-14,-52,-78,-48,-65,-8,-35,18,-52,12,-46,-52,-60,-42, 
  /* [22][1][][] */ 53,-29,-2,-39,10,30,15,-48,-49,-97,-72,-25,-65,-52,-80,19, 0,-18,-109,-66,5,72,-21,-80,-26,-26,-72,-21,20,-25,-28,-55, 16,28,-52,14,-39,22,24,-52,-57,-54,-15,10,-80,-25,-29,-69, 
  /* [22][2][][] */ -54,-10,-97,-53,0,-107,-32,-99,-30,18,-9,17,-48,-34,56,-75, -55,110,-10,-82,25,-8,-123,-36,-79,-21,76,12,11,-29,-46,-18, -71,88,24,-78,-39,-40,-91,-74,-23,3,7,18,19,-13,-31,24, 
  /* [23][0][][] */ -90,30,-2,50,-10,89,-90,-20,105,-3,5,6,16,-1,-118,-70, 39,85,70,-42,-59,-13,-29,25,43,3,63,18,-49,-123,-15,4, -67,-102,-121,27,-33,25,12,-70,-62,-109,-33,6,-80,11,-54,-77, 
  /* [23][1][][] */ -25,-16,41,28,-3,-15,20,13,59,2,13,-2,12,18,-17,-7, 50,-16,11,-55,-31,5,14,-15,-2,-7,-15,-12,-79,-35,40,-3, -34,-51,-71,-21,-27,-92,28,-54,-42,-30,-6,18,-58,13,36,-53, 
  /* [23][2][][] */ -23,110,-34,-11,12,-82,14,20,-38,-1,10,-10,18,20,-40,21, 57,14,-69,-68,62,-127,34,10,8,-38,-29,-14,-70,6,27,24, -40,-85,-32,-5,56,-71,-55,44,-123,-45,-21,-14,32,47,-16,-102, 
  /* [24][0][][] */ -109,-109,-23,16,11,62,47,-14,-29,-17,-8,0,65,57,-27,-35, -8,-40,110,-34,-2,20,28,2,-39,-2,23,8,-56,-99,29,-59, -107,-12,5,-1,16,19,35,-40,-16,-46,-35,21,20,15,-73,-40, 
  /* [24][1][][] */ -1,-52,33,51,-12,-42,79,-14,-10,7,-37,3,36,61,18,1, 65,11,83,-27,-52,22,37,-23,5,53,-9,10,-78,-108,21,-92, 7,-39,-30,-11,1,-58,21,-73,-100,-42,7,-2,-15,2,2,-127, 
  /* [24][2][][] */ -4,9,-75,2,-61,-71,42,-16,2,-12,-22,7,14,26,17,-29, 23,-17,19,-20,-18,51,25,-34,42,44,-3,22,-48,-43,38,-26, -17,-116,46,19,-6,52,-18,-55,10,-23,27,-8,-52,-14,-21,-72, 
  /* [25][0][][] */ -1,-56,-34,-9,-60,50,36,-13,-55,-64,-17,-1,-73,-19,-15,-54, -1,-29,37,-61,-30,54,-57,-42,-20,-66,-32,7,-15,-47,24,32, -31,-29,-107,22,25,44,61,31,-23,25,24,2,40,24,14,-53, 
  /* [25][1][][] */ 13,-106,-71,-1,-73,23,35,-113,-26,-44,-98,2,-33,-15,8,-112, 31,-127,84,-95,38,-50,-6,-35,-76,-83,-46,8,-36,-21,20,-75, -56,-125,-32,12,33,-78,61,33,-33,5,20,12,37,16,-30,18, 
  /* [25][2][][] */ -8,-62,-89,-24,-23,-124,-27,-59,-92,-79,-91,0,-43,-22,0,-48, 46,-35,86,-47,38,-106,7,21,-110,-84,-55,-9,0,-5,-2,-27, -18,-40,-17,-3,-15,-96,40,-5,-11,27,-28,-4,19,-32,-42,60, 
  /* [26][0][][] */ 17,-11,-34,-38,-28,-6,-40,-59,-13,2,-5,20,-81,-49,11,-10, -5,-17,-26,-3,5,29,38,-56,-47,-33,-67,-18,-93,-63,5,-92, 8,-76,-28,-29,-27,-49,58,-59,-69,-51,-46,24,26,25,-16,-7, 
  /* [26][1][][] */ -66,-36,-52,-56,-69,-31,-50,-19,-17,-89,-4,16,-53,-27,-37,-77, -81,-40,-38,-27,-18,-23,-46,-43,19,-19,-10,-29,-113,-31,-12,-107, -48,-67,-12,-62,-35,-40,-53,8,14,-11,-10,30,-42,-82,-43,-28, 
  /* [26][2][][] */ -106,-39,-55,-88,-19,10,-75,-7,-71,-5,-103,-19,-38,-30,-92,-35, -69,-7,-69,0,-13,-36,-109,-77,-75,-82,-72,-25,9,11,-124,-53, 20,-32,17,-81,-26,-32,54,-48,-64,19,-26,3,26,-127,2,28, 
  /* [27][0][][] */ 19,66,7,-61,-21,-42,11,-67,-53,-70,-78,-15,-46,38,-95,-12, -35,-29,32,-54,-40,26,-46,-57,10,-60,-36,-26,-16,-79,-78,-16, 5,-46,-67,24,-13,33,-22,31,-43,-79,25,-40,-15,-54,-46,36, 
  /* [27][1][][] */ -98,-22,25,3,-10,-78,6,-34,-49,-24,14,-13,-75,9,41,-15, -99,-32,-27,-27,2,20,-20,30,-30,-16,-53,32,-9,-28,-74,-80, -1,30,-59,-46,-10,24,-5,23,-25,15,12,-55,17,-25,-66,30, 
  /* [27][2][][] */ -39,-77,-51,-123,-3,-41,16,-82,20,-8,-127,-15,-96,-6,-2,28, -40,-62,-49,-37,-23,-33,-44,22,-35,-10,1,-11,-31,-38,54,-1, -40,-11,15,-30,-18,48,-46,-53,14,-38,-73,32,-55,32,-15,-49, 
  /* [28][0][][] */ -45,-93,-81,-80,-58,-106,-13,-11,-95,-83,-43,-18,-77,16,-56,-83, 50,-15,-93,-7,-46,-10,2,-76,-30,-42,-84,-37,-92,-14,19,-64, 39,25,10,-89,-75,24,20,-26,24,-12,-36,13,-16,-56,41,-30, 
  /* [28][1][][] */ -22,52,-15,10,-60,-77,-89,-71,-41,-56,-27,7,-14,-44,-83,-50, -51,-38,-27,-48,-36,-59,-35,-31,-80,-73,-108,-62,-45,-89,-7,-43, -63,-95,-57,-112,-56,-85,4,-73,-56,-44,-23,-60,-22,-67,-16,-110, 
  /* [28][2][][] */ -12,55,-62,8,11,-28,-40,-47,-67,11,-20,5,-101,-89,7,-79, -42,26,-26,2,-21,-118,-45,-18,-76,-52,-65,-45,-33,-33,-71,-45, -50,-14,10,-4,-9,-127,-38,-30,-30,-86,-50,-53,6,23,-1,-9, 
  /* [29][0][][] */ -52,-55,-17,-54,-26,20,-39,-18,-43,-48,-17,-22,-18,-51,-52,-127, -47,-74,2,-21,-31,-6,-33,-25,-17,-16,-31,-24,-18,-21,-14,-24, -51,-34,-10,-18,7,29,1,-47,-19,-39,-2,4,-33,-26,-1,-40, 
  /* [29][1][][] */ 13,-59,-42,-38,-50,-47,-27,-73,-11,-21,-13,-3,-47,-42,11,-17, -17,-86,19,-37,-84,-22,-5,-61,-23,-3,-69,1,-62,-55,-15,-32, -2,-45,-10,-15,26,-18,-45,-66,-28,3,-43,8,-65,-2,-17,-44, 
  /* [29][2][][] */ 8,11,-57,-46,-10,-54,-40,-33,-3,-97,-36,10,-17,-39,-24,-37, 1,25,-25,-69,9,-59,-15,-38,-17,-53,-5,14,19,-49,-27,-14, -15,-5,-43,-14,-6,0,-1,-50,-26,-57,-23,-1,-45,-22,1,6, 
  /* [30][0][][] */ -34,-70,-44,-40,-38,-32,-19,-51,-78,-44,-49,-16,-26,8,-40,-118, -9,54,-3,-115,-114,-127,45,-89,-1,-107,-98,-10,-113,-77,41,64, -96,-61,22,34,19,87,50,27,10,58,5,10,88,65,-126,36, 
  /* [30][1][][] */ 19,-99,-52,-125,-71,-77,-7,-71,-70,-83,-89,10,-114,-107,11,-46, 6,-33,-13,-52,-43,9,75,-76,-90,-68,-67,9,-32,-59,49,-38, 25,-39,57,-28,-78,-40,47,-53,17,39,17,-12,-13,-5,13,-25, 
  /* [30][2][][] */ 17,-39,26,21,72,54,-42,45,-81,21,43,-8,50,-18,-2,39, 11,-47,-39,-25,-29,18,-21,-17,-87,-28,-49,17,63,-79,-19,-41, 34,-91,-40,-100,-72,-42,-29,-73,22,-95,-127,17,-98,-109,20,57, 
  /* [31][0][][] */ -69,52,65,-38,0,-75,-74,-6,21,-67,18,-10,-25,23,-115,5, -118,-80,-48,-48,-7,18,-83,-6,-94,-60,3,14,29,42,-127,-71, -85,-41,4,32,-28,61,-47,21,-15,9,21,7,23,-8,-77,41, 
  /* [31][1][][] */ -29,-21,97,-29,53,14,-12,-12,-54,-87,-16,-5,-2,6,12,-14, -94,10,-84,-28,-22,59,-86,1,-62,-3,6,12,6,6,-62,-91, 7,11,30,-54,-25,105,-65,6,14,13,-6,-11,24,-41,-41,52, 
  /* [31][2][][] */ -21,49,99,10,51,26,-71,-24,32,-74,-1,-9,-34,-20,-94,30, -21,-48,-88,3,2,-18,-85,-2,3,-38,-22,3,-3,4,-51,-100, -74,-6,2,-28,5,25,-114,-1,8,-31,8,11,51,-20,-79,62, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 32,3,3,16 } };
const TfArray<32, float> quant8_scale = { 32, { 0.0013942208606749773, 0.0067753102630376816, 0.007661155890673399, 0.0069768778048455715, 0.0045271622948348522, 0.0023533659987151623, 0.0075280983000993729, 0.0066410098224878311, 0.0023791366256773472, 0.0073254983872175217, 0.0067046335898339748, 0.0073041296564042568, 0.0075148893520236015, 0.0016719029517844319, 0.0071380794979631901, 0.0015811703633517027, 0.0023730816319584846, 0.0069114025682210922, 0.0019698564428836107, 0.0073504522442817688, 0.0074026756919920444, 0.0017052445327863097, 0.0042618825100362301, 0.0069494256749749184, 0.0065200952813029289, 0.0073924441821873188, 0.0033727225381880999, 0.0018647423712536693, 0.0024573367554694414, 0.0051281717605888844, 0.0075224055908620358, 0.0065260995179414749, } };
const TfArray<32, int> quant8_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data9[16] = { 3397, -8393, -1487, -6805, 3510, -2463, 4609, -5073, -12875, -1146, 2763, -6387, 3571, 3642, 810, 663, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 3.4593944292282686e-05, 3.5477482015267015e-05, 3.1861567549640313e-05, 3.5385724913794547e-05, 2.9192409783718176e-05, 3.7789457564940676e-05, 3.1525272788712755e-05, 2.749747181951534e-05, 3.8127065636217594e-05, 3.4205422707600519e-05, 2.7226829843129963e-05, 8.2676006059045903e-06, 3.3491913200123236e-05, 2.9036113119218498e-05, 3.3545180485816672e-05, 3.561643825378269e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data10[16*3*3*8] = { 
  /* [0][0][][] */ 45,15,92,-7,46,42,27,22, 26,-12,-33,50,-46,-2,35,-54, -30,5,21,104,-54,24,21,-31, 
  /* [0][1][][] */ 47,27,81,5,50,-36,-2,-27, 32,-9,-94,-23,-106,-127,-28,-115, -6,10,49,59,-19,-4,30,-76, 
  /* [0][2][][] */ 22,38,0,-23,-27,-55,6,-16, 46,18,-70,13,-60,-46,-101,-36, 16,5,21,-13,-10,-50,27,-34, 
  /* [1][0][][] */ -31,33,45,69,18,-93,57,22, -46,3,55,40,58,127,87,49, -12,38,-7,-92,-22,-35,15,-12, 
  /* [1][1][][] */ 24,49,109,-31,-44,-95,74,-38, 5,30,54,33,-20,62,25,-41, 32,27,0,1,-26,-111,-67,-56, 
  /* [1][2][][] */ -24,73,2,114,23,-31,-44,-58, -11,39,-18,121,43,0,-19,-14, -43,53,-72,99,11,-32,-47,11, 
  /* [2][0][][] */ -17,9,-69,79,-73,5,-88,7, 9,-8,103,-5,111,-11,-12,86, 12,-19,14,-66,9,51,-7,-76, 
  /* [2][1][][] */ 7,58,-25,-23,-78,-21,126,10, -27,70,86,-109,90,-33,59,44, 5,-23,-46,-86,-14,47,-46,-41, 
  /* [2][2][][] */ 54,55,-81,34,-101,-127,1,-89, -36,36,72,30,57,69,85,70, 19,-4,-84,-30,-78,92,-69,-31, 
  /* [3][0][][] */ 45,-20,-73,-49,-24,-28,-127,-49, -9,-25,-88,27,49,17,-119,62, 67,14,-26,42,41,-60,-115,0, 
  /* [3][1][][] */ 11,-35,-1,-56,-56,-28,-37,-55, -98,12,-72,-36,-14,105,53,84, 21,14,15,7,30,9,59,29, 
  /* [3][2][][] */ 68,-9,117,-1,24,-54,50,-90, -80,-16,-19,-37,-103,15,25,2, 1,-7,67,-89,5,-31,36,-36, 
  /* [4][0][][] */ -5,-13,-74,-86,-117,-53,-91,-10, -55,-15,35,-40,49,12,-56,44, -20,33,-54,-42,-21,3,-121,42, 
  /* [4][1][][] */ -34,-54,-57,-45,-74,-21,-23,-32, -94,21,-43,-35,21,-45,-77,53, 18,-4,-98,-52,0,-41,-56,24, 
  /* [4][2][][] */ -64,-33,-18,-50,-85,-32,-85,-62, -127,5,-46,-35,30,83,-90,75, -117,44,-90,-77,31,77,-87,52, 
  /* [5][0][][] */ -3,38,-103,108,-73,26,-69,16, -9,-2,-52,98,67,9,-111,14, 70,19,57,56,28,-62,-115,-18, 
  /* [5][1][][] */ 19,19,-23,-41,-72,25,-16,-46, -79,2,-33,-49,-26,61,62,59, -35,6,-31,29,10,93,51,38, 
  /* [5][2][][] */ -32,-10,-13,-15,-1,-127,-47,-116, -22,-5,-83,-67,-111,-118,-15,-88, -13,-4,-62,-53,-110,-60,43,-75, 
  /* [6][0][][] */ 85,-10,-12,-38,-51,-82,-65,-59, -33,-6,-88,-1,-103,66,-113,6, -127,-34,-61,0,49,84,-95,6, 
  /* [6][1][][] */ 32,-25,42,-94,-77,-97,-68,-107, -4,2,-110,-59,-93,57,-50,-18, -79,16,8,-74,2,0,12,32, 
  /* [6][2][][] */ 62,-11,-35,-26,-124,-96,-126,-103, 29,-13,-68,-19,-78,58,-100,-1, -43,-31,52,-61,-7,-34,-7,-41, 
  /* [7][0][][] */ -56,45,15,-43,-16,-6,-22,53, -90,38,-14,13,15,39,-62,21, -53,10,0,-64,1,-52,-40,-31, 
  /* [7][1][][] */ -122,9,-21,-70,27,-16,27,70, -96,0,-9,8,9,-27,-4,27, -91,-20,-1,-65,3,-127,-81,2, 
  /* [7][2][][] */ -110,-27,10,-8,-43,54,13,65, -75,-18,22,23,31,-3,-3,24, -63,16,11,-6,-9,38,-33,8, 
  /* [8][0][][] */ -13,-12,66,20,49,9,52,40, -87,2,29,-55,67,58,12,53, -73,11,19,-54,42,-16,-45,-10, 
  /* [8][1][][] */ 59,-7,91,-127,26,-32,61,-9, -7,37,11,-116,2,17,18,22, -49,-2,10,-96,24,47,23,0, 
  /* [8][2][][] */ 14,-11,23,-25,-16,8,51,-27, 39,-5,18,-15,-61,-53,56,-17, 12,30,-12,-7,-38,-13,72,-49, 
  /* [9][0][][] */ 35,-6,56,3,-35,35,95,28, -101,6,-12,34,45,113,36,68, 1,4,21,127,44,-8,19,31, 
  /* [9][1][][] */ 51,38,24,-64,-50,-122,-12,-47, -54,11,-13,-16,-40,17,-59,-14, 18,24,63,-43,32,-110,-14,-49, 
  /* [9][2][][] */ 55,14,-9,-3,-15,-70,-62,-55, 3,-1,-25,12,-88,50,-11,10, 51,1,14,-60,26,-51,-6,-43, 
  /* [10][0][][] */ 42,-20,-6,86,43,-56,-39,-25, -91,-13,-82,78,-26,16,-80,9, -44,9,-41,79,-35,54,1,42, 
  /* [10][1][][] */ -45,8,-37,32,-11,73,66,46, -45,-12,11,6,-8,48,57,78, -36,25,-10,20,41,9,-45,0, 
  /* [10][2][][] */ -6,18,-127,87,-32,-75,-15,-17, -51,31,-17,-18,-21,35,-87,6, -20,8,-37,-96,21,-39,-39,-11, 
  /* [11][0][][] */ -125,64,-73,102,40,13,-77,-76, -77,-83,42,17,62,-73,-24,41, -69,-33,-97,41,-111,-106,-105,-51, 
  /* [11][1][][] */ 70,52,28,-102,40,-69,27,-95, -71,17,-78,13,-55,-45,-36,-67, -33,-89,-9,-34,-117,-67,31,-124, 
  /* [11][2][][] */ -66,-87,12,54,30,-45,-100,-66, -13,-26,2,-14,-69,-23,-114,-69, -62,-127,-98,53,-113,-21,43,19, 
  /* [12][0][][] */ -103,-5,-40,1,-14,70,-120,47, -58,-33,-119,-32,36,-11,-127,-4, 104,25,119,-47,83,-85,13,4, 
  /* [12][1][][] */ -78,12,-83,-98,-59,66,-61,28, -9,18,-74,-10,76,-126,-79,-19, 78,-1,67,23,56,-61,-33,-19, 
  /* [12][2][][] */ -17,-5,-118,-76,-107,89,-65,4, -62,14,12,-58,69,-54,-14,-19, 40,-20,40,-118,21,68,37,2, 
  /* [13][0][][] */ -49,-19,22,-43,8,-48,-69,-75, -20,18,-92,20,-20,14,-93,27, -34,8,69,3,87,-10,21,57, 
  /* [13][1][][] */ -23,-12,12,-52,14,-118,-54,-69, -127,4,-92,-61,-40,41,14,57, -35,-34,3,-3,35,-3,31,43, 
  /* [13][2][][] */ -24,-8,1,-89,-77,-117,-8,-111, -53,2,-44,-55,22,9,-24,37, -60,-6,-35,11,11,-34,-8,21, 
  /* [14][0][][] */ 62,-6,73,22,9,-10,46,-57, 5,15,14,127,-20,-51,5,-101, -31,-24,-91,117,-10,30,-35,-68, 
  /* [14][1][][] */ 52,-29,14,-60,-63,10,15,-62, 1,14,-46,29,-6,-3,-7,-2, -86,13,-108,9,2,27,-66,7, 
  /* [14][2][][] */ 30,12,-19,-73,-45,-38,11,-65, -20,-17,-32,-25,-5,-37,46,-17, -55,6,-51,-58,2,35,25,26, 
  /* [15][0][][] */ -60,-19,15,5,40,64,-81,47, 43,-1,44,-11,28,9,-45,-30, 33,-11,-55,6,-91,-79,-99,-95, 
  /* [15][1][][] */ -64,-24,27,71,63,61,25,63, 25,-26,12,-55,38,9,12,11, 21,14,-33,-127,-40,-82,-88,-90, 
  /* [15][2][][] */ -103,38,-5,-62,64,79,62,85, 23,24,66,-74,46,-37,86,6, 12,7,-38,-22,-73,-70,-44,-35, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant10_scale = { 16, { 0.006878312211483717, 0.0070539861917495728, 0.0063350340351462364, 0.0070357420481741428, 0.0058043254539370537, 0.0075136763043701649, 0.0062681687995791435, 0.0054673212580382824, 0.0075808032415807247, 0.0068010627292096615, 0.005413509439677, 0.0016438467428088188, 0.0066591957584023476, 0.0057732490822672844, 0.0066697867587208748, 0.0070816152729094028, } };
const TfArray<16, int> quant10_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data11[8] = { 10768, -9657, -2815, -14054, -4043, -1130, -8844, -8892, };
const TfArray<1, int> tensor_dimension11 = { 1, { 8 } };
const TfArray<8, float> quant11_scale = { 8, { 1.6698642866685987e-05, 1.212707138620317e-05, 1.9445298676146194e-05, 1.9119515854981728e-05, 1.886887002910953e-05, 2.147252598660998e-05, 2.4033561203395948e-05, 1.4940361324988771e-05, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data12[8*3*3*1] = { 
  /* [0][0][][] */ 70, -45, -92, 
  /* [0][1][][] */ 25, -127, -111, 
  /* [0][2][][] */ 66, -49, -103, 
  /* [1][0][][] */ -100, -127, -75, 
  /* [1][1][][] */ 5, -112, 31, 
  /* [1][2][][] */ -99, 90, -29, 
  /* [2][0][][] */ 123, 47, -22, 
  /* [2][1][][] */ 87, -89, -111, 
  /* [2][2][][] */ 104, -18, -127, 
  /* [3][0][][] */ -127, -94, -85, 
  /* [3][1][][] */ -81, 3, -41, 
  /* [3][2][][] */ 110, 66, 118, 
  /* [4][0][][] */ 127, -80, -39, 
  /* [4][1][][] */ 109, -53, 14, 
  /* [4][2][][] */ 69, 63, -66, 
  /* [5][0][][] */ -6, 98, -90, 
  /* [5][1][][] */ -24, 127, 16, 
  /* [5][2][][] */ -96, 62, -1, 
  /* [6][0][][] */ 73, 73, 16, 
  /* [6][1][][] */ 48, -7, -30, 
  /* [6][2][][] */ -45, -104, -127, 
  /* [7][0][][] */ 103, 35, 22, 
  /* [7][1][][] */ 64, 127, 21, 
  /* [7][2][][] */ -38, 88, -54, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0045044934377074242, 0.0032713024411350489, 0.0052454094402492046, 0.0051575289107859135, 0.005089916754513979, 0.0057922583073377609, 0.0064831026829779148, 0.0040301932021975517, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,31,32,1 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0037071078550070524, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,31,32,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0050294231623411179, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0050294231623411179, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant16_scale = { 1, { 0.019613310694694519, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,8,8,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.019613310694694519, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,8,8,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.030648980289697647, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,4,4,32 } };
const TfArray<1, float> quant19_scale = { 1, { 0.030648980289697647, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,4,4,64 } };
const TfArray<1, float> quant20_scale = { 1, { 0.054257087409496307, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,2,2,64 } };
const TfArray<1, float> quant21_scale = { 1, { 0.054257087409496307, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,256 } };
const TfArray<1, float> quant22_scale = { 1, { 0.054257087409496307, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<2, int> tensor_dimension23 = { 2, { 1,6 } };
const TfArray<1, float> quant23_scale = { 1, { 0.44663593173027039, } };
const TfArray<1, int> quant23_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<2, int> tensor_dimension24 = { 2, { 1,6 } };
const TfArray<1, float> quant24_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 13 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 13,12,11 } };
const TfArray<1, int> outputs1 = { 1, { 14 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 14 } };
const TfArray<1, int> outputs2 = { 1, { 15 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 15,10,9 } };
const TfArray<1, int> outputs3 = { 1, { 16 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 16 } };
const TfArray<1, int> outputs4 = { 1, { 17 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 17,8,7 } };
const TfArray<1, int> outputs5 = { 1, { 18 } };
const TfLitePoolParams opdata6 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs6 = { 1, { 18 } };
const TfArray<1, int> outputs6 = { 1, { 19 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 19,6,5 } };
const TfArray<1, int> outputs7 = { 1, { 20 } };
const TfLitePoolParams opdata8 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs8 = { 1, { 20 } };
const TfArray<1, int> outputs8 = { 1, { 21 } };
const TfLiteReshapeParams opdata9 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs9 = { 2, { 21,2 } };
const TfArray<1, int> outputs9 = { 1, { 22 } };
const TfLiteFullyConnectedParams opdata10 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs10 = { 3, { 22,4,3 } };
const TfArray<1, int> outputs10 = { 1, { 23 } };
const TfLiteSoftmaxParams opdata11 = { 1 };
const TfArray<1, int> inputs11 = { 1, { 23 } };
const TfArray<1, int> outputs11 = { 1, { 24 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 992, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7936), (TfLiteIntArray*)&g0::tensor_dimension13, 992, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 7936, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7936), (TfLiteIntArray*)&g0::tensor_dimension15, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4096), (TfLiteIntArray*)&g0::tensor_dimension17, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2176), (TfLiteIntArray*)&g0::tensor_dimension19, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1152), (TfLiteIntArray*)&g0::tensor_dimension20, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 256), (TfLiteIntArray*)&g0::tensor_dimension21, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 256), (TfLiteIntArray*)&g0::tensor_dimension23, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension24, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[12] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[12] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 25, };
const size_t tflNodes_subgraph_index[] = {0, 12, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  24, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_50_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 25;
  for (size_t i = 0; i < 25; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_50_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_50_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_50_invoke() {
  for (size_t i = 0; i < 12; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_50_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
