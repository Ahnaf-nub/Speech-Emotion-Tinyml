/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 05.05.2025 17:52:08

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 21760;
#else
constexpr int kTensorArenaSize = 20736;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,9620 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0098984930664300919, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 148, 65, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 148, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 74, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 1, 74, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data5[2] = { -1, 592, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[8] = { -509, -136, 297, -395, 624, -100, -72, 224, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0001261706929653883, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[8*592] = { 
  3, -7, -6, -7, 23, 1, 13, 11, 8, -27, -1, -64, -22, 1, 2, -9, 4, -4, -6, 5, 35, 0, 22, 12, 28, -29, -6, -99, -40, -3, 12, -9, 5, -1, -2, -22, 38, 3, -23, 10, 7, -45, -18, -82, -23, 0, 9, -11, 1, -2, -7, -73, 28, -3, -58, 15, 2, -30, 9, -31, -10, -14, 15, -12, -1, -8, -4, -33, 9, -1, -25, 5, 32, 30, 71, 48, 34, -25, -4, -11, -13, -2, -4, -32, -18, 0, -22, 3, 20, 12, 58, 40, 52, -31, 5, -18, -11, -3, -5, -20, 0, -11, -2, -11, -7, 9, 20, 12, 31, -31, -17, -9, -9, -5, -7, -28, 3, -1, -7, -2, 9, 12, 6, -6, 5, -44, -2, -3, -5, -6, -10, -31, 14, 0, 8, 0, 10, 4, 2, -2, -14, -43, 3, -14, -6, -5, -37, -43, 12, 1, -2, 2, 3, 6, -4, 10, 3, -16, 6, -31, 10, -5, -21, -10, 6, 0, 9, -1, 18, 21, 1, 7, -8, -14, 25, 14, 23, -10, -6, -4, 18, 10, 15, 1, 32, 17, 8, 5, 10, -18, 20, 5, 17, 5, -2, -9, 4, 14, 17, 4, 26, 17, 21, 27, 2, -33, 17, -27, 18, 11, -2, -6, -1, 19, 3, 10, 27, 21, 24, 22, 8, -7, 11, -28, 15, 12, 3, -9, 1, 15, 0, 6, 24, 13, 18, 8, 18, -14, 11, 3, 11, 10, 1, -8, -4, 3, -1, 11, 11, 4, 13, 9, 10, 0, -3, -22, 5, 4, -8, -7, 4, 15, -4, 10, 13, 12, 25, 13, 10, -6, -4, -18, 14, 20, 5, -27, 5, 22, -10, 23, -8, 1, 20, 17, 9, -6, 4, -12, 2, 14, 14, -31, 1, 13, -13, 9, 4, -1, 9, 6, 13, -23, -7, -11, 9, 8, 11, -51, -3, 36, -17, 7, 1, -11, 14, 9, 17, -6, 2, -33, 8, 23, 23, -32, -8, 23, -31, 11, 3, -21, -1, 10, -16, -16, 5, -39, 13, 27, 5, -44, -3, 35, -33, 16, 0, -19, 6, -2, -9, -2, 4, -27, 14, 10, 19, -39, -33, 17, -27, 0, -2, -29, 0, 11, -8, 5, 14, -9, 9, 4, 18, -6, -23, 10, -11, -1, 9, -38, -16, -6, -28, 14, 9, 3, 20, 0, 4, -16, -37, 15, -21, -14, -3, -44, -10, -10, -30, -3, 4, 8, 11, -9, -2, -29, -22, -1, -7, -15, 4, -27, 7, 1, -19, 6, -7, 11, 8, 1, -6, -23, -8, 2, -11, -1, -1, -12, 8, 9, -14, 10, 1, 3, 9, 3, -6, -11, 10, 15, 1, -3, 1, -18, 8, 8, -11, 22, 6, 14, 14, 6, 6, -12, -4, 20, -1, -1, 5, -7, 17, -4, -15, 12, 9, 3, 9, 11, 2, -16, -5, 9, 0, 9, 0, -14, 1, 19, -4, -6, 16, -17, 18, -5, -4, -16, -10, 19, 1, -1, 4, -1, 10, 2, -5, -20, -5, -19, -9, 0, -9, -28, -5, 13, -4, -4, -9, 0, 19, 5, 14, -14, -12, -23, -6, 5, 2, -12, 11, 2, -9, -3, 4, -6, 9, 15, 8, 0, -10, -15, -1, -6, -2, 4, -3, 6, 3, -6, 6, -3, 0, 4, 6, 4, 5, -4, -17, 5, -7, -4, 11, 1, -22, 5, -11, -6, -2, 4, 9, -15, -9, -24, -10, 8, 0, -1, 8, -14, -5, 3, 5, 0, 3, -2, 25, 10, -1, -7, -8, -2, -9, -7, -5, -4, -5, -3, -8, -1, -10, 3, -6, -2, -7, 9, 
  10, -5, 1, 12, -7, 15, 10, 7, 34, 47, 35, 73, 30, -4, -11, -3, 7, 16, 5, -13, -25, 10, -10, 2, 18, 63, 45, 83, 56, -9, -16, -1, 2, 11, 3, 33, -32, 11, 35, -3, 22, 48, 59, 89, 48, -15, -15, -7, -4, 5, -3, 46, -17, 0, 43, 3, 24, 55, 61, 112, 40, -17, -10, -7, -2, -3, 0, 62, -7, 6, 44, 4, 31, 51, 44, 94, 31, -18, -17, -3, -2, 6, 5, 36, -11, 7, 15, 6, 24, 4, 3, 60, 18, -11, -10, -6, 3, 12, 6, 8, -3, 0, -12, -2, -6, -28, -45, 12, 4, -12, -20, 3, 0, 16, 6, 6, 1, 12, -17, 8, -21, -23, -49, -4, -19, 3, -9, 12, 7, 12, 16, 21, -11, 9, 10, -3, -11, 2, -25, 2, 2, 6, -5, 20, 0, 9, 7, 21, -11, 2, -1, -2, -17, 6, -21, 4, 2, -3, 2, 31, -9, -11, 6, 24, -4, -11, 5, -4, -18, 7, -19, -9, 3, 15, 7, 22, -10, -6, -4, 24, 8, -12, 13, -5, 0, 5, -17, -16, -7, 8, 0, 12, 1, -2, -2, -2, 6, -10, 6, 1, 0, -1, -10, -13, -8, 1, 12, -1, 13, -7, 1, 3, 18, -8, 8, -2, 0, 17, -3, -6, -4, 3, 2, -24, 8, 12, -11, -5, 27, 7, 2, 14, 9, 7, -2, -17, -5, -18, 0, -11, 8, 13, -15, -2, 21, 1, 1, 14, -4, 17, -13, -24, 0, 0, -12, -12, -7, -2, -5, 2, 31, 0, -4, 18, -26, 10, 5, -29, -8, 4, -16, 2, -7, 9, -17, 8, 27, 0, -2, 21, -29, 10, -9, -29, -14, 4, 1, 1, -11, 13, 4, -10, 17, -11, 4, 0, -14, 13, -14, -22, -12, 10, -14, 7, 4, -1, 20, 14, 18, 4, 4, 14, 0, 15, -1, 10, -2, 14, -4, 9, 2, 1, 18, 13, 8, -4, 18, 8, 3, 19, 5, 15, 18, 7, -5, 21, 7, 1, 18, 16, 1, -4, 4, 2, 5, 20, -7, 22, 12, 1, -3, 17, 16, 9, -2, 10, -3, 3, 13, -1, 14, 13, -11, 6, 13, -1, 11, 1, 9, -7, 2, 7, 6, 3, 11, 17, 16, 9, 1, 6, 19, -15, 5, -14, 5, -3, -12, -1, -11, -15, 12, 0, 6, 19, -17, -3, 18, -22, 7, -16, -7, -5, -22, 1, -1, -10, 8, 3, -3, 22, -8, -1, 6, -9, -3, -26, -8, 10, -17, 3, -5, 5, 20, 6, -2, 20, 2, 3, -3, -9, 12, -19, -11, 10, -24, 13, -18, 7, 22, 4, 3, 7, 3, 15, 13, -11, -2, -13, -13, -5, -22, 3, -15, 2, 10, 3, 7, 6, 8, 4, 19, -21, -2, -34, -17, -24, -19, -5, 0, -18, 10, -7, -5, 5, -1, 17, 2, -10, -1, -20, -8, -2, -26, -2, -28, 1, -5, -12, 1, 10, 4, 8, 13, -25, -17, -40, -11, -12, -11, -12, -11, 0, 4, -7, 10, 6, 16, 20, 23, -24, 0, -27, -6, 7, 0, -7, -2, -2, -18, -4, 2, -5, -1, 17, 5, -5, -16, -14, 0, -16, -5, -2, -1, -4, 2, -13, 0, -6, -1, 6, -6, -7, -1, -8, 6, 2, 0, -24, -1, 2, -7, 1, -8, -8, -1, -6, 18, -8, 1, -8, 4, -17, -6, -31, 12, -8, -13, -2, -10, 3, -11, -6, -1, 4, 3, -4, -2, -2, -14, -12, -23, -4, -1, -1, -14, -19, -20, 2, 0, -1, -13, -1, 
  -1, -17, 6, -2, -5, -1, -17, -11, 2, -43, -27, -59, -3, 17, 3, 6, 5, 0, 6, -44, -21, 2, -32, -9, -16, -45, -56, -107, -8, 18, -2, 8, 4, 2, 2, -65, -9, 12, -61, 3, -23, -66, -55, -78, -25, 18, -9, 5, 4, 9, 1, -127, 11, 3, -92, 12, -6, -70, -55, -97, -12, 24, 0, 6, 8, 9, 8, -95, 10, 6, -84, 18, -19, -62, -74, -91, -46, 9, 3, 5, -3, 6, -3, -21, -1, 1, -10, 17, 10, -34, -42, -12, -56, -8, 22, -14, -1, -8, -6, -14, -15, -15, -8, -7, 3, -25, -26, -26, -38, -25, 5, -26, -8, -15, -4, -20, -18, -7, 0, -12, -11, -11, -28, -11, -32, 4, 2, -36, 9, -17, 8, -3, -18, -12, 3, -18, -15, 0, -20, 1, -15, 20, 14, -3, -13, -30, -17, 2, -19, -29, 1, -22, -8, -8, -18, -4, -9, 26, 21, 5, -1, -20, 7, -7, -11, -19, -8, -25, -14, 3, -21, -5, -12, 30, 17, 21, 2, -19, 9, -1, -9, -13, -12, -16, 2, -4, -19, -7, 5, 10, 26, 18, 5, -11, 26, -12, -12, -15, -2, -15, 8, -10, -42, 10, 1, 14, -6, 14, 3, -5, 15, -22, -13, -16, -1, -11, -6, -24, -38, -11, -32, 10, 11, 1, -4, 1, 11, 0, -17, 0, 5, -16, 12, -26, -30, 1, -11, -13, 5, -15, -3, 12, 3, -21, -9, 4, -2, 9, 11, -13, -5, 17, -6, -14, -2, -43, 5, 10, -5, -26, -17, 15, -16, 3, 11, 2, 5, 15, -24, -29, 4, -44, 5, 12, 9, -16, -7, 2, -7, 10, -3, 1, -12, 1, -13, -6, 5, -38, 22, 2, 12, -8, 10, 6, -7, 14, 10, 2, -6, 0, -16, -14, -5, -40, 10, 4, 2, -19, 4, 16, -13, 14, 2, -6, -12, 3, 4, -7, 1, -36, 14, 8, 28, -45, 6, 9, -20, 1, 2, -1, -15, -4, 0, -27, -5, -41, 13, 22, 8, -44, 14, 23, -27, 6, 0, -16, -2, -8, -13, -22, -11, -23, 16, 32, 23, -47, 7, 20, -33, 19, -13, 0, 3, -6, -8, -11, 0, -15, 18, 29, 33, -56, 16, 12, -42, 17, 0, -3, 1, -23, -21, -15, -10, -9, 21, 20, 9, -56, 2, 3, -38, 23, -3, -10, -25, -20, -12, -11, -11, -6, 22, 4, 10, -40, 29, -7, -11, 9, -14, -6, -11, -13, -19, 4, 0, 5, 18, -3, 12, -40, 11, 3, -9, 20, 10, 19, 16, -11, 4, 3, 8, -1, 14, 19, -1, -43, 16, 19, -4, 21, 7, -6, 32, 14, 18, -6, 11, -1, 16, 12, -5, -55, 32, 14, -20, 13, 13, 10, 41, 1, -3, -2, 17, -11, 10, 19, -4, -77, 38, 14, -28, 17, 1, 3, 30, 1, 12, -3, 8, -29, 26, 2, 1, -71, 5, 10, -23, 7, -1, 7, 15, 8, 7, 5, 11, -17, 16, -3, -9, -61, 9, 9, -14, 7, -8, 12, 17, -6, 4, -23, 4, -21, 5, 14, 4, -2, 25, 12, -8, 8, 17, 7, 18, 23, 14, 12, 7, -10, 11, 4, 3, 19, -1, 7, 10, 11, 13, 13, 9, 15, 15, 4, 15, 2, -10, 1, -3, -9, 10, 5, -33, 17, 8, -3, -2, 16, 5, -30, -19, -42, 5, 5, 6, -5, 17, -3, -30, 7, 8, -7, 5, -11, 1, -21, -17, -11, -3, 8, -2, -7, 8, 10, -37, 13, -6, -6, 8, 11, 3, -9, -31, -5, 
  16, 11, 4, -27, -9, 10, -38, 16, -20, -23, -22, -42, 7, 10, 0, 1, 8, 0, -1, -61, -14, -5, -41, -5, -21, -20, -28, -51, -3, -9, -12, 2, -1, -3, 0, -94, -7, 2, -78, -9, -43, -33, -41, -67, -7, -3, -17, -7, -2, -4, -5, -76, -10, -5, -38, 0, -23, -37, -56, -59, -24, 2, -6, -3, 3, -3, 3, -69, 4, 2, -37, 4, -21, -39, -55, -56, -18, -3, -14, 0, -5, 3, 1, -52, 7, 0, -21, 7, -2, 11, 6, -48, -6, 3, 9, -5, 5, 5, 4, -39, 30, 3, -20, 1, -20, 13, 26, -24, 8, -2, -4, 2, 1, 4, -6, -47, 18, 10, -30, 11, -14, 7, 35, -18, 9, 3, 1, 8, -3, 19, -15, -77, 14, 25, -54, 12, -21, 1, 29, -12, 5, -48, -21, -9, -19, 21, -34, -83, 19, 22, -50, 17, -19, -4, 11, -6, 2, -54, -40, -61, -22, 18, -23, -75, 10, 20, -53, 5, -32, 0, 5, -14, -9, -30, -40, -65, -16, 15, -7, -48, 11, 14, -42, 3, -27, -14, -5, -25, -12, 2, -24, 1, -1, 16, 2, -54, 12, 7, -26, 10, -22, -22, 1, -15, -8, 15, -17, 19, 6, 1, 29, -24, 1, -9, -18, -4, -18, -15, -13, -3, -12, 19, 15, 31, 15, -2, 17, -12, -27, -13, -10, -9, 14, -25, -6, 19, -2, 18, 2, 25, 5, -20, 17, -16, -30, -24, 1, -24, 3, -18, -9, 20, 2, 18, 6, 39, 16, -19, 13, -11, -31, -23, -13, -27, 8, -11, -1, 17, 10, 17, 0, 24, 17, -27, 15, -1, -45, -27, 2, -22, -1, -1, 5, 11, -5, -1, 10, 23, -5, -17, 3, 7, -29, 0, -2, -9, 6, -1, 5, 2, 12, -1, -7, 15, 0, -9, -20, 2, -8, 7, -5, 7, 8, 20, 9, 8, 17, -8, -4, -28, -26, 2, -39, -5, 13, 5, 2, 14, 11, 6, 21, 0, 5, -2, 5, -27, -13, 1, -40, 10, 24, 9, 5, 14, 13, 20, 30, 10, 15, 3, 0, -15, -31, -1, -45, 3, 21, 15, 8, 23, 4, 20, 39, -6, 25, 7, 4, 9, -10, -3, -34, -3, 36, 21, 9, 17, -1, 17, 28, -15, 3, 11, 6, 18, -15, 6, -38, -17, 48, 3, 7, 20, -3, 15, 17, -31, 15, -4, 9, -8, -6, -14, -26, -28, 37, 4, 7, 9, -4, 21, 14, -12, 4, -8, 11, -37, 11, 13, 0, -46, 10, -8, -12, 25, 18, 18, 5, -7, 3, -19, 10, -59, 21, 5, 1, -55, 12, 1, -8, 9, 14, 7, 7, 7, -7, -13, 12, -33, 27, -6, 9, -46, 1, -2, -20, 4, 10, -8, -6, -1, -10, -12, 13, -21, 23, -11, 22, -35, -6, -20, -24, -5, -1, 3, -29, -7, -22, -1, -2, -9, 12, -12, 13, -31, -6, -9, -6, -7, 1, 2, -42, -6, -37, 1, 4, -10, 4, -2, 7, 8, -9, -6, 7, -11, 8, 4, -29, -4, -15, 9, -4, 7, 6, 3, 1, -6, -7, -5, -6, -1, -1, -5, -5, -1, -9, -5, 3, -1, 3, 8, -4, -2, -3, 7, 10, 7, 4, -5, -3, 2, 5, 6, 6, -6, 22, 2, 3, 20, -16, 6, 23, 0, 6, -1, -3, 8, -6, 1, 20, 14, 8, -17, 0, -7, -4, -6, 24, 5, 17, 3, -2, 9, -6, 6, 15, -8, 18, 1, -7, -6, 1, 5, 20, 9, -3, -6, 0, -3, 1, 8, 17, 10, 
  -13, -25, -28, -20, -22, -42, -3, -37, -5, -39, -24, -50, -17, -16, 17, -12, -12, -44, -18, 16, 0, -36, 17, -44, 26, -52, -40, -70, -51, -5, 1, -9, -9, -23, -1, -11, 4, -15, -5, -25, 33, -37, -38, -69, -15, 30, -2, -7, 3, -3, 4, -68, 8, -9, -46, 1, 31, -53, -21, -89, -6, 35, 18, 5, 9, -7, 5, -63, 13, 0, -64, 3, 3, -25, -5, -51, 7, 24, 14, 16, 8, 4, 7, -17, 5, -6, -6, 3, 21, 10, 27, 19, 21, 21, 34, 4, 5, -6, 11, 32, 2, -12, 38, -8, 25, 43, 15, 26, 22, 8, 17, 3, 9, -3, 11, 27, 1, 0, 36, 2, 20, 32, -7, 28, 40, 20, 7, 7, 9, -7, 20, 52, -2, -9, 40, -12, 3, 5, -18, 19, 18, 33, 9, 20, 10, -20, 12, 52, -14, -15, 25, -14, -9, 21, -24, 23, 1, 23, 16, 43, -17, -18, 5, 59, -11, -43, 34, -22, -3, 17, -35, -6, 9, 27, 17, 44, -29, -41, -37, 60, -8, -71, 37, -26, -10, 21, -25, 1, 11, 11, 11, 40, -50, -52, -71, 58, 11, -59, 24, -24, -7, 11, -20, -7, 10, 20, -8, 44, -60, -54, -43, 46, 17, -50, 37, -27, -17, 25, -14, -19, 30, 18, -1, 24, -57, -36, -43, 40, 15, -58, 26, -27, -6, 5, -16, -6, 21, 20, 1, 35, -33, -39, -14, 38, 10, -68, 12, -36, -8, 14, -17, -17, 19, 27, 5, 27, -11, -24, -3, 13, 0, -61, 7, -30, -1, 4, -16, 10, 5, 23, -4, 28, -4, -31, 0, 21, -8, -37, 9, -39, -17, 5, 3, 8, 14, 19, -3, 32, -19, -32, 10, 12, -29, -33, 6, -25, 5, 6, -1, 6, 22, 6, -13, 12, -25, -28, -4, 19, -22, -23, 1, -35, -17, -9, -11, 17, 8, 8, -6, 0, -30, -33, -22, 10, -11, -49, 17, -62, 2, -11, -4, 6, 23, 7, -7, -9, -33, -39, -33, 23, -27, -37, 7, -48, -13, 2, -12, 10, 4, -5, 0, -9, -26, -17, -31, 16, -8, -17, -2, -14, 11, -1, 12, 14, 22, -10, -6, -24, -35, -32, -50, 24, -27, -13, 4, -22, 15, 16, 9, 16, 10, -13, -10, -18, -48, -35, -56, 15, -24, -37, 5, -31, 11, 2, -10, 9, 12, -34, -16, -30, -39, -51, -71, 9, -20, -53, 16, -37, -6, 30, 13, 16, 29, -28, -19, -56, -42, -49, -68, 9, -42, -33, 25, -31, 6, 16, 27, 24, 33, -21, -20, -50, -59, -36, -69, 20, -24, -44, 13, -54, 2, 27, 22, 28, 19, -34, -12, -54, -52, -35, -65, 21, -26, -32, 0, -23, 5, 17, 16, 30, 34, -46, -12, -52, -55, -50, -55, 7, -11, -33, 11, -55, 1, 3, 11, 30, 41, -22, -31, -42, -30, -27, -29, 0, -22, -37, -3, -40, 10, -2, 26, 7, 21, -10, -23, -21, -20, -10, -26, 0, -4, -15, -6, -14, -8, 4, 0, 12, 36, -10, -19, -5, -8, 3, 1, 0, -8, -9, -5, -11, 7, 2, 3, 9, 17, 1, -13, -2, -2, -1, -5, 3, 6, -9, 3, -14, 3, -8, 12, -8, -11, 0, -5, -7, 5, -1, 2, 6, 13, -7, 5, -15, 7, -9, -15, -17, -7, 3, 9, 2, 12, -5, -4, 11, 20, -18, 15, 4, -4, -5, -24, -11, 5, 21, 13, 2, 4, -6, -12, -5, -8, -7, 33, -2, -1, -11, -30, -3, -4, -4, 18, 12, 
  1, -3, -23, -9, 0, 13, -1, 15, 8, 22, 29, -7, 3, -13, 12, -28, -14, -13, -33, -4, 1, 5, 11, -8, 18, 18, 15, -1, 10, -8, -1, -32, -8, 1, -28, -5, -2, -20, 16, -7, -1, 13, 17, 18, 9, -23, 5, -54, -5, -22, -26, 8, 12, -20, -1, -12, -1, 21, 13, 5, 8, 0, -1, -47, 4, -12, -29, -6, 4, -20, -4, -10, 2, 23, 37, 17, -2, 3, -5, -33, -5, -16, -14, 1, 5, -8, -3, -15, 19, 5, 32, -1, 10, 10, 11, -22, 4, -18, -5, -5, -2, -2, 0, 6, -11, -4, 1, -1, 8, -6, 8, -29, -1, 5, -4, -1, 22, -7, -16, -5, 12, 7, 16, 3, -14, 7, -5, -8, 10, -8, -7, -23, 10, 13, 5, -6, 10, 13, 15, -14, 2, 9, -7, 6, 5, -1, -12, 3, 16, 9, 6, 15, 8, 9, 6, 3, 10, -6, 10, -9, 3, 8, 11, 5, 16, 5, 6, -10, 5, -4, 6, 2, 3, 9, -12, 1, -1, 6, -7, 14, 14, -8, 0, -4, 7, 2, 1, 17, 6, 15, 2, -11, 18, -4, 4, 3, 5, 9, -8, 4, 15, -7, 32, 2, -8, 6, 8, 1, -5, 1, -7, 2, 12, 15, 6, 9, -2, 1, 37, -6, 5, 1, -13, -24, -9, 6, -8, 8, -8, 15, -11, 7, -9, 6, 15, 16, 9, -4, -9, -13, -5, 1, -1, 4, 14, 1, 9, 9, -3, 15, 28, -3, -5, -3, -12, -16, 6, -3, -1, -20, 5, 1, -11, -5, -1, 12, 2, -4, -3, -19, 6, -11, 12, 0, 4, -27, 16, 11, -7, 11, -14, -13, 10, -3, 2, 2, -4, -11, 8, 5, -9, -8, 21, 10, -12, 17, 2, 13, 3, -26, 10, 1, -2, -6, -11, 11, 13, -25, 18, 2, -2, 5, 15, -6, 8, -23, 0, 11, -2, -2, -11, -4, 13, -19, -4, -10, 11, 17, 7, -1, 5, 2, 2, 9, -7, 0, 15, 12, 10, -3, 16, 5, 12, 5, -12, 10, 4, -21, -1, 6, 10, -9, -9, 6, -5, 0, -8, -15, -10, 13, 3, -4, -8, -9, 6, 0, 4, 2, 9, -15, 12, -7, -15, -2, 13, -6, 0, -8, 3, -22, -2, -3, -13, 3, -17, 43, 29, 55, -6, 22, -18, 21, 5, 20, 33, 11, 22, 39, -14, 16, -22, 38, 15, 35, -63, 25, -17, -3, 36, -14, 51, 45, 2, -45, -8, 31, -36, 29, 22, 36, -58, -21, -14, -22, 17, -3, -26, -24, -26, -61, -12, 50, -20, 34, 6, 58, -52, -11, -30, -23, -3, -13, -12, -27, -7, -55, -27, 39, -33, 30, 22, 49, -60, -8, -30, -6, -6, -22, -24, -28, -21, -63, -19, 19, -32, 22, 24, 56, -48, -20, -17, -12, 14, -24, -16, -11, 3, -75, -13, 18, -26, 22, 1, 61, -58, -21, -20, -14, 15, 6, -33, -4, -26, -64, -4, 32, -27, 12, -3, 55, -63, -19, -17, -16, 11, -8, -21, -16, -21, -69, -8, 31, -14, -38, -24, -14, -39, -53, -10, -20, -27, -16, -35, -37, -32, -62, -1, 22, -22, 24, -16, 0, -33, -31, -21, -12, 3, 2, -18, -44, -2, -82, -11, -38, -28, 23, 21, 51, -47, -25, -28, -24, 15, -6, -5, -10, -6, -58, -3, 18, -17, 21, 13, 30, -54, -25, -29, -8, 5, -3, -8, -18, 0, -68, -6, 30, -12, -31, -7, -13, -38, -34, -12, -12, -14, -3, -18, -41, -14, -62, -22, 11, 
  4, -5, 3, 24, -4, 13, 11, 2, -5, 5, -9, -10, -11, 6, -9, 0, 7, 6, 5, 12, -3, 8, 2, 7, -5, -8, -7, -43, 10, 3, 4, 4, 2, 6, 3, -5, -1, 14, -20, 3, -6, 3, 5, -38, 5, -3, -14, -1, -3, 7, -4, -1, 12, 2, -24, 11, -8, -12, 2, -11, -14, -3, -4, -2, 4, 0, 2, -55, 7, 4, -20, 8, -7, -2, 11, -57, -13, 1, -12, 0, -5, 7, 0, -50, -2, 5, -48, 11, -21, -65, -63, -67, -18, -19, 5, -10, -4, 3, -2, -22, -16, -4, -20, -7, -4, -30, 12, 6, -13, -34, 1, -16, -7, -1, -5, -28, -13, 7, -31, -2, 14, -10, 20, 31, 11, -26, -10, -20, 2, -3, 1, -20, -19, 11, -23, -2, -5, -13, 11, 21, -2, -22, -4, -12, -1, 13, -10, -29, 4, 20, -43, 9, -10, -20, 11, 6, 4, -36, -11, -22, -2, 21, 4, -29, 16, 31, -41, 14, -21, -11, 18, -1, 2, -71, -27, -55, -4, 47, -2, -36, 20, 47, -40, 23, -25, -8, 16, -3, 15, -61, -47, -82, -7, 46, 6, -41, 14, 39, -37, 20, -22, -15, 35, 7, 23, -25, -31, -36, -17, 39, -11, -19, 27, 40, -30, 18, -48, -2, 30, -5, 28, -6, -33, -3, -23, 33, -27, 1, 23, 31, -17, 20, -35, -8, 27, -10, 24, -7, -31, 6, -26, 24, -19, 6, 15, 17, 4, 19, -17, -8, 4, -2, 4, 9, -5, 9, -25, -2, -15, 19, -12, 2, 4, -2, -9, -1, -19, -5, -18, -2, -8, 5, -23, -20, -12, 26, 1, -15, 12, -1, -15, -15, 2, 13, -10, 3, -13, 5, -21, -16, -14, 2, -14, 1, 7, -22, -4, 0, 1, -8, 11, 5, -11, 18, -22, -17, -21, 16, -25, 4, -3, -17, -9, -2, -4, 7, 9, 5, -6, -11, -33, -15, -20, 18, -17, 0, 11, -22, -5, -5, 6, 0, 17, -9, -6, -8, -35, -23, -34, 5, -23, -13, -3, -26, -7, 4, 4, 10, 0, -17, -7, -13, -35, -37, -38, 8, -25, -29, 4, -19, 2, -4, -12, 5, 13, -17, 0, -39, -28, -13, -10, 3, -14, -15, -1, -18, -8, 1, -33, 0, 0, -12, -13, -24, -18, -20, -1, -12, -26, -21, -10, -24, -31, -25, -35, -5, 5, -10, -8, -2, 1, -5, -1, -15, -10, 1, -11, -19, -24, -12, -21, 8, 12, -6, -18, -6, -11, 6, 6, -15, -8, -10, -5, -11, -22, -12, -29, 7, 29, -6, -9, -1, -11, -1, -4, -8, -6, 5, -3, -4, -23, -24, -11, 2, 0, 8, -25, 0, 2, 14, 1, -7, 9, 9, -6, 10, -24, -10, -5, -8, 5, -10, -10, -3, 4, -1, 11, 8, -4, 8, 5, 8, -14, -3, -12, 1, 21, 30, 0, 15, 12, 5, 4, -6, 4, 17, -2, 9, -6, 2, 8, -15, -5, 16, 6, 17, 16, 9, 1, 8, 14, 18, 5, 11, -6, 2, 24, -9, -4, 17, 10, 26, -2, 5, 2, -6, 3, -3, 3, -1, 3, -1, 2, 4, 2, 4, 4, 2, 4, 4, -5, 0, -4, 5, 7, 14, 12, -6, 6, 1, 4, 7, 10, -8, 15, 7, -6, -19, 6, 28, 4, 13, 0, -8, 32, -5, -5, 4, 28, 8, 7, -4, -7, -22, 2, 14, 19, 16, 18, -2, 40, 21, 13, 7, 33, -15, 9, 5, -7, -7, 4, 12, 5, 15, 14, 14, 25, 24, 19, -12, 27, -22, 
  3, 24, -11, 9, 4, 24, 8, 32, -17, 32, 6, 29, -11, -20, -8, -17, 0, 4, 0, 15, 2, 2, 21, 5, 1, 47, 25, 47, 14, -17, -9, -5, -2, 6, 0, 63, -11, 8, 47, 0, -5, 51, 0, 38, 28, -12, -8, -8, -8, 5, -4, 68, -19, 1, 72, 3, -18, 26, -36, 2, 14, 3, -4, -1, -4, 4, 1, 82, -10, 3, 64, -1, -14, 32, -22, -3, -4, 11, -18, 7, -7, 4, 7, 66, -5, 5, 33, 5, -16, 6, -66, -60, -29, 25, 8, 8, -2, 6, 10, 23, 1, 0, 6, -4, -28, -34, -76, -49, -44, 14, 0, 15, 3, 5, 3, 34, -4, -5, 25, -2, 11, 5, -30, -20, -43, 30, 15, 19, 6, -18, 5, 45, 1, -22, 27, -26, 27, 6, 9, 11, -9, 18, 17, 18, 3, -24, -3, 18, -16, -21, 24, -24, 27, 2, -4, 21, -25, 35, 15, 12, 13, -24, 15, 9, -24, -13, 12, -22, 32, -4, -11, 17, -20, 23, 21, 5, 17, -8, 25, 26, -35, -10, 4, -28, 31, -6, -28, 11, -16, 10, 19, -4, 9, -18, 12, 15, -43, -14, 6, -29, 24, -13, -29, 8, -33, 2, 7, -22, 17, -8, 7, 6, -30, -16, 5, -24, 19, -12, -25, 1, -25, 5, -6, -29, 1, -2, 4, 7, -17, -2, 1, -30, 24, -20, -31, 6, -21, -12, -5, -22, 9, 5, 4, -12, -24, 9, -1, -21, 11, -16, -29, -2, -21, -26, -9, -33, 2, 16, 6, -11, -17, -4, -12, -8, 14, -6, -12, -4, -23, -4, -18, -31, 10, 6, -4, -12, 6, -6, -3, -1, 6, 1, -21, -14, -21, 2, -2, -5, 11, 8, 8, 0, 4, -2, -1, 12, 7, -5, -41, -10, -33, 5, -2, 2, 20, 0, 14, 7, 11, -11, 1, 5, -9, -18, -52, -25, -45, 25, 9, 4, 18, -23, 8, 2, 23, -23, 13, -16, -4, -14, -38, -37, -51, 24, 23, 19, 17, -1, 17, 7, 29, -21, 5, -4, -7, -12, -34, -16, -44, 26, 11, 33, 26, -9, 13, 15, 3, -27, 2, -20, 1, -6, -33, -26, -19, 11, 25, 21, 24, -25, 23, 13, 6, -19, 8, -30, 17, -3, -45, -18, -25, 19, 16, 27, 22, -10, 6, -4, -7, -21, 7, -10, -3, -16, -35, -20, -6, -1, 7, 13, 3, -20, -12, 4, 4, -33, 18, -5, -12, 7, -24, -4, -4, 21, 10, -2, 0, -21, -20, 5, 7, -16, 30, -16, -7, 19, -31, -12, -17, 7, 7, 0, -13, -19, -19, 19, 22, -24, 23, -4, -6, 13, -28, -27, -7, 12, 10, 7, -14, -11, -5, 20, 11, -17, 22, -12, -6, 14, -41, -36, -32, 13, 0, -4, -2, -17, -10, 20, 23, -12, 15, -9, -20, 6, -43, -18, -30, 17, 9, 14, -15, 3, -25, 20, 0, -15, 29, 0, -14, 13, -48, -33, -16, 12, 4, -12, -22, -21, -31, 33, -5, -34, 26, -27, -9, 12, -58, -23, -15, 7, 2, -10, -8, 5, 2, 5, 5, -9, 13, -10, 6, 12, -4, 6, -6, 7, -3, -4, 4, -1, -2, 7, -15, -5, 9, -14, 11, 7, -7, 2, 0, 4, 1, -7, 0, -20, -13, 13, -6, -10, 18, -23, -5, 3, -76, -11, -20, -3, 3, -17, 6, -23, -3, -2, -11, -11, 17, 2, 0, -5, -60, -13, -6, -13, -8, -24, 14, 5, -7, -5, -3, 9, 0, 12, -1, 4, -4, 5, 9, -12, -11, -26, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 8,592 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0063724205829203129, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -4822, -1330, -1348, 4376, -171, -2769, 2204, -3355, -2414, 728, 17, 2744, 1961, 548, -4724, 1077, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.0746963097481057e-05, 7.3020717536564916e-05, 7.9064469900913537e-05, 7.1831738750915974e-05, 9.1288937255740166e-05, 5.4262633057078347e-05, 5.7071585615631193e-05, 6.380699051078409e-05, 4.8047470045275986e-05, 3.917106005246751e-05, 5.8244251704309136e-05, 5.5557800806127489e-05, 6.4850188209675252e-05, 5.6350352679146454e-05, 4.3841497245011851e-05, 6.0453319747466594e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ -5,-14,127,62,-38,3,-35,17, -12,-9,31,19,-61,13,-3,-79, -3,-2,85,43,-52,7,-14,-2, 
  /* [1][0][][] */ -71,82,-11,30,6,-10,50,34, -78,-4,-19,13,56,93,103,64, -8,37,8,-16,48,4,127,68, 
  /* [2][0][][] */ -21,28,-3,12,12,-33,60,15, 0,13,62,22,34,-52,71,57, -34,47,63,0,37,-31,127,42, 
  /* [3][0][][] */ 94,-83,-29,-6,65,-32,15,34, 65,-102,-58,53,33,-44,66,51, 46,-79,-52,-2,57,-34,127,54, 
  /* [4][0][][] */ 11,-21,-20,-12,-54,40,-26,-8, 11,-20,-13,-18,-12,91,-29,-9, 36,1,24,-15,-26,127,-44,6, 
  /* [5][0][][] */ -119,57,-18,67,10,-3,-39,87, -127,44,-35,4,82,103,-40,-15, -118,104,-15,48,-5,62,-3,49, 
  /* [6][0][][] */ 126,-102,-21,62,-85,-20,-46,-26, 106,-124,-21,-25,-28,-15,-49,13, 65,-127,-67,78,-30,-16,-65,-61, 
  /* [7][0][][] */ -31,51,-23,-20,-58,127,2,-11, -11,46,4,48,9,108,-13,22, -20,19,-33,4,25,96,23,-10, 
  /* [8][0][][] */ 21,-63,54,127,9,-42,98,54, -15,-72,-23,86,49,-36,-52,75, -13,-58,49,69,63,-8,51,-11, 
  /* [9][0][][] */ 112,-103,-60,102,-65,127,9,19, 49,-121,-112,-50,-12,124,-77,15, 84,-122,-103,103,-36,110,-46,63, 
  /* [10][0][][] */ -88,-11,-49,79,28,62,47,-4, -124,-7,-68,40,0,28,-11,50, -95,10,-63,77,-29,127,30,64, 
  /* [11][0][][] */ -41,3,-47,127,47,-27,-89,-31, -26,-11,-32,40,74,-71,-4,26, -17,-12,-58,107,-23,-77,-6,24, 
  /* [12][0][][] */ -38,2,-120,89,-33,5,10,-22, 6,-13,-127,-7,-49,70,-60,23, 26,16,-72,37,27,-13,-53,41, 
  /* [13][0][][] */ 67,-33,-9,-50,-79,-32,-113,-28, 91,-23,-42,-40,-34,-73,-84,-28, 38,-23,127,-46,43,-61,-88,39, 
  /* [14][0][][] */ 97,-41,68,-9,-33,11,-54,-67, 65,-33,71,34,-43,-13,5,-89, 127,-50,-20,110,15,-35,-39,-52, 
  /* [15][0][][] */ 91,37,14,-127,45,-76,36,79, 35,10,73,-120,10,-82,76,27, 0,-22,54,-116,-19,-56,92,28, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0037581205833703279, 0.0054076272062957287, 0.0058552036061882973, 0.0053195762448012829, 0.0067604999057948589, 0.004018477164208889, 0.0042264973744750023, 0.004725294653326273, 0.0035582068376243114, 0.0029008546844124794, 0.0043133404105901718, 0.0041143922135233879, 0.0048025501891970634, 0.0041730855591595173, 0.0032467290293425322, 0.0044769351370632648, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[8] = { 4515, -2029, 4219, -10004, 6285, -6472, 29862, 5646, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 3.0083052479312755e-05, 2.8027749067405239e-05, 2.3301592591451481e-05, 1.9906503439415246e-05, 2.009546005865559e-05, 3.1839954317547381e-05, 2.0975929146516137e-05, 1.7365169696859084e-05, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[8*1*3*65] = { 
  /* [0][0][][] */ 23,101,28,17,-65,-27,-9,-42,-52,-25,5,-45,36,-41,-42,14,-8,-22,-18,-55,23,9,38,36,30,5,14,-36,9,-53,-59,14,2,-26,27,-15,1,-25,21,30,4,14,-42,28,-33,-31,38,10,-23,-21,35,41,-47,39,27,41,47,14,-15,24,-55,24,6,-10,-30, 1,110,21,45,-39,-49,3,-55,-56,-18,6,32,15,-32,20,34,-3,39,-35,50,-33,-19,18,-7,49,-12,-22,36,-40,-35,-16,-45,-29,33,-26,22,-33,-6,11,4,-44,-50,8,-21,-35,-47,-53,-14,-40,-23,-19,-20,42,29,32,-28,-19,-2,34,52,-11,-45,-2,33,-55, 47,127,21,-2,0,-54,-8,-27,34,-57,38,6,-11,38,21,52,-7,29,29,19,29,48,-12,-34,-29,13,54,-20,45,28,-19,-10,-44,26,13,-3,36,-6,46,14,38,28,-4,-16,23,7,-31,-50,4,-30,-37,4,-30,12,33,-11,-16,33,16,-55,30,-40,-35,-23,27, 
  /* [1][0][][] */ -61,-118,-43,-8,-43,46,-19,50,-2,-9,-21,-42,35,-47,44,12,-46,-17,57,57,13,-50,-9,-7,-8,-47,-61,-30,-14,29,30,-27,2,36,28,52,-8,-13,14,-21,57,8,-25,32,17,69,57,66,28,2,6,3,37,-31,-34,51,19,-20,-9,-1,42,66,-6,4,-33, -20,-69,-61,-58,55,-14,18,-8,50,-6,-16,-40,-14,-14,-66,40,-37,4,-32,-49,27,16,-26,-70,-8,-58,20,38,-28,5,34,18,55,55,-5,-5,36,-29,29,39,64,-15,60,0,-19,41,-7,31,-33,-9,52,47,8,-27,35,8,52,-24,48,45,-37,37,-6,8,41, -10,-127,17,-77,-18,-11,-12,11,27,-32,-60,15,34,-15,25,38,-48,-10,6,-4,-19,-72,-14,-71,-40,-39,-55,13,-38,-33,6,25,8,7,54,57,-28,16,52,56,41,-25,24,38,71,59,-17,54,-5,7,42,57,39,-32,-8,9,-6,39,-22,-26,-5,57,-25,7,-12, 
  /* [2][0][][] */ 103,101,-98,-71,-99,-95,-12,-3,-65,-10,0,-80,-8,-86,-57,24,27,-44,42,26,63,1,14,13,27,-29,-33,-41,13,-47,-30,35,-39,41,77,-16,51,-35,-14,-23,27,14,17,-12,23,20,29,-30,53,-38,63,-46,-25,28,83,51,-30,-1,62,66,25,65,-10,13,-10, 127,6,-47,-112,-103,-79,-1,-104,-21,-47,-70,-98,-12,-90,-62,8,-66,-49,-12,40,-14,67,76,41,-36,-41,-3,31,37,25,44,-40,-42,60,-51,42,38,-42,-1,45,-52,9,-32,17,45,30,-22,-5,-61,40,-40,3,63,-25,-28,31,57,-24,-6,-15,40,-13,12,62,42, 49,24,-15,-10,-47,4,11,5,-41,-66,-23,-74,-76,27,-32,-11,4,-21,-22,-28,65,24,-5,15,38,7,55,-28,-22,69,-4,28,42,19,71,31,-40,62,36,41,-14,40,14,-20,40,8,50,40,58,-33,5,-8,52,42,-9,1,20,-31,52,47,-35,32,75,71,43, 
  /* [3][0][][] */ -101,-76,-59,22,94,-6,109,48,80,-72,-16,-57,-14,29,41,18,95,48,53,33,58,74,76,100,60,77,72,-57,59,26,26,26,31,8,5,7,-53,-23,-82,40,-70,-45,-15,-58,15,5,49,-60,44,17,-63,-36,-43,-63,40,-62,50,37,-14,14,33,13,-15,56,-6, -106,-15,-98,123,9,103,127,76,13,-47,-48,-11,-49,77,-3,84,30,91,-34,59,66,32,17,-34,49,86,-46,-70,8,-77,0,-2,-19,-50,30,-92,-4,-72,5,-50,-20,47,4,46,-71,47,-57,-19,-32,-76,-29,-10,-86,-82,-37,27,-88,-33,19,29,-58,-61,5,-35,-19, -65,-45,-120,105,97,52,115,83,-24,-43,-74,36,41,59,50,-4,32,-23,-45,84,85,67,-43,6,-11,84,1,-55,-59,-38,-57,32,-78,-4,-4,13,18,-38,-44,-59,-64,-28,-65,52,33,26,-69,-84,-9,33,-55,-63,-35,15,46,2,39,-35,-1,31,-25,24,-68,27,7, 
  /* [4][0][][] */ 25,-51,40,127,-22,42,35,99,-2,14,-47,72,53,69,-1,88,-38,-28,-35,-35,-22,-42,-49,13,-56,-2,-5,40,56,-14,-42,35,-42,-13,59,-40,-5,97,-17,49,73,29,82,-18,-31,8,84,-30,17,-14,-1,53,-9,71,-35,-3,-35,21,42,-27,-15,60,74,66,-21, -5,-33,-35,0,88,-74,92,-66,-65,77,45,-48,21,-87,-13,64,-77,-64,13,-44,-17,59,34,-11,-45,-35,80,66,76,-80,18,-59,-53,11,-5,8,-17,-7,-55,-20,-76,-63,-31,-31,54,50,-92,66,38,-71,67,88,89,-17,-73,-13,-9,-58,20,-38,52,54,-79,-84,0, -96,-104,-27,-75,-79,-43,-73,41,30,-100,51,-77,53,24,-49,63,-20,24,-47,-75,-99,-51,-52,-38,72,74,-88,-78,-64,-4,-21,4,-71,-109,29,-56,43,9,46,-47,-84,-2,-14,-62,72,-88,-12,-83,-40,-28,49,25,-29,-91,68,15,10,-61,-106,46,-44,-50,27,-46,11, 
  /* [5][0][][] */ -38,-73,-21,5,47,12,2,2,-4,35,-1,65,40,55,13,31,-10,38,16,45,-28,-22,15,-53,-17,-46,4,23,-19,62,-23,53,22,-2,35,13,0,-12,46,-6,-33,-45,17,21,20,-21,-36,-29,-31,-27,-37,-36,-8,24,-28,-13,-16,-20,34,32,23,-30,17,21,-36, -17,-117,16,-4,34,-25,16,-42,17,-29,3,34,73,9,-10,59,-6,66,11,18,2,-20,-39,8,36,26,18,1,47,-14,36,48,-8,15,-32,35,48,-11,29,-4,-23,38,26,7,-7,2,37,-18,-46,-32,-36,-4,-36,13,35,-9,32,-9,-42,11,28,5,-9,35,-31, -20,-127,-37,-72,39,14,58,-58,-1,-44,23,27,69,27,-17,47,50,-17,24,-20,-3,-24,-3,-39,-56,13,-20,-11,41,52,4,44,15,-1,25,-14,41,-36,-9,7,40,1,-24,10,-9,30,-41,-36,23,-24,23,21,-12,-8,29,-55,3,19,-46,-4,-20,-39,-34,-26,-44, 
  /* [6][0][][] */ 81,127,-4,38,-4,-46,-60,-55,-108,-85,-55,-4,-57,-26,16,-31,-22,96,22,15,-18,48,1,50,-29,9,101,19,50,-22,22,-86,59,-83,-75,30,-103,57,-76,-63,-37,-82,64,-4,-71,86,40,36,12,54,-58,80,-85,52,70,-36,-22,-77,63,96,-15,-96,-30,-11,-68, 99,-59,58,-28,-22,95,102,-50,68,-45,92,95,62,-58,-52,-5,-47,-122,11,-117,-76,-21,-48,105,91,-72,-94,-27,-86,-77,-97,96,-106,90,-43,28,-80,49,-10,31,45,-72,-5,-11,29,-75,-60,-42,80,-35,98,-66,-68,-112,34,-8,-107,22,-28,-113,-65,3,-19,-78,-86, -105,11,-42,-9,-71,21,-91,-79,58,-67,-31,59,1,-25,-68,38,72,-38,-36,55,-64,-16,-32,-1,-43,40,-53,10,35,84,37,0,55,-101,-73,-103,53,-81,1,-98,-72,-19,-33,31,48,4,10,-97,-25,15,-49,69,81,-60,-77,8,74,-96,61,35,36,-68,57,-68,18, 
  /* [7][0][][] */ 24,-17,105,60,95,47,-51,58,-40,-42,77,-85,44,-78,-24,27,-2,99,-26,6,-22,52,-62,-1,80,-10,7,84,81,78,-28,-49,61,98,17,-44,61,-5,53,-32,-22,20,-35,-23,-79,-51,36,65,-4,35,86,-77,48,-16,-76,-41,-65,-34,7,-70,-19,32,53,36,13, -86,-90,73,55,-25,-74,-1,74,38,76,20,9,24,-24,-2,12,-29,-39,-31,-62,-41,-25,2,-16,25,-19,15,-93,10,10,59,27,58,43,-26,-23,47,66,64,-76,102,31,76,-16,46,24,60,-89,-22,-82,23,-75,-50,26,25,-58,-70,42,-20,-1,-68,29,1,60,56, -30,47,-106,10,15,-60,15,-93,37,-57,-87,54,-109,-37,-107,45,-78,-30,-101,71,-80,-23,7,28,54,35,1,51,-45,20,27,0,-92,43,-31,4,-6,-97,-48,-67,-67,-2,-97,-39,-83,-77,-96,-72,-8,41,-43,69,-73,-75,-34,-15,33,26,0,7,-51,-61,91,60,-127, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,65 } };
const TfArray<8, float> quant11_scale = { 8, { 0.003039154689759016, 0.0028315167874097824, 0.0023540544789284468, 0.0020110639743506908, 0.002030153525993228, 0.0032166466116905212, 0.0021191032137721777, 0.0017543245339766145, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,148,65 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0098984930664300919, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,148,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.013503282330930233, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,148,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.013503282330930233, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,74,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.013503282330930233, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,74,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.013503282330930233, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,74,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.019799493253231049, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,74,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.019799493253231049, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,37,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.019799493253231049, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,592 } };
const TfArray<1, float> quant20_scale = { 1, { 0.019799493253231049, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.25883838534355164, } };
const TfArray<1, int> quant21_zero = { 1, { 49 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9632), (TfLiteIntArray*)&g0::tensor_dimension0, 9620, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 4736, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 1560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 9620, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9632), (TfLiteIntArray*)&g0::tensor_dimension13, 1184, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 1184, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1184), (TfLiteIntArray*)&g0::tensor_dimension15, 592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1184), (TfLiteIntArray*)&g0::tensor_dimension17, 1184, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 1184, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1184), (TfLiteIntArray*)&g0::tensor_dimension19, 592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 592), (TfLiteIntArray*)&g0::tensor_dimension21, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
