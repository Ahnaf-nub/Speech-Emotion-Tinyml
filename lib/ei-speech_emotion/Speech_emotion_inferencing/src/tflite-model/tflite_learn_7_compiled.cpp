/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 06.05.2025 02:28:21

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 11728;
#else
constexpr int kTensorArenaSize = 10704;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,962 } };
const TfArray<1, float> quant0_scale = { 1, { 0.043563146144151688, } };
const TfArray<1, int> quant0_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 74, 13, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { -1, 1216, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[8] = { -88, 17, -61, -72, -315, 301, 127, 276, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00021716125775128603, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[8*1216] = { 
  12, 27, 31, -6, 6, 16, -40, -10, 16, 32, -1, -48, -17, 8, 6, -24, -1, 28, 0, 4, -43, 7, 17, 46, 22, -6, 17, 17, -1, -28, 14, 21, -67, -49, -63, 13, -11, -24, -105, -1, 10, -5, -21, -3, 2, -43, -71, -12, 13, -13, -22, 32, -11, -4, -89, 5, -25, 41, 16, -11, 19, -77, -61, -6, 1, -2, 44, -7, 28, 12, -42, 12, 22, 5, -18, -49, -27, 10, 9, -18, -32, 40, -2, 14, -68, -4, -11, 34, 18, -16, 4, 17, 25, -40, 30, 1, -47, -2, -54, -11, -3, -9, -63, -8, 9, -19, -3, -20, 15, -31, -62, -3, 41, -16, -24, 29, -6, 12, -38, -24, -20, 37, 15, -6, -38, -113, -59, -36, 18, -12, 17, -47, 10, -5, 31, -10, 41, -4, -10, 33, 22, 8, 11, 50, -20, 39, -17, 9, -2, 5, -13, 12, -8, -36, -9, 20, -4, -58, 29, -31, -24, -9, -7, -22, 18, 9, -20, -7, -12, -22, 4, -17, 33, 20, -19, -1, 58, -1, -31, 35, 15, -21, -8, -29, -6, -8, -27, 3, -29, -47, -28, -74, 24, 17, 39, 15, 17, -3, -20, -16, 39, 25, 10, 24, 14, 0, 19, 23, 1, -11, -39, 18, -5, 0, 3, 7, -15, -17, 3, -14, -11, -36, 26, -3, -14, -9, 5, -3, -27, 43, -13, 5, 3, -7, 17, 3, 26, -14, 21, 3, 10, -17, -10, 6, 31, -13, -11, -1, -9, 4, -29, 5, -28, -13, -4, -14, 3, -5, -5, 29, -2, -19, -14, -23, 21, 12, 9, 2, 3, -4, -9, 9, -4, 15, -52, 8, -9, -4, 3, 2, -12, -5, 6, -13, -5, -25, 13, 22, 17, -25, 9, 2, -19, 14, 3, -10, 25, -14, 7, 3, -18, -17, 15, 3, 19, -13, 0, -6, 21, 1, 5, -6, -20, 11, -26, -11, -34, -23, 11, -19, -3, 10, -4, 19, -1, -6, -28, -9, 20, 8, 23, -16, 0, -13, 5, 10, -19, 17, -25, 9, -14, -13, -4, 13, 0, 10, -2, -1, 14, -37, -12, 4, -15, -30, 7, -16, -30, 6, -49, -17, 3, -27, 12, 4, -52, -19, 18, -23, 1, -6, -20, -16, -24, -17, -17, 22, -17, 15, -17, -25, 13, -32, -8, 14, 10, -11, 23, 23, -14, 4, -7, -4, 29, 14, 24, -19, 14, -13, 1, 30, 4, 37, 7, 10, 23, -11, 22, 15, -2, 26, 6, 12, 4, -3, -14, 3, -22, -27, -20, 4, -16, 3, -25, -27, -13, 4, -5, 5, -21, -10, -10, -35, -59, 3, 10, -45, -29, 13, 4, -44, -34, 32, 27, -12, 24, -33, 15, 33, 3, -14, 2, 29, 0, -7, -3, -3, 32, 7, 24, -5, 9, -6, -2, 16, 1, 15, 27, 3, 23, 27, 6, 31, -16, 18, -12, 16, 21, 34, 2, -1, -16, -13, -5, -3, -9, 13, -9, -10, -11, -7, 15, -29, -19, -11, -19, -34, -10, -3, 3, 3, 14, -9, 2, -22, -23, 41, 30, 5, 22, -41, 18, 16, -26, -23, 28, -1, 2, -13, 0, -14, 15, -4, 6, 16, 12, 0, -35, 10, -3, -7, 6, 8, 27, 28, 15, 29, -10, 3, 2, 14, 21, 27, 1, -19, -3, -21, 13, 3, 9, 21, -28, -2, -9, 5, -7, -13, 2, 10, -23, -35, -4, -22, 10, -32, -16, -33, 9, 4, -9, 26, 6, -4, -4, -46, 9, -12, -41, -32, 15, 2, -3, -7, -14, 11, -18, -1, -10, 29, 20, -5, -29, 20, 3, 6, -30, 2, 31, 2, 7, 14, -7, 18, 0, 18, -4, 8, 16, -5, -2, -38, 10, 10, 5, 2, -9, -7, -4, 5, -20, -9, 24, 13, -42, -15, -22, -35, 9, -27, 8, -23, -4, -23, -26, 8, -1, -1, 18, -25, -1, -17, -38, -47, 16, 1, -4, -10, -12, 0, -19, 2, 1, 5, -5, -19, -47, 9, -2, -15, -45, -3, -3, 1, 13, 14, 8, 10, 3, 9, 17, 1, -3, -5, 6, -27, 16, 13, 15, 6, -7, -11, -11, 1, -7, 2, -8, 3, -38, -9, 5, -8, -11, -9, 24, 1, -20, 1, -5, -8, -12, 1, 7, -28, 2, 4, -30, 0, 14, -13, -4, 4, -26, -7, -30, 4, -8, -11, -1, -6, -35, -8, 5, -3, -54, -7, 14, -13, 15, 11, 12, 14, 17, 9, 13, -9, -12, 7, -1, -16, 10, 1, 10, 19, -2, -1, -21, -12, 1, 5, -25, 24, -24, -13, 10, -9, -13, 7, 31, -8, -16, -41, 1, -4, -8, 3, -12, -19, 26, -3, 4, -15, 7, 2, -7, 6, -23, -10, 13, 7, -11, 6, 4, -13, -10, -20, -13, 17, -19, 2, 8, -13, 5, 3, -1, 19, 24, 10, 16, 9, 1, 11, 11, -6, 12, 7, 0, 12, -17, 1, -3, -17, -3, -19, -18, 11, -28, -23, 1, -11, 5, 1, 23, 29, -20, -29, 3, 2, 2, 22, 0, -14, 17, -14, -2, -10, -2, -16, -2, 6, -3, -3, 8, 12, 12, -2, -13, -4, 1, -9, -26, 2, -3, -17, 7, -2, 17, 8, -16, 4, 40, 11, 7, 10, 4, -7, 13, -23, 25, -13, 3, 8, -2, 23, 10, -11, 9, 4, -1, -3, -13, -9, 14, -18, 0, 11, 6, 23, -10, -13, 1, 2, 25, 13, 9, -5, 18, -17, 20, -3, 8, -4, -6, 13, -16, -5, 28, 6, 7, 17, 5, 0, -6, -5, -6, 23, 2, 1, 10, -3, 10, 6, -12, 12, 9, 13, 7, 21, 0, -3, 11, 4, 7, -19, -9, 10, -11, 2, -12, -23, 15, 16, -2, 22, -22, -1, -6, -20, 4, -25, 8, 22, 13, -23, -4, 8, 6, 6, -5, 11, 24, -17, 12, 0, -1, 6, 4, 13, -16, -22, 18, 9, 14, 4, -13, 0, -3, 8, -3, 11, -4, 10, 8, -5, 22, 22, -5, 16, 23, 15, -14, 16, 17, -27, -6, -6, 21, -5, -7, 4, -12, 1, -21, -6, 15, 6, 16, 12, -32, 16, -34, -32, 23, -35, 0, 1, 26, -21, -16, 22, -12, 0, -4, -7, -1, -25, -12, 4, -15, -10, -2, -14, -1, -7, 9, -17, 8, 6, -3, 0, -12, 3, -1, -4, -12, 10, 10, 0, 3, 11, 3, 5, 10, 22, 5, 7, 3, -31, 9, 4, 4, 10, -12, 1, -6, -2, -11, -10, 7, 6, -2, 6, -11, -6, -10, -28, 11, -14, -11, -23, 4, -39, -26, -5, -15, 2, -13, -10, 8, -28, -3, 3, 7, -1, -7, 6, 13, 10, 4, 11, 18, -10, -20, 0, -17, 2, -6, 3, 2, 5, 3, -23, -7, 8, 9, -7, 9, 4, -5, 6, 5, -26, -8, -4, -1, 0, 4, 32, -17, 11, -18, 3, -2, 0, 9, 25, -23, -8, -10, -19, -8, -7, 8, 15, 12, -5, -22, 7, -10, -5, -14, -10, 9, -15, -1, -12, 14, -24, 7, 2, -34, 11, 7, 10, 0, -35, -28, 17, -10, -31, 4, -3, -11, -5, -29, -9, -4, -3, 3, -20, 9, 13, -17, -10, -7, -12, -19, 17, 6, 12, 7, -11, 3, 4, -7, 11, -19, 2, -6, 39, -15, 0, 8, -7, 30, -11, -5, 28, 3, 0, -10, 7, -33, 6, -81, -11, 10, -29, 
  10, 11, -22, 19, -11, 7, 6, 32, 27, 19, 1, 24, 40, -22, 18, 32, 25, 6, -3, 2, 19, -6, 23, 9, 25, 14, 3, -1, -23, -1, -1, 5, 49, 21, 15, 0, -11, 27, 22, -17, 6, 7, 6, -10, -7, 3, 9, -14, 4, 9, -2, -4, -17, -6, 2, 34, 2, -28, -27, 4, -41, 11, -12, -28, 6, 15, -43, 18, -12, -4, 12, 23, 18, 40, 30, 20, 25, -13, 13, 29, 20, 6, -1, 6, 6, -8, 1, -6, 15, 11, 3, -18, -4, 11, 15, 9, 45, 8, 2, -1, 21, -6, 1, -14, -17, -1, 5, 17, -19, -12, 7, -14, -56, -23, 9, -41, -44, -34, 24, 13, -11, 9, -18, -5, -4, 5, 27, -10, 16, -2, -33, 23, -21, -5, -7, -5, -8, 6, 19, 22, 14, -13, -29, 7, 20, 1, -4, 2, 27, -7, -9, -16, 6, 12, -4, -6, -14, -2, 12, 12, 39, -18, -5, 21, 35, -9, -10, -12, -3, 17, -36, 15, -6, 30, -4, -3, -31, -6, -10, -31, -56, -32, 23, 0, 1, 17, 1, -11, 8, -25, -18, 2, -14, -1, -40, 12, -24, 8, -21, -9, -9, -20, 5, 18, -7, -8, -32, -8, 14, 15, 0, -4, 16, 1, -2, -1, -6, 16, 15, 18, -18, 12, -9, 1, 12, -13, -5, 17, 14, -14, 3, -12, -4, 7, -26, 7, -18, 32, -12, 3, -4, 15, -2, 9, -5, -9, 17, -12, 7, -10, -24, -3, -13, -43, -42, -8, -7, 5, 19, 18, -4, 3, -12, -3, 14, 1, -2, 17, -12, 5, -11, -9, -4, -10, -17, -8, 6, -14, 11, -14, -12, 9, 16, 7, -15, 1, -11, 11, -14, -26, 2, 4, -6, -4, -4, 11, 8, -5, -27, -4, -17, 10, -10, 3, 9, 2, -11, 35, 21, 22, -19, 12, 5, -14, -28, 6, -12, -13, -10, -17, -5, 14, 9, 11, 13, 4, 3, 2, 16, -4, 6, -7, -1, 0, 24, -28, -10, -11, -17, -1, 9, -8, 10, -19, -8, 8, 15, 10, -19, 1, -3, 20, -13, -7, -6, 13, -4, 9, -7, -21, -8, -11, -4, -5, -6, 22, -2, -4, 9, -8, -9, 27, 3, 20, -2, 9, 32, -21, -38, 5, -28, -39, -2, -6, 12, 37, 13, 21, 6, 7, 14, 1, 34, 5, 3, -13, 0, -19, 31, -12, 4, -23, -10, 2, 13, -20, 5, -19, 5, 20, 9, -1, -5, -8, 1, 11, -9, 10, 20, -18, -30, -15, 12, 4, -4, 1, -7, 8, -17, 10, 13, -1, -3, 8, -31, 24, -14, -19, 31, 34, 7, -27, -26, -2, -28, -11, -22, 3, 11, 36, -4, 12, 3, 29, 4, 25, 34, 8, 11, -40, 0, -8, 17, -24, 6, -4, -4, -8, 10, -15, 5, -11, 4, 10, 10, 4, 14, -13, 3, 22, 0, 18, -1, -7, -17, -7, -3, 17, -8, -5, -19, 2, -18, -11, -1, -22, -20, 5, -28, -6, -27, -20, 13, 32, -8, 6, 3, -11, 4, -3, -21, 15, 29, 29, -13, 12, 11, 18, -7, 31, 33, -3, -2, -18, -17, 2, 5, -28, 4, 11, -10, 5, 7, -8, 2, -11, 7, 2, 6, -1, 8, -13, 7, 9, 0, 3, 0, 9, 7, -18, -11, 14, -12, -14, -32, 8, -4, -4, 6, 9, -34, 5, 8, -31, -1, -24, 13, 21, 4, 9, 10, -1, 11, 35, 2, 12, 29, 17, -13, 1, -3, 9, -3, 9, 47, -15, -5, 8, -8, -5, -7, -20, -8, -6, -13, 7, 6, 6, -7, -6, -1, 2, -1, 3, 4, -3, 8, 3, -17, -18, 1, 22, -4, -6, -4, 8, -2, -16, -19, 11, 14, 8, -6, -10, -33, 17, -7, -18, 0, 27, -16, 25, 9, 6, 3, -1, 8, 6, -9, 12, 27, 19, 3, 13, 4, 4, -2, -9, 34, -13, -8, -9, 0, -2, 16, -8, -11, 12, -1, -5, 10, -3, 5, -12, -3, -1, 4, -16, 3, -7, 9, -11, -20, -2, -8, 14, -4, -34, -17, -4, -3, -21, -22, 23, -9, 4, 3, -5, -14, 16, -4, -7, -1, 7, 4, -5, 1, 2, -13, -18, -10, 12, -1, 1, 13, 8, -7, 5, 1, 11, 0, 1, 15, -6, -28, -20, 5, 15, 0, -10, 2, 2, -14, -31, 12, 5, -4, -22, -12, -15, 4, -4, -14, 9, -8, -11, -15, -6, -8, 6, -7, -11, -8, 1, -6, -12, -1, 5, 1, 9, -16, 1, -8, 2, -6, 11, 8, -9, 16, 0, 0, -10, -8, -16, -13, -5, 2, -7, 17, 14, -1, 14, 6, -6, 11, -15, -6, 10, -10, 9, 6, 3, 2, -4, 0, -1, -13, -14, 9, 2, 2, -12, -18, -7, -12, -9, -5, 10, -12, -8, -21, -6, -2, -3, -34, -7, -11, -5, -1, 5, -3, -2, 12, -11, -26, -7, 3, 6, -14, 3, 4, -26, -17, 19, -8, 12, -8, -18, -11, -2, 0, -7, 5, 7, 1, 21, 5, 11, 21, -7, 11, 17, 11, 9, -4, 9, -11, -9, 16, 2, -6, -7, 6, 8, 13, -6, -8, 1, 10, -16, -12, -8, 9, 4, -6, -12, 13, -4, -12, -11, -8, -1, 1, -15, -8, -2, 4, -1, -8, 2, -6, 4, 6, 18, -16, 1, -1, 18, -7, 12, -3, -10, -16, 1, 7, -2, 17, 9, -17, 15, 10, 15, 3, 6, 9, -3, 6, -1, 2, 15, 2, -23, 15, -2, -19, 10, -6, 6, 7, -7, 1, -1, 13, -9, 4, -9, 8, -1, -3, -6, 9, 12, -2, -9, -10, -2, 2, -17, -23, 16, -8, 4, -31, -6, 4, 7, -23, 6, -3, -19, -4, 12, 15, 11, 5, 9, 18, -2, -26, 11, 3, -2, -9, 17, 14, 4, 12, 6, -1, 1, 5, -15, 4, 7, 12, -13, 9, -17, -14, 2, -1, 14, -1, 8, -10, -1, 21, -7, -7, 2, 14, 3, -15, -5, 12, 12, 2, -4, 2, 13, -1, -9, -5, 21, -1, 14, -2, 0, -6, 7, -18, -5, -7, -23, 4, 4, 7, 6, -4, -9, -1, 8, 9, 9, 6, 3, 9, -10, 8, -15, 5, -10, 20, -16, -5, 1, 13, -7, 9, -6, -6, -17, -6, 5, 3, -8, 0, -4, -9, 0, 6, 5, -1, -1, 5, -4, -5, -8, 3, 14, 8, -2, -10, -4, 6, 7, 0, 7, 13, 8, -12, -6, -4, 14, -18, -8, 7, -3, 5, 6, -3, 23, -4, -5, 8, 7, 11, 7, 9, 5, 6, 8, -6, 0, 13, 5, 35, -20, -6, 24, 9, -19, 10, 3, -1, -1, 11, 1, 12, 1, 2, -2, -10, 2, 6, 5, -4, 6, -7, -3, -9, -10, -7, -6, 5, -2, 7, 7, 15, 10, 0, 1, 16, 3, -10, 2, 3, 3, 8, 3, 11, -4, 4, 1, -2, 21, 6, -4, 13, -19, -2, 7, 24, 5, -5, -6, -3, -6, 3, -1, 20, -9, 3, 22, -1, -3, 6, 28, 8, -2, 6, -8, 38, 2, 5, -3, -10, -9, 0, -9, 2, -1, 5, -5, -10, 0, -12, -10, -29, 0, 5, -6, 1, -6, 9, 2, 13, 23, -7, 7, 11, 11, 11, -17, -1, -3, 9, 14, -10, 17, 19, -5, 27, -9, 5, 9, 
  -50, 15, 7, -3, -6, 23, -76, 14, -48, -60, -6, -46, -79, 9, -13, -100, -105, 9, 10, -33, -30, -32, -36, 15, -28, -4, -9, -30, 37, -10, -70, 20, -15, 13, -17, 10, -6, -24, -44, 3, -25, -18, -21, -37, -3, -35, -57, -4, -18, 35, -37, -55, -94, -71, 69, 13, 12, 27, 26, 5, 24, -101, -5, 34, 3, 14, 10, -27, -15, 17, -34, 5, -34, -31, -15, -24, -45, 10, -18, -68, -107, 12, -3, -29, -49, -9, -62, 27, -34, -35, -19, 18, 21, -31, 4, -26, -43, 8, -14, 13, -4, -55, -34, -11, -26, -10, -22, -74, -6, -12, -69, -5, -24, 2, -55, -45, -127, -120, 71, 1, 15, 17, 1, 12, 6, -124, -38, 14, 21, 22, -11, -6, 21, 20, -9, 0, -14, 4, -21, -54, -37, 2, 8, -63, -27, 5, -18, -18, -58, -36, -5, 12, -20, 0, 0, 34, 34, -28, -8, -5, 15, 32, 16, 17, 3, -8, -26, -19, -15, 28, -10, -12, -31, -3, -37, -1, -7, 9, 21, 10, 38, -22, 25, -12, -3, -8, 21, 7, -13, -23, 15, 17, -4, 3, -23, -9, 19, 6, 3, 0, -6, -16, -31, -29, 3, 37, -40, -38, 1, -27, -10, 2, -28, -22, 27, -13, 13, 18, 12, 9, 32, -10, -4, 13, 10, -5, 6, 40, 35, 11, 22, -14, -7, 16, 3, -1, 16, 9, -2, 3, 20, 15, -4, 16, 47, 5, 21, 15, 3, 2, 9, -6, -1, 12, 15, -5, -13, 2, -28, -21, -22, -12, -29, 4, -6, -11, -10, -24, -3, 19, -20, -21, -1, -9, -35, -1, -47, -28, 21, 0, 5, 17, 18, -1, 25, -48, 6, 17, -5, -35, 26, 34, 28, 24, 11, -18, -27, 28, 20, -18, -5, 9, 7, -18, 38, 24, -16, 24, 23, 18, -30, 16, 18, 3, 8, 31, -16, 5, -2, 17, -11, 10, -33, 1, -12, -14, -21, -7, 6, 17, 2, -18, -3, -4, 6, -22, -11, -5, -15, -14, -54, -17, 15, -9, -1, 16, 22, 7, 35, -63, -2, 20, 12, -3, 0, 29, 27, 20, 7, -15, -17, 5, 20, 1, 2, 18, 37, 26, 26, 17, 0, 57, 11, -16, -19, 4, 30, 16, 1, -5, -40, 8, 10, -9, 4, 4, -28, 0, -7, 10, 3, 0, -34, 38, 10, -82, -17, 8, 12, -20, -24, -12, 31, -19, -29, -18, -8, 9, -8, -24, -5, 12, 16, -8, 12, -12, -8, -28, -18, -15, 3, -12, 1, -18, -11, -5, -3, 10, -6, -34, -18, -1, 13, 23, 8, 15, 15, 7, -27, 25, -7, -6, -13, -3, -25, 12, 15, -44, -12, 2, -32, 2, 17, 9, 12, 7, -29, 31, 42, -38, -3, 6, 10, 15, -20, -25, 32, 0, -14, -1, -37, -17, 3, -37, -30, 10, -4, 22, -4, -53, 13, -14, -20, 31, 15, -15, 4, -20, 16, 28, 6, 1, -18, -5, -27, 32, 9, -1, -4, 0, -17, -8, 5, -8, -7, 17, -1, -8, 2, 11, 16, -36, -9, -2, -46, -10, -4, 20, 10, -2, 8, 3, 7, 11, 10, 8, -8, 6, -17, 0, 11, 2, 11, 8, -9, -11, -6, -17, -15, 7, 17, 29, -1, -41, 22, -15, -22, 4, 6, 15, 19, 3, 24, 22, 10, 18, 0, 6, -21, 27, 25, 2, -6, 19, -2, -5, 35, -16, 10, -17, -16, -2, 1, -4, -1, -28, 29, -4, -23, -1, -16, 31, 4, 2, 0, -3, 0, -23, 10, -4, -9, 3, -9, 4, 15, 16, 18, 11, 4, 5, -6, 1, 0, 26, -3, 17, -9, -22, 20, -17, -1, 7, -12, 14, 13, 2, 5, 26, -7, 24, 6, -5, -10, 14, 33, 2, -5, 9, 19, 23, 21, 3, -7, -40, -44, 13, -57, 7, -24, -31, 8, -2, -13, -27, -24, 24, -10, 13, -4, -13, -7, -20, -6, -9, -24, -18, -15, -3, 6, 9, 27, -1, 23, 1, 1, -1, 12, 25, 3, 13, -7, -6, 13, -14, 3, 3, 1, 16, 23, 9, 5, 13, 12, 27, 0, 0, -10, 13, 28, -14, -7, 20, -3, -11, 15, 10, 33, -50, -76, -1, -70, 0, -14, -48, 24, 12, 0, -14, -11, 6, -39, 15, 28, -14, 18, 0, -16, 9, 14, -8, -31, 1, -6, 3, 13, 1, -5, 8, 7, 4, 20, 20, -8, 23, -2, -6, 4, -22, -3, 14, -17, 7, 14, -8, 7, 19, 14, 0, 16, -5, -18, 11, 0, -20, -19, -4, -3, -3, 13, 6, 12, -24, -22, -7, -23, 16, -21, -1, 13, 8, -10, -11, -10, -8, -33, 11, 24, 6, 11, -6, 0, 8, 5, -3, 0, 3, -14, -1, 1, -11, 20, -2, -8, 8, 20, 15, -7, -12, -5, -1, 12, -15, -10, 5, -8, 5, 4, 3, 7, 12, 25, 7, -19, 12, 0, 3, 4, -6, -7, 5, -62, -37, 12, -7, 12, 3, -20, -1, -29, -10, -16, -6, 13, 18, -36, -10, -12, 2, -33, 16, 17, 4, 21, 1, -11, -16, -5, -15, -18, -5, -5, -5, 31, -8, 1, 8, -6, 2, 11, 17, -12, 14, -4, -6, 15, -5, -13, -24, -20, 3, 0, 3, -8, 1, 2, 1, 6, -2, 13, -18, 9, -8, -2, 16, -14, 9, 5, 4, 18, 7, 12, -7, 3, -39, -1, -3, 1, 6, -5, 6, -14, 11, -12, 7, 20, 20, 11, -5, 2, -15, -25, 5, -20, 12, -1, 6, 33, 1, 3, -1, -10, 12, -2, 5, -3, 11, 5, -7, 5, -14, -12, -17, -15, 3, -22, -4, 11, -25, -5, 22, -4, -5, -6, -11, -24, -2, 13, 0, -6, 2, 9, -3, -5, 7, 1, -7, -9, 10, 18, -9, -17, 12, -8, 3, -20, -4, -14, -4, -5, -17, 23, 4, 9, -5, -10, 16, -17, 16, 0, 1, 12, -5, 8, 26, -23, -7, -17, -7, 11, 2, -2, -4, 6, 3, -2, -10, 10, 5, 3, -2, -1, 16, 13, 17, 10, -4, -5, 2, -7, -2, 12, 12, -2, 16, 9, 16, 10, -16, -14, 9, -8, 10, -2, -8, 2, 19, -28, -1, -12, -17, -4, 11, 2, -20, 3, 0, -2, -18, -13, 7, 0, -7, -6, -8, 7, 3, 17, 0, -23, -5, 1, -21, -19, 5, 8, -13, -2, 0, 2, -7, -8, -7, -5, -1, 2, 0, 21, 18, 12, 4, -12, 3, 8, -4, -7, 0, 30, 20, -7, 8, -4, 2, -12, -9, -3, 38, -4, 0, -9, -8, -1, -1, 7, 15, -5, -18, -17, -15, -11, -21, -18, 3, -16, -13, 4, -8, 1, -19, 3, -9, -9, 9, -18, -10, -14, 5, -12, 1, 5, -6, 1, -7, 8, 8, 14, -6, -9, 5, 0, 9, 21, -27, -4, 8, 1, 3, -10, -14, 8, -3, -32, -19, 5, 7, -17, -2, 7, 4, -16, 12, -4, -16, -16, -20, 22, 2, 25, -5, -10, 2, -14, -10, -20, -3, -6, 15, -5, 6, -25, -17, 9, -16, 3, -19, -17, -13, -14, 5, -3, -16, -5, 9, 9, -11, -3, -11, -3, 8, 1, 7, 4, 2, 3, 12, -3, -31, -1, -12, 10, -18, -7, 3, -39, 19, -35, 13, -11, 6, -1, -29, 10, -7, 16, -9, -44, -6, 
  -11, -27, -19, 9, 9, 9, -18, -12, -20, -51, -19, -27, -47, 19, -50, -60, 23, -68, 22, -22, -1, -4, -3, -31, -5, 14, -2, -23, -5, 2, -27, -11, -1, 11, 1, 6, 2, 13, 12, 17, -16, -6, 24, -2, 18, -4, 25, -15, -16, -23, 9, -55, -4, 37, -11, -9, -15, -10, 30, 10, 6, -1, -43, 6, -23, -12, 10, -7, 14, -2, -13, 0, -22, -5, -22, 16, -30, -4, -19, -14, 4, -29, 4, -11, 10, -6, -8, -8, -19, 6, -13, -50, 8, 24, -10, 3, 16, 25, 26, 9, -8, -10, 23, 24, 3, -21, 8, 24, 13, -10, 9, -9, 32, -4, -8, -13, 41, 15, -40, -18, -3, -8, 4, 1, -23, 13, -29, 16, -34, -2, 7, 7, 6, -11, 10, 6, -16, 22, 2, 30, 7, 13, 26, 25, -19, 12, -16, -26, -15, 2, -13, -1, -19, 8, -15, -31, 4, 20, 7, 25, -7, 13, 13, -6, 14, -9, -4, 12, 16, -51, -30, 5, -23, 1, 5, -24, -4, -5, -15, 15, -1, 15, -83, -20, -5, -24, 3, -3, -11, -14, -36, 17, -4, 13, 12, -7, -22, -19, 25, 5, -7, -14, 9, 56, -1, -5, 11, 17, 2, 17, 7, -17, 0, -11, -38, -23, 6, 2, -18, -52, 7, -16, 23, -2, -2, 20, -31, 19, -2, -15, 31, -3, 37, 6, 2, 4, 9, -8, -29, -13, 48, -28, -3, 6, -12, 7, -30, -18, 3, 8, -1, 1, 12, 9, -8, 13, 7, 7, 7, -2, 3, -10, -2, 14, 6, -11, -18, 62, 6, 0, -10, 9, 27, -7, 15, -21, 7, 22, -25, 15, -3, -7, -6, -23, -6, -12, 15, 16, 11, 26, -7, 6, -33, -26, 12, 4, 26, 29, 13, 6, -6, -23, -24, 4, 22, -12, 2, -14, -20, -18, 8, 9, 7, -3, 9, -14, 26, 12, -11, -15, -6, -10, 29, 1, 28, 0, -4, 6, -6, -21, -41, 18, 4, 20, -13, -7, 21, 9, -11, -44, 9, 29, -7, 7, 3, 3, 1, -19, 3, 1, 3, 45, -19, 8, -28, -12, -39, 3, -6, 20, 15, 7, 5, -19, -2, -36, 17, -46, -35, -33, 13, -67, -10, 19, 13, -3, -57, -5, 29, -10, 27, -2, -13, -4, -18, -11, -11, -14, 13, -5, -27, 0, -34, -32, -23, -4, 1, 15, -32, 4, -1, -1, -30, -15, -22, 20, -7, -22, -11, -6, 3, 7, -3, -1, 5, 1, -22, 28, -19, 2, 2, -9, 9, 8, 19, -9, 23, 16, -3, 1, 30, -51, -55, -15, 3, -93, -4, -7, -7, -24, -39, 22, 36, 18, 12, -1, -10, -9, -31, -4, 35, -20, 16, 17, -1, -8, -36, 0, 14, 15, -3, 10, -11, 10, -2, 3, -24, -1, -15, -1, -11, -9, 0, -4, 7, -5, -19, -30, 18, -2, -5, 6, -16, 2, -10, -13, -2, 1, 15, -16, 20, 12, -2, -5, 20, -48, -32, -3, -6, -40, -2, 1, 15, -17, 7, -2, 15, 21, 12, -5, -13, 19, -7, 18, 14, -30, 4, 11, 11, 1, -32, 2, 8, 12, 18, 2, 5, 13, 3, -3, -16, 3, -7, -13, 2, 1, 14, -8, -4, -5, -9, -10, 12, -8, 6, 15, -8, 9, -2, -13, 4, -15, 14, -35, 8, -2, -16, -1, 14, -12, 2, 5, -3, 1, 24, -14, 5, 11, 15, -4, -1, -3, 8, -12, -3, 12, 16, -2, -7, -14, 1, 11, 15, 4, -66, -6, -14, 10, 6, 3, -4, -2, 0, -1, -19, -6, -6, -2, -17, -1, 11, 9, -8, -17, 2, -4, 6, -8, 5, -7, -13, 3, -1, -8, -4, 1, 3, -15, -8, 7, -14, -7, -5, -34, 15, 4, -10, -7, -4, -17, -33, 12, 3, 14, 1, 4, 14, -6, 1, 4, -2, 16, 10, -3, -1, -2, 11, 19, -24, -2, -13, 18, 15, 0, -13, 6, -6, 20, 1, -23, -3, 3, -30, 15, -4, 3, -13, -13, -4, -15, -20, 8, -11, 7, 1, -31, -7, -11, 4, 9, 22, 6, 8, -19, 0, -14, 0, 0, 9, -22, 2, 6, -24, -3, -14, -26, -11, 9, 13, -3, -3, -6, -8, 5, 0, 14, 12, 10, 4, -1, -9, 0, 7, 2, -14, 20, 8, 5, 5, 5, 6, 12, -17, -24, -10, 6, -19, 9, -25, -15, -23, -21, -16, -25, 6, 13, -22, 8, -21, -27, -11, 6, -4, 14, 15, -7, 5, -19, 3, -36, 17, -2, -35, -33, -2, -21, -37, -10, -16, -18, -9, -1, 3, 1, 16, 9, -3, -6, 9, -2, -2, 11, -4, -19, -27, -14, 28, -2, -4, 5, 5, -1, -5, 7, 1, 9, -12, -5, -14, -21, 3, 4, -16, -14, -11, -4, -16, 0, 7, 6, -15, 16, -30, 1, 7, 5, 3, 6, 15, -37, 10, 5, 1, -17, 40, -4, -19, -2, 10, -20, -5, -6, 2, -31, -30, 17, 3, 14, 8, 19, 4, 12, -1, -12, 4, 2, -11, -11, -16, -18, 16, -24, 5, 6, 7, -4, 0, 19, -2, 6, -7, -6, -12, 6, -4, -19, -2, -2, 4, 9, -11, -2, 13, 12, -6, 15, -31, 7, 15, -26, 14, -11, 15, -27, 14, 10, -11, -9, 33, 0, 12, 2, 2, -15, 7, -12, -11, -1, 0, 16, 16, 2, -3, -7, 22, 10, 6, 7, 13, 11, -11, 0, -12, -18, 0, 12, 12, 10, 2, -1, 21, 20, -1, 1, 2, 2, -2, -5, -14, -26, 0, 9, -10, -30, 18, -8, 8, 4, 8, 8, -22, 12, 9, 10, -3, 2, 16, -12, 18, 4, -8, 0, 24, 2, -12, 0, -7, -5, 5, -5, -13, -1, 6, 6, 12, -8, 0, 1, -3, 3, -1, 12, 4, -25, 3, 4, -11, 12, 7, 6, 14, 12, 3, -3, 11, 14, 2, -14, 28, 4, 10, -11, -1, -8, 4, 1, -10, -9, 6, -2, 12, 8, 2, 7, -47, -8, 3, 12, 8, 11, 6, 9, 6, 7, -17, -2, 10, 8, 17, 21, 16, 5, -2, 11, -15, 15, -2, 4, 36, 1, 23, -39, -22, 5, 8, -11, 3, -1, 5, 7, 4, 13, 3, 13, 4, -11, -10, -3, -1, -4, 1, -12, -13, -5, 14, -6, -12, 6, 5, 0, -26, -15, 16, -19, 7, 1, 6, 7, 12, -22, -9, 6, 9, 9, 10, -2, 16, -11, -6, -22, 1, -1, 11, 7, -3, -1, -14, 10, -13, 1, -1, 18, 8, 1, -20, 28, -1, -6, 14, 0, 8, 2, 5, 8, -4, 8, 23, 13, 13, -6, -24, -2, 0, -13, -6, 6, -13, 12, 10, 3, -22, 8, -5, -2, -4, -37, 8, -11, 11, 3, 11, 12, 13, -11, -25, 12, 7, 8, 8, -11, 1, 2, 4, -59, 14, 1, 1, -2, 9, 0, -3, 0, 3, -4, -9, 12, 6, 4, -12, 21, -7, -13, 16, 11, 0, 15, 3, 0, 2, 7, 15, 21, 10, -5, -14, -6, 3, -12, -3, 33, -2, 0, 15, 2, -5, 3, -4, 9, 3, -36, 11, 12, 6, 13, 3, 2, -12, 25, 3, -2, 15, 8, 8, -20, -11, 0, 10, -53, 39, 0, -4, -14, 12, 4, -23, -12, 24, 5, -5, -2, 11, 13, 14, 6, -1, -13, 
  5, -48, 25, 7, 5, -29, -5, -9, -9, 10, -6, -21, -19, 9, 19, -58, -2, -40, -35, 9, -23, -49, 29, -27, 11, 11, -5, 5, 28, -48, 5, 26, -12, -20, -7, -8, 26, -11, 12, -15, 3, -7, 6, -7, 7, 47, 13, 11, -25, -9, 12, -1, 22, 0, 19, -25, 8, -4, -24, -8, -6, 47, 59, 0, 6, -11, 22, 7, 16, -13, -24, 9, -11, 0, -12, -19, -18, -4, -10, -42, 0, -31, -13, 12, -4, -48, 21, 6, -1, 7, 3, -9, -5, -44, 4, -15, -35, -19, -28, 2, 29, -11, 19, -23, 3, 17, 17, -24, -9, 19, -4, 16, -27, 11, -8, 8, 14, 31, 42, 8, 36, -19, 3, 11, 26, 57, 11, 4, -6, -1, 8, 15, 16, -3, 12, 1, 11, 49, -10, -35, -26, 3, 14, 2, 9, -25, -12, 11, -50, -27, 11, -2, -7, 9, -9, 6, 1, -35, 1, -6, -26, 11, -21, -12, -4, -22, 23, -10, -1, 16, 9, -2, -13, 7, 29, 21, -25, 33, -6, 28, -13, 25, 32, 19, 17, -1, -1, 21, 22, 7, 19, 16, 15, -6, -2, 8, 9, -4, 2, 2, 27, 35, 11, -38, -13, 4, 18, 10, -12, -5, 26, 16, -17, -13, 14, -13, -7, -24, -20, 8, 3, -8, -12, -23, -18, 31, -9, 11, 0, -18, -1, 0, -7, -16, 3, -16, 5, -48, 25, 12, -36, 22, 10, -41, -8, -16, 9, 14, 7, 32, 1, -4, 10, 17, 15, 5, 10, -9, -32, -1, -6, -23, 1, -10, 9, 12, 23, -24, -9, 1, 6, 4, 6, -15, 16, 32, -5, -23, -2, -9, -6, -19, -22, 12, -24, 12, -5, -50, -22, 16, -11, -6, -1, -20, 8, -16, -12, 5, -19, -28, 21, -7, -13, 21, -64, -3, 26, -87, 4, -1, 26, -19, -15, 8, -2, 0, 7, 34, 13, -5, 11, -10, -24, 7, 1, -16, 15, -44, 7, 1, 14, 1, -5, 5, 7, -3, 2, -21, 22, 15, -5, -20, 7, -16, 12, 6, -7, 11, -45, 0, 4, -59, 15, -21, -14, -13, 2, -9, 19, -18, 7, 23, -3, -12, 22, 0, 6, -2, -7, 16, 8, -17, 30, -5, 5, -18, -17, 14, -9, -12, 10, 19, 4, 12, 0, -19, -18, 18, -14, -36, 7, -48, -3, 1, -19, 14, 9, -3, 14, -12, 7, -16, -15, 13, -17, -39, 6, -1, -5, 24, -10, -1, -8, 1, -7, -14, -11, -49, -23, -5, 15, -7, 16, -51, -31, 12, -9, -18, -9, -7, -4, 18, 12, 12, -7, 37, 10, 17, -22, -9, 8, -11, -15, 10, -30, 27, 0, -2, 5, -19, -16, 13, -5, -46, 5, -19, 0, 3, -13, 13, 8, -12, 15, -13, 1, -31, -8, -2, -12, -32, 7, -36, -12, 8, -1, -12, -7, 6, -8, 1, -7, -17, 2, -6, -5, -3, -2, -43, -6, -2, 5, -12, -15, 10, -1, 27, 35, 12, -18, 39, 13, 8, -9, -8, 22, -36, -29, 10, -6, 2, -13, 11, -15, -9, -16, 4, -17, -56, -1, -30, 1, -2, 7, 6, -1, 8, 14, -9, -1, -26, -7, 16, -41, -22, 8, -17, 4, 10, 18, -11, 1, -15, 6, -5, -7, -6, 13, 1, 1, -1, -2, -27, -4, 1, -18, -10, -27, -7, 11, 6, 19, 2, -38, 21, -12, 4, 4, -6, 10, -29, -59, 8, -8, 14, -16, 1, -5, 11, -20, -10, -21, -42, 19, 3, -6, 3, 4, 5, -4, -13, 4, 4, 2, -1, 35, 14, -17, -13, 4, -19, 5, 10, 11, 3, 5, 3, 8, -8, -6, 8, 5, 14, 9, -28, 4, -14, 1, 5, -7, -7, -27, 1, 1, -4, 9, -8, 9, 3, -21, -12, 28, -13, 4, 12, -28, -18, 0, -12, -11, -8, -50, 15, 0, 1, -9, -32, 13, -16, -22, -3, 17, -41, 5, 1, -1, 10, -8, -15, 5, 25, 17, -16, -4, -9, 3, -7, 17, 0, 18, 17, 10, -4, -4, 19, -1, 11, 8, -25, 5, -3, -6, 14, 2, -9, -3, 9, -5, 7, 7, 16, 3, -15, -11, -2, 23, 5, -1, 5, -5, 6, 30, -2, 5, 13, -27, 2, 6, 2, -4, -21, 12, -17, -16, -4, 8, 0, 0, 8, 9, 10, 0, -9, -3, 18, 15, -6, -2, -16, 10, -1, 14, 7, 8, 5, 1, 14, 7, 7, -5, 5, 6, -9, 15, 1, 1, 11, -8, 1, 11, 1, -3, 0, 18, -2, 4, 17, 20, -4, -17, -7, 9, -5, 7, 10, 10, 8, -6, 8, 1, -1, 8, 3, -4, -20, 21, 17, -3, 1, -13, 7, 10, 4, 11, 3, 10, -7, -7, 7, -8, 5, -8, -10, 19, 10, -6, -29, 6, 4, 11, -1, -6, -1, -6, -14, 9, -11, 8, 1, 9, 16, -2, -7, -8, -12, -30, 2, 8, 3, -4, 23, 0, -10, -5, -6, 15, -20, -4, -5, -3, 1, -10, -4, 0, 1, -8, -11, -7, -28, 23, 12, 9, -9, -16, -5, 10, -2, -6, 0, 12, 10, -14, -4, 8, -17, 11, 3, 7, 0, 3, 3, -10, -6, -2, -1, 6, -3, -8, -13, 10, 7, 9, -11, -12, 9, -10, -13, -11, -4, -2, -1, 19, 10, -17, 28, -7, 1, -20, 10, 0, -2, -21, 0, -9, -10, -2, 9, -2, 2, -1, -4, -8, -19, 9, 16, 14, -2, -15, 5, 5, -2, 1, 9, 4, 19, 7, 3, -9, -20, -2, -10, 7, 6, 5, 17, -10, 10, -10, 8, 10, -13, 11, 3, 6, -3, 14, -33, 7, 19, 0, -2, -17, 12, 3, -4, 24, 10, -29, 32, -9, -22, 5, 1, 13, -11, -44, -5, -13, 8, -8, -8, -7, 3, -18, -12, -24, -27, -14, 3, -6, -41, -22, 11, 1, -7, -24, 2, 4, 17, 5, -4, 1, 0, 12, -9, 3, 10, 12, 3, -8, 6, -1, 3, 3, -7, 7, 9, 9, 2, 2, -7, 11, 12, 5, -1, -1, 3, 12, -6, 10, 16, -14, 21, 5, -23, 23, 8, 4, -6, -12, -4, 4, -23, -2, 10, -4, 14, -3, -3, 1, -28, -1, 11, 2, -43, -19, 7, 4, -11, 5, 4, -3, -12, 3, 10, -2, -8, 19, -15, -5, -5, 0, -2, 8, 14, 14, 8, 8, -2, -11, 4, 3, 13, -6, -10, 3, -5, 2, -13, -3, 17, -2, 5, 1, 16, -21, 9, -12, -25, 6, 6, 5, -8, -20, -1, -10, -38, 20, 4, -12, 5, -1, -5, 4, -1, -8, 3, -30, -39, -27, -4, 4, -22, -8, -10, 3, 15, -20, 7, -7, 2, 14, -8, 13, -13, 5, 11, 16, -12, 6, 5, 4, -1, -5, -4, 14, -12, -6, -2, -4, -6, -10, -18, -4, 11, 4, 0, 0, -3, -1, -1, 9, -12, -2, -4, 11, -17, -24, 8, -3, -6, 4, 7, -17, 24, -3, -2, 0, 0, -20, 20, -18, 6, -41, 0, -11, -2, -8, 16, -10, -6, -23, 19, -13, -2, 12, -3, 9, -1, 12, 1, 26, -5, -13, 15, 8, 14, 3, -17, 8, -2, 16, 5, -5, 13, -3, 1, 3, -24, 9, -3, 12, 23, -23, 22, 22, 10, -24, 8, 8, 0, 0, 12, -15, 27, -7, -2, 
  3, -24, -51, -48, -13, 31, -8, 25, -17, -5, 12, 1, 20, -14, -7, -23, -8, -1, 5, -26, 23, 52, -34, 10, -15, -15, -4, 13, 11, 31, 1, -30, 13, 7, 3, -3, 20, 6, 17, -16, -13, 1, 13, 15, 27, 7, 5, -13, 18, 10, 11, 12, 12, -5, 14, -1, -4, 23, 1, 17, 13, 12, 1, -7, 9, -12, -49, -32, -18, -1, -8, -18, -12, 8, 35, 20, -1, -12, 0, 7, -9, -10, 0, -28, 16, 40, -27, 1, -8, -36, -15, 25, 3, 33, -15, -26, 12, -6, 8, 3, 3, 28, 25, 11, -11, -2, 17, 26, 9, 3, 10, -6, 26, 8, 9, 18, 21, 5, 2, -10, 22, 13, 14, 25, -11, 16, 8, -14, 3, -12, -33, -17, -12, 8, -12, -4, 17, -12, 32, 1, -6, -26, -12, -9, -8, -21, -8, -19, 21, 31, -12, 25, -15, -11, -4, 28, 10, 19, -10, -10, 2, -3, 11, -20, -2, 21, 11, -10, 7, -13, 0, 18, 13, 11, -6, 10, 8, 7, 22, -2, 8, 9, -2, 2, 8, 13, -3, 20, 8, 23, 20, 2, 3, -3, -24, 0, -1, 25, -37, 8, 4, -26, 32, -17, -28, -25, -6, -11, -9, -6, 7, -39, 5, 42, -16, 20, -10, 0, 12, -10, 25, 13, -33, -11, -5, -7, 4, -9, -12, 17, -8, 2, -18, 3, 3, -11, 21, 4, -13, -3, 5, 6, 8, 5, -10, 2, 11, 4, 0, 27, 16, 21, 7, 0, -10, 12, -7, 0, -37, -18, -24, 21, -22, 14, -4, -12, 5, 14, -20, -55, -11, -1, -6, -19, 13, -60, -9, 33, -22, 12, -29, -36, -3, 8, 29, 10, -26, -8, 6, -5, 2, -12, 2, 19, -5, 12, -6, 2, 11, -4, 0, 3, -2, 4, 3, 18, 14, -6, 14, 8, -14, -6, 27, -5, 15, 13, -22, 3, -3, -3, -18, -6, -25, -16, -35, 5, 4, 31, -1, -15, 6, 34, -10, -46, -11, 11, -10, -1, 14, -44, 8, 34, -11, 13, -50, -9, -3, 8, 27, 6, -10, -18, -10, 3, 2, -25, 2, 4, -16, 7, -17, -16, -9, 6, 11, 6, 0, 1, 28, 12, 11, -9, -10, 21, -3, 15, 12, -21, 13, 6, -13, -6, -16, 8, 4, 11, -38, 16, -21, 13, -19, 30, 9, 7, 32, 39, -14, -49, -1, -1, -28, -7, 7, -37, 3, 42, -8, 6, -19, -9, 23, 4, 21, 17, -14, 2, -7, -15, 3, -34, -15, 14, -3, -16, 14, -15, 3, -7, 9, 5, -16, 10, 12, 11, -11, -10, 5, 7, -7, 6, 3, 4, 13, 1, 8, 15, -14, 29, 15, -5, -25, 22, -14, 20, -6, 29, 27, -13, 31, 36, -15, -71, -5, -3, -13, -2, 18, -16, 19, 34, -6, 25, -2, -9, 8, 29, 30, 5, -2, -10, 6, -10, -18, -12, -19, 8, -7, -7, 1, 0, -9, -1, -6, -3, 5, 4, 5, 2, -14, -8, -15, -4, 0, 0, 8, 6, -1, 0, 2, 20, 6, 38, 20, 3, -23, 5, -29, -4, -3, 29, 34, -15, 27, 51, -17, -54, 11, 27, -1, 0, 14, -25, 17, 42, -3, 10, -4, -4, -1, 24, 10, 8, -8, -14, -4, 2, 6, 3, 0, 9, -7, -1, -4, -7, 11, 1, 16, 11, 4, 5, 9, 9, 3, -9, -6, -12, 6, 7, 10, 18, 12, 17, 20, 0, 11, 35, 23, 9, -19, 4, -23, 23, 3, 40, 36, 6, 26, 35, -9, -81, 0, 22, -10, -7, 25, -15, 3, 40, -22, 20, -16, -2, -2, 17, 18, -1, -1, -9, -14, -7, 5, -10, 3, 15, 13, 17, -10, 3, 4, 10, 14, -2, 13, 19, 21, 20, 1, 7, -24, 6, 16, 1, 21, 5, 13, 16, 10, -24, -8, 12, 17, 29, -11, 4, -28, 22, -1, 29, 22, 2, 21, 19, -21, -51, 11, 9, -14, -7, 11, -11, 1, 31, -16, 26, -12, -9, 5, 4, 11, 3, 1, -9, -4, 2, 3, -20, -6, 9, -4, 3, 1, -6, 8, 6, 5, 23, -7, 23, 20, 3, 1, 11, 3, 3, 9, 16, 33, 11, 1, 10, -2, -27, -12, 8, 29, 11, -14, 7, -17, 25, 5, 31, 36, 29, 36, 24, -2, -58, 18, 35, -11, -7, 21, -4, 9, 38, -19, 20, -13, -11, 13, 22, 21, 14, -14, -27, -13, -8, -2, -22, -7, 24, 14, 14, -21, -3, 8, 15, 6, 11, -1, 22, 20, 33, 23, 7, 25, 25, 0, 35, 10, 8, 23, 11, 5, 0, -1, 17, -7, -1, -19, -28, -20, 45, -12, 10, -12, -20, 22, -23, -27, -36, 10, -6, -32, -6, 18, -30, 3, 34, -43, 32, -13, -29, 5, 23, 6, -5, -13, -39, -13, 2, 21, -17, -13, 0, -17, 14, -11, 10, 1, 9, 5, -9, -21, -5, 9, 24, 5, -17, -6, 7, -11, 16, -2, 20, -14, -9, 18, 26, 9, 24, 9, -32, 3, -11, 10, 28, -2, -28, -43, 24, -11, -17, -46, 19, 42, -56, -42, -6, -7, -10, -21, 17, -37, 5, -25, -35, 3, -6, -29, -24, -33, -28, -33, -41, -8, -1, 7, -30, -35, -23, -18, 6, -20, -26, 2, 7, -42, -10, -9, 11, -5, 2, -46, -25, -22, -4, -6, -8, -34, -53, -25, -12, -24, -8, 25, -29, 4, -27, 10, 26, 3, -33, -27, 26, 4, 12, -36, 9, 45, -42, -27, -2, 4, -7, -19, 13, -42, -2, -26, -22, -2, 13, -16, -3, -22, -42, -32, -18, -4, -1, -4, -28, -38, -24, 4, -11, -11, -30, -4, 2, -25, 8, -21, -9, -24, 15, -45, -25, -35, -1, -3, -12, -33, -53, -27, -24, -16, 2, 25, -34, -7, -32, 11, 29, -15, -25, -33, 11, -13, 2, -25, 9, 45, -38, -19, -5, -7, 5, -25, 8, -16, 1, -17, -25, -14, 2, -12, -25, -34, -15, -23, -15, -3, 22, 2, 7, -20, -23, -3, -3, 1, -20, -16, -6, -14, 15, -19, -17, -20, 10, -43, -26, -27, -15, -17, -1, -45, -49, -14, -22, -8, -14, 17, -24, 13, -11, 4, 27, 11, -14, -36, 15, 4, 0, -36, 12, 35, -27, -15, 4, -19, -17, -5, 27, -38, -11, -13, -13, 5, 7, -20, -19, -35, -17, -25, -18, -11, 5, -1, -11, -27, -15, -12, 6, -6, -20, -14, 9, -16, -2, -28, -23, -1, -22, -28, -14, -19, -17, -28, -4, -45, -47, -17, -9, 4, 3, 10, -43, 7, -23, 12, 21, 10, -17, -30, 18, -3, 3, -16, 13, 42, -36, -29, 1, -6, -8, -18, 7, -23, -14, -13, -22, 4, 12, -23, -19, -27, -21, -24, -20, 3, 2, 23, -5, -32, -23, -20, -14, -5, -16, -24, 2, -14, -9, -27, -22, -24, -23, -33, -11, -25, -11, -18, 14, -42, -58, -10, -10, -7, -7, 2, -29, -9, -30, 3, 0, -11, -5, -34, 21, -14, 15, -9, 0, 36, -30, -18, -14, 0, -25, -12, 17, -34, 12, -13, -43, -27, 30, -10, -24, -26, -36, -35, -14, -21, -9, -7, -24, -17, -21, -6, -10, -8, 6, -21, 7, -26, -3, -11, -23, -5, -6, -50, -16, -12, -31, -7, -3, -20, -34, -14, -23, -15, -9, 
  25, -5, 1, -44, -11, -3, 38, -31, -35, -18, 2, 5, -54, -2, 11, -27, -18, 4, -20, 3, 13, 10, -47, -9, -12, -11, -9, -51, -5, 3, -2, -4, -50, 7, 17, 21, -65, 4, 12, 6, 9, 26, -2, 29, 39, -51, -37, 5, 28, -5, -9, -14, 58, -15, -58, 2, 8, -26, -8, -5, -11, 5, -4, 1, 26, 9, -13, -19, -20, 13, 11, -5, -22, -20, 16, -2, -34, 20, -17, -65, 2, 19, 1, 0, 7, 17, 0, -8, 13, 9, 3, -7, -3, -9, 13, -9, 15, -11, 27, 39, -22, 12, -6, 0, -3, 3, -15, -9, -16, -60, 3, -5, -16, 14, 24, -29, 2, 16, -88, 2, -2, -16, -13, -17, -13, -13, -7, 1, -12, 3, 22, -21, -8, 5, -20, -6, -30, -5, 3, 11, -21, 23, -5, -52, 2, -12, -13, -10, -12, -8, 14, -23, 7, 28, 1, -1, 3, 0, -21, 26, -10, -44, -4, 41, -27, 4, -18, -18, -1, -22, 7, -3, -27, -42, 13, 2, -26, -20, 3, -38, 19, 6, -15, -8, 5, 2, -35, -41, -16, 38, -8, 2, -8, 2, 22, -34, 1, -12, 2, 3, -21, 8, -11, 14, 17, 21, -2, -2, -7, 26, -9, -25, 16, -18, 5, -12, -10, 12, -6, -5, 15, -1, -4, 5, 7, -26, -31, 1, 7, 4, -28, -8, 7, -31, -10, 0, -21, 12, -19, -4, -35, -10, -16, -9, -20, 1, -31, -6, -2, -22, 16, 1, 10, 34, 4, 2, -5, 3, -9, -20, -5, -3, 17, -9, -23, 8, -15, -18, 3, 1, -3, 0, 4, 29, -13, -3, 31, -12, -29, 17, -7, -1, -4, -3, -24, 35, 9, 4, 12, 14, -2, -27, 0, -8, -5, 0, -8, -15, -13, 14, 7, -3, -23, -3, -12, -14, -10, 10, -42, 9, -21, 5, -11, -22, 11, 12, 9, 26, -10, -13, -6, -14, -6, -24, -13, -13, 11, -22, -11, -11, -19, -8, 6, 7, -18, 3, 3, 12, -27, 11, 28, 7, -54, 12, -12, -30, -7, 0, -23, 34, 17, -27, 12, 25, -2, -27, -19, -28, 7, 31, 11, 4, 1, 32, 28, -13, -20, 14, 8, -24, -2, -16, 1, -21, -6, -19, 12, -26, 8, 18, -25, 33, 9, -10, 15, -33, 2, -34, -9, 13, -24, -14, -27, -27, -12, 20, -2, 12, -22, 9, -4, -15, -24, 9, 18, 21, -8, 2, -2, 4, 7, -7, 0, 25, 14, 13, 17, 18, 11, -4, 2, -1, 1, 41, 4, 26, -1, 6, 32, 1, -11, 31, 10, -15, 4, 7, 8, 2, 0, -16, 29, -33, 10, 10, 5, 8, 7, -9, 24, -10, 0, -46, 5, 5, -35, -30, -23, -20, -13, 24, -12, -5, -18, -11, -6, -8, -34, -4, 7, -3, 13, 5, -6, 2, -2, -6, 2, 6, 13, 3, 18, -7, 9, -4, 0, 5, -10, 14, 2, 20, -6, 7, -11, 5, -9, 32, -27, -12, 14, -19, -18, 6, -39, -4, -6, -5, -4, -3, -16, -2, 4, -17, 29, -1, 23, -21, 16, 19, -37, 5, -20, 21, -10, 37, -5, 3, 5, -25, 6, 12, -45, -9, -17, -15, 17, 3, 10, 3, 9, -5, -4, -15, 9, -1, 2, 9, 9, 3, 9, 7, 9, 8, -10, 2, 6, -2, -14, 2, 12, 0, -8, -15, 9, 0, -11, 11, -37, -8, 2, 3, 30, -2, -2, 8, 23, -2, 6, -4, 4, -13, 13, 11, -14, 11, -4, 18, 11, -7, 2, 5, 18, -11, 1, 17, -35, -3, -25, -22, -2, -11, 5, 4, -8, -10, 1, -30, -9, 8, 1, 3, 8, 10, 10, 10, 7, -2, 15, -1, 27, 3, 3, -1, 11, 14, -8, -3, 0, -6, -6, 4, 3, -1, 1, -28, 6, 0, 12, 42, 16, -6, 6, 5, 10, -10, 3, 8, -9, 9, 8, 3, 20, -9, 3, 4, 5, 2, 3, 9, 5, -15, -20, -2, -2, -10, -5, 1, -21, -8, 12, -5, -2, 3, 4, 6, -1, -19, 13, -1, -5, 2, -1, -10, 6, 8, 3, -8, -8, 2, -30, -15, 2, 3, -4, -12, 10, 1, -2, -14, 4, 1, 16, 16, 11, 12, 16, -4, 3, -11, -4, -7, -4, 9, 13, 7, 9, -10, -9, 1, 4, 5, -7, 12, 0, 8, -4, 0, -8, -9, -16, 7, -16, -16, 1, 5, -4, 13, 4, -1, 3, -5, -11, 26, -5, 0, 1, -1, 14, 1, -4, -7, -3, 2, -16, 2, 20, 3, -3, 7, 0, 10, 2, -4, 27, 5, 19, 6, 17, 8, 10, 3, -1, -28, -14, -8, -10, 0, -2, -1, -2, 19, 5, -7, 1, 11, -15, 17, 4, 10, 21, -17, 15, -3, 7, 1, -14, -4, 7, 13, -10, -3, 4, 5, -1, 2, 3, -9, 2, 1, -7, 4, -8, 12, -11, 5, -5, -2, -24, -1, 11, -11, -4, 24, -1, -3, -12, -33, -9, 5, -12, 8, 9, -12, 6, 13, -7, -25, 3, -2, -12, 6, -8, -23, -15, 15, -7, -12, -9, 10, -14, 13, 12, -5, 4, 9, 8, 14, 3, 13, 4, 2, 19, 18, 2, 5, 18, 5, 5, 6, 8, -11, 10, 5, -8, 0, -20, 3, 0, 5, -13, -7, -18, -6, 10, -22, 20, 21, -12, 9, -9, -36, 3, -11, -6, 24, 2, -6, 0, -1, 4, -8, -3, -8, -13, -18, -7, -16, -12, 17, -9, 1, 3, 7, -1, -11, -9, -5, 0, 3, 6, 2, -2, 5, 8, -3, 16, 5, -1, 1, 16, 7, 12, 2, 9, 11, -7, 14, -7, 5, -6, 4, -12, 9, 14, -3, 10, 4, -2, -1, -18, 8, -22, 10, 6, -34, 10, 6, -19, -25, -15, -2, 2, -10, 15, -15, -1, 3, 1, -5, -2, -2, -25, 25, -10, -11, 12, 3, 3, 11, 2, -7, 23, 4, -1, 1, -4, -2, -4, 2, 17, 8, -4, 4, -4, 13, 13, 0, 13, 0, -3, -2, 3, 8, -10, 0, -6, -15, 6, 5, 1, 1, -1, -11, -14, 11, 0, 13, -6, -28, 1, -4, 11, 20, -24, -1, 17, -8, 3, -17, 7, 2, -6, -6, 3, 23, 3, 15, 0, 0, 24, -6, 6, 24, 5, -6, 14, 5, 5, -9, -13, 10, 0, -24, 11, -1, 1, 3, -5, 8, 15, 5, -8, -6, -3, 14, -7, 8, -5, -4, -12, -52, -5, 4, -18, -16, -9, -8, -9, 29, -15, -21, -3, -10, 16, 1, 2, 2, -41, 4, 3, 10, -3, -23, -10, 3, 4, 11, -12, 33, 2, 11, 7, -2, 10, 7, 5, 16, 3, 11, 23, 15, 1, 3, 2, -12, -15, -2, 0, 6, 5, -3, -2, -1, -15, -17, -2, -6, -14, 10, 0, 5, 5, -8, 3, -40, -9, 6, -13, -13, 4, -2, -12, 4, 1, -4, -2, -16, 0, 7, 16, 5, -18, -14, -11, 0, -5, -7, -12, 6, -12, -9, -16, 38, 13, 12, 8, -1, 0, 13, 20, 25, -11, -4, 18, -8, 6, -3, 13, -17, -25, 17, -4, 8, 17, -6, -14, 5, -3, -1, -36, -5, -1, -9, -22, -4, -1, -3, 12, 16, -5, 3, -24, 6, -9, -22, 9, 3, -7, 9, -4, 12, 11, -9, 35, -8, -2, -4, 
  -2, 3, -50, 21, -13, 4, 11, 35, 22, 10, 13, 36, 55, -21, -15, 68, 12, 25, 14, 1, -7, 22, -7, -25, -4, -6, 4, 31, -14, 30, 9, -48, 13, 7, 5, -33, 32, -4, -4, -15, -7, -5, -18, -16, -30, 18, -7, -20, -31, 19, -13, 18, -25, -6, 43, 5, 1, 1, -8, 3, 19, 8, 17, -14, -13, -26, -3, 24, 2, -6, 30, -16, 10, 9, 26, 3, 50, -29, -3, 71, 5, 0, 17, 18, 16, 34, -2, 8, 10, -27, 15, 28, -27, 16, 3, -11, -26, -2, 14, -48, -19, -3, 8, -12, -7, 7, -16, -10, 21, 12, 10, -8, 21, 9, -5, 23, 15, 4, 10, 12, -17, 10, 2, 2, 12, -5, 19, -2, 2, -28, 15, 16, -12, 4, 15, -28, 2, -58, -4, -36, 16, -36, -1, 40, -11, -29, 12, 6, 34, 27, -16, 10, 5, -29, 5, 20, -35, 44, -8, -8, -26, -11, 0, -39, -57, 0, 7, 7, -8, 28, 12, -14, 18, -14, -2, 8, 19, -2, 12, 23, 23, 1, 0, 6, -10, 17, -6, 5, -7, 9, 38, -9, -15, -12, -8, -12, 9, 21, 0, 0, -10, -37, -20, -75, -16, -20, 3, -9, -1, -38, 18, 14, 6, 27, 3, 23, 3, 10, 8, 2, -6, 46, -17, -11, -30, 24, 22, -57, -19, 3, -5, 1, 3, -14, 3, -8, 12, -33, -3, 2, -22, 20, -6, -4, -24, -2, 18, 5, -4, -25, -18, -1, 1, -4, 7, -13, -9, -12, 26, -28, 1, 14, -13, 9, -17, -6, 10, -40, -21, -8, -7, 3, -12, -26, 32, 5, -18, 2, 19, -6, -8, 8, 1, 15, 19, -1, -22, -3, -13, -2, 19, -22, 6, 15, -19, 1, 2, -3, -3, -19, 16, 19, 2, -4, -6, 4, 8, 7, -11, 8, -1, 0, -1, 7, -15, 5, -6, -30, -3, 4, -14, -6, 15, -40, 6, 21, 22, 29, -30, -7, 7, -10, -1, -1, -5, 21, -6, 6, 38, 22, -16, 2, 6, 0, 0, -8, -13, 15, 0, -8, -15, -6, 8, 7, 11, 15, 21, 7, 4, 7, 9, -12, -8, -26, 18, 9, 10, 5, 7, 10, 15, 17, -18, 18, 9, 9, 22, 9, -14, -15, -14, -8, 8, -5, -19, 29, -2, -42, -21, -19, 2, 48, -7, -20, -17, -41, 12, -31, -12, 13, 2, 17, 18, 25, -28, -13, 1, -11, -3, -34, -17, 16, 9, -28, -31, -17, 24, 9, -2, 2, 1, 14, 16, -5, 21, 13, -7, -32, 19, -16, -4, -15, -4, 6, -33, -12, 9, -3, 28, 5, 4, 14, -4, 2, 17, -17, -2, 16, -29, 4, 1, -12, -12, -17, 1, 20, -15, -21, -26, -34, 6, -22, -11, 7, 9, 2, 13, 2, 0, 0, -19, 8, 1, -25, -13, 21, -4, -22, -36, 14, -1, 8, -5, -16, -16, 4, 9, -9, -1, 3, -20, -27, 34, -6, 0, -17, -1, -13, -10, -4, 16, 14, 18, -18, -14, -12, -12, -9, 9, -7, -11, -11, -51, -16, 3, 4, 4, -34, -10, -31, -24, -36, -27, -36, 8, -8, -33, 30, 6, 10, 33, -13, -7, 15, -14, -4, 9, -27, -11, 3, -10, -6, -28, 1, -1, 21, -18, -8, -29, 13, -2, 4, 9, 3, 10, -30, 25, -47, 8, -2, 9, -7, 5, 6, 31, 15, -1, 15, -14, -16, -3, -9, -5, -18, 11, -9, -31, -9, -9, -8, -6, -10, -5, -19, -43, -29, -21, -28, 0, -10, 13, 10, -2, 3, 28, -7, -25, 3, -15, 8, 3, -1, -22, -15, 1, -17, -3, 5, 8, 14, -10, -19, -28, 28, -9, 3, 14, 7, 18, -14, -5, 1, 11, -6, 1, -28, -3, -18, 13, 9, -15, -2, -14, -3, 0, -18, -19, -34, 14, -9, -19, -20, 1, 5, 8, 11, -4, -17, -31, -5, -1, -16, -9, 0, 8, -2, -3, 4, 29, -10, -29, 3, 11, 1, 3, -4, 4, 16, 7, -6, -11, 10, 7, 20, -3, -2, 1, 15, -10, -4, -14, -1, 20, -26, -23, -12, 21, -20, 27, 14, 3, 19, 5, 12, -7, 1, -16, 22, 14, -11, 8, -5, 1, 3, -1, -14, -9, 4, 9, 10, -3, 7, -23, -1, 9, -16, -18, 16, 11, -7, 6, -16, 22, 13, -24, -10, -1, -5, 11, -8, -5, -7, -9, -25, -6, 10, 1, 2, 10, -1, -5, 6, -1, -4, -11, 17, 2, -11, -7, -7, 0, 10, 29, 15, 3, 5, 1, 20, 3, 18, 13, 31, 7, -8, -10, 7, 7, -9, -14, -39, -9, 8, 7, 0, 4, 0, -37, 0, 5, -30, -12, 4, 5, -3, 7, -22, 18, 9, -31, 4, -11, -11, 9, -8, -2, -9, -2, -5, -5, -1, 5, 13, 7, 4, -1, 2, 4, -6, 6, 11, 3, -17, 3, -11, -4, 12, 5, -3, 5, -14, -10, 21, 8, 7, -3, 2, 14, -7, 11, 1, -3, 7, -45, -21, -4, 10, 13, -1, 23, -6, -32, -2, -5, -34, 0, -3, -11, 6, 22, -38, 12, 8, -17, 9, -8, -5, 12, -17, -1, 15, -13, -7, -20, 4, 9, 17, 11, -9, -14, 2, 24, 5, 9, 22, -3, -22, 26, -17, 11, -7, 8, -9, 0, -30, -7, -7, 10, -11, 3, -4, 29, -5, 2, 2, -5, -1, -25, -19, -2, 29, 18, -3, 16, -8, -26, 0, 0, -35, -5, 2, -10, -1, 19, -18, 6, 0, -26, 5, -28, -10, 15, -9, -15, 6, -4, 1, -15, -6, 11, 16, 9, -2, -19, 16, 23, 3, 5, 39, 15, -31, 36, -40, -9, 3, 17, -8, 37, -7, 27, 9, -6, -7, 13, 6, 20, 7, 6, 3, 3, 4, -23, -21, -17, 24, 31, 4, 10, -1, -7, 12, 18, -71, 8, 12, -13, 7, 13, -17, 8, 4, -14, 14, -14, 16, 3, -2, -12, 8, -14, -3, -6, -7, 19, 17, -9, -23, -26, 15, 11, -2, 3, 8, 25, -7, 7, -31, 7, 7, 6, -4, 27, 4, -4, 1, -2, 11, 11, -1, 0, -9, -11, 8, 10, -2, -15, -11, -7, 24, 24, 3, 20, -2, -24, 7, 18, -52, 12, 22, -2, -6, 4, -3, -3, 1, -11, 4, 1, 22, 2, 1, 0, 17, 10, 14, -9, 10, 29, 11, 9, 5, -30, 28, 7, -7, 6, 7, 0, 5, 2, 2, 20, -6, 15, 4, -6, -12, 31, 1, 6, 17, -2, -19, 13, 2, 21, 8, 5, 15, -8, -16, 1, 12, 14, 0, 14, 2, -4, -23, 8, -41, 11, 11, -15, -7, 6, -8, 15, -1, -9, 15, -1, 17, 13, 0, -3, 2, 12, -2, 7, 2, 15, -18, 3, -5, 9, 13, 6, -6, 4, -2, 1, 3, 1, 15, 10, -7, 25, 20, 18, -6, 10, 9, 10, 5, 2, 3, 11, 4, 19, 15, 19, 12, -4, -27, -16, 3, 6, -21, 13, -11, -30, -31, 5, -29, -7, 5, -7, 15, 11, -13, 15, -4, -22, 10, 7, -11, 8, 17, 31, -13, -12, -1, -5, 5, -5, -5, 7, 23, 27, -10, -4, -11, 7, -6, 6, -23, -5, 26, 22, 1, 13, 4, -3, 17, -14, -4, -11, 15, 21, 9, -6, 24, -16, 10, 15, 1, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 8,1216 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0051659396849572659, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[16] = { -939, -3208, -2140, -2, -66, -1516, -1306, -2959, -2577, -1542, -2787, -2306, -1167, 950, -3325, -1280, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.00011587049812078476, 8.5678715549875051e-05, 7.9084187746047974e-05, 0.00012362923007458448, 0.00011268167872913182, 6.6132844949606806e-05, 0.00010422284685773775, 8.5226849478203803e-05, 8.4145765868015587e-05, 9.2315662186592817e-05, 0.0001111203309847042, 8.7674292444717139e-05, 9.6605195722077042e-05, 9.4214694399852306e-05, 9.4063550932332873e-05, 8.4529281593859196e-05, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[16*3*3*8] = { 
  /* [0][0][][] */ 10,24,26,-15,5,-40,20,-18, -27,9,-27,3,-96,6,-5,-59, 56,49,5,-50,-33,-77,22,-66, 
  /* [0][1][][] */ 17,5,41,-4,20,-29,-2,-45, -25,-5,-30,24,-127,-4,14,-74, 23,77,27,-5,-11,-23,11,-82, 
  /* [0][2][][] */ 9,-12,-4,-39,30,-31,45,1, -3,29,-75,14,-127,20,-68,-62, 44,36,15,-16,-10,-59,20,-34, 
  /* [1][0][][] */ -21,66,24,-37,-1,-90,9,-9, -17,-77,21,25,70,79,44,53, 24,0,-62,-28,-26,13,-80,-40, 
  /* [1][1][][] */ -9,52,41,-65,-19,-127,70,-44, -22,-40,56,45,-12,44,25,-32, -3,-3,-79,-27,-25,27,-107,-71, 
  /* [1][2][][] */ -1,34,41,-75,-4,-76,32,-66, -61,-37,15,12,21,63,29,10, -26,-45,-24,0,26,-5,-74,-48, 
  /* [2][0][][] */ -27,69,-56,56,-38,46,-36,12, 24,14,33,-13,91,-30,-17,54, 41,-47,22,-12,-10,-64,50,-18, 
  /* [2][1][][] */ 44,78,-119,32,-127,48,-31,-44, -106,-29,-37,-18,32,-5,-54,-24, 23,-110,25,-35,11,-121,-4,-32, 
  /* [2][2][][] */ 71,48,-104,23,-111,37,-68,-91, -114,-45,-33,71,2,55,-58,34, -1,-71,-16,-16,-18,-119,-27,-20, 
  /* [3][0][][] */ 14,-30,26,-31,53,-30,6,52, -1,-15,-95,-6,-38,-13,-122,-19, -41,-34,9,-15,25,12,13,37, 
  /* [3][1][][] */ 11,9,5,-17,14,-34,-4,12, -56,-16,-119,-13,-46,20,-127,12, -35,-53,31,-10,-13,19,27,41, 
  /* [3][2][][] */ 22,51,24,-37,33,-34,25,-18, -96,-29,-102,5,-52,1,-104,17, -20,-59,29,-46,8,-7,23,15, 
  /* [4][0][][] */ 22,-36,-9,15,-45,-43,6,-27, -7,36,-110,9,-110,24,-82,-51, -42,16,8,-1,-17,42,-11,25, 
  /* [4][1][][] */ 9,-6,-8,27,-46,-34,31,-117, -49,59,-44,40,-84,56,-82,12, -47,-5,-6,-15,17,-21,8,15, 
  /* [4][2][][] */ 28,-5,-17,18,-60,-1,0,-127, -67,16,-38,24,-37,42,-39,49, -38,29,-10,-44,38,-40,-19,53, 
  /* [5][0][][] */ -47,66,0,65,-25,-69,-35,22, -117,68,-27,60,18,61,-52,-14, -13,86,8,113,-9,5,-15,-12, 
  /* [5][1][][] */ -41,51,-44,-6,-22,-43,-23,-41, -127,17,-32,106,12,40,15,33, 15,64,-14,101,-26,13,30,-32, 
  /* [5][2][][] */ 24,-9,-47,72,-74,6,-15,-60, -71,65,-88,120,-77,-11,-24,-65, 3,52,-41,71,-9,10,-36,-63, 
  /* [6][0][][] */ -28,22,-14,42,-76,47,-1,-21, 41,-21,35,-110,-18,-101,21,-26, 8,-12,-75,1,-105,-16,-49,-115, 
  /* [6][1][][] */ -37,3,52,13,-52,40,9,-15, 80,13,-22,-92,8,-89,16,-47, 83,13,-24,-20,-87,-31,1,-127, 
  /* [6][2][][] */ -10,5,34,13,-31,55,24,-6, 58,22,-3,-82,19,-82,1,-13, -1,-10,-7,8,-67,-38,-23,-115, 
  /* [7][0][][] */ -12,62,61,-97,4,-44,74,1, -13,10,8,127,-3,41,0,24, -36,28,-43,3,15,7,-26,4, 
  /* [7][1][][] */ -27,52,19,-95,43,-52,25,-4, -23,-20,4,58,-19,32,27,39, -66,4,-53,13,-18,-4,-66,36, 
  /* [7][2][][] */ -76,-40,-1,-26,-5,-41,-24,22, 3,-64,17,17,43,-26,7,28, -41,7,-57,23,-47,-11,-40,-11, 
  /* [8][0][][] */ 8,-74,54,-16,48,14,50,77, -35,-17,-106,-2,-24,-23,-113,18, 6,-29,36,-77,8,-54,-1,-11, 
  /* [8][1][][] */ -8,-59,32,-19,27,0,34,23, 6,3,-81,-3,-32,-3,-112,-16, 11,-9,-13,-58,7,-76,39,-25, 
  /* [8][2][][] */ -47,-56,55,-35,56,73,17,35, 5,-28,-13,12,12,-43,-55,17, 52,52,-1,-56,1,-127,23,-59, 
  /* [9][0][][] */ -35,3,0,47,19,64,-29,27, -6,-79,-11,-75,25,-103,-13,13, -22,-49,-16,51,-58,40,2,-4, 
  /* [9][1][][] */ -73,55,-84,-14,-60,36,-127,26, -9,-100,21,-84,38,-72,-15,5, -10,3,4,11,-38,29,-3,-11, 
  /* [9][2][][] */ -89,78,-65,16,-63,32,-102,6, 17,-99,21,-43,15,-25,-4,58, 3,28,-74,10,10,62,-68,-4, 
  /* [10][0][][] */ -40,-13,-36,6,13,-13,-33,-5, -14,-41,0,17,2,4,-8,33, 5,-1,-104,19,-20,24,-106,-26, 
  /* [10][1][][] */ -21,-1,-43,59,24,12,-33,7, 10,-34,16,7,-8,35,39,61, 13,20,-104,15,37,22,-127,-26, 
  /* [10][2][][] */ 18,-4,-19,40,19,-32,3,-6, -27,3,38,5,4,68,10,-9, -10,12,-112,21,18,24,-89,-42, 
  /* [11][0][][] */ -2,51,-29,69,40,68,-30,-25, -19,-64,-5,2,18,-49,18,42, -75,15,-127,31,-58,-1,-121,-3, 
  /* [11][1][][] */ 47,-3,66,-6,98,1,51,6, 16,-39,-53,-6,-82,-37,-12,-73, -29,16,-58,8,-68,-10,-24,-13, 
  /* [11][2][][] */ 17,-101,39,-7,70,-29,33,15, 5,-19,-70,7,-85,-4,-68,-38, -7,33,-4,17,-32,-10,25,48, 
  /* [12][0][][] */ -84,22,-40,77,-8,24,-38,-6, 9,-8,-17,-25,-18,-5,-21,-16, 39,26,12,26,-3,-61,25,9, 
  /* [12][1][][] */ -110,-24,8,27,42,51,-9,42, 4,-56,15,-33,33,-36,6,-5, 28,38,32,-36,-14,-106,28,-34, 
  /* [12][2][][] */ -60,-31,2,-3,30,11,-3,19, -24,-59,2,-7,23,-2,3,-12, 83,12,26,-57,-17,-127,24,-57, 
  /* [13][0][][] */ 20,6,-12,15,-76,-6,-5,-105, -17,60,-89,26,-81,2,-99,-21, 16,-60,45,-27,41,-93,20,21, 
  /* [13][1][][] */ 13,8,-58,1,-118,11,-28,-123, -17,8,-45,-9,-50,53,-24,-8, 28,-66,40,-57,23,-111,44,-3, 
  /* [13][2][][] */ -12,69,-113,88,-127,65,-110,-49, 17,7,2,-6,21,-24,-24,-5, 8,42,9,-12,-15,-74,8,-21, 
  /* [14][0][][] */ 58,41,-14,-46,-85,12,-9,-127, -23,-39,52,-10,21,39,21,1, 2,4,-39,3,10,1,-62,-38, 
  /* [14][1][][] */ 73,18,-62,-23,-89,31,-33,-115, 5,-36,18,9,36,45,36,19, -22,14,-95,-40,-4,13,-104,16, 
  /* [14][2][][] */ 28,54,-49,-23,-44,42,-42,-79, -19,-88,14,-20,47,31,2,-4, 9,31,-84,-20,-25,18,-72,-6, 
  /* [15][0][][] */ -122,-51,37,-69,63,-34,-21,68, 18,-22,63,-82,48,-127,32,3, -31,-27,-40,-9,-78,-4,-29,-26, 
  /* [15][1][][] */ -86,-76,25,-82,51,26,-19,16, 7,-78,34,-67,19,1,33,67, 48,-26,-19,-20,-51,-36,-18,-68, 
  /* [15][2][][] */ -45,-58,-18,-100,3,-57,-3,66, -24,-38,55,-31,70,-25,8,18, 76,-25,43,-11,-32,-44,1,-27, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant6_scale = { 16, { 0.0044937841594219208, 0.0033228618558496237, 0.0030671076383441687, 0.0047946898266673088, 0.0043701129034161568, 0.0025648178998380899, 0.0040420554578304291, 0.0033053371589630842, 0.0032634097151458263, 0.0035802612546831369, 0.004309559240937233, 0.0034002559259533882, 0.0037466215435415506, 0.0036539111752063036, 0.0036480494309216738, 0.0032782836351543665, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[8] = { -965, -1209, -1842, -911, -1419, -1989, -1354, -943, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0001559028314659372, 0.00018167427333537489, 0.00019517040345817804, 0.00016789155779406428, 0.00022163819812703878, 0.00014556439418811351, 0.00015029654605314136, 0.00016974203754216433, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[8*3*3*1] = { 
  /* [0][0][][] */ 9, -95, -74, 
  /* [0][1][][] */ 35, -127, -64, 
  /* [0][2][][] */ 78, -99, -98, 
  /* [1][0][][] */ -48, -99, 68, 
  /* [1][1][][] */ 68, -127, 98, 
  /* [1][2][][] */ -48, -33, 73, 
  /* [2][0][][] */ 127, 64, -88, 
  /* [2][1][][] */ 67, 22, -61, 
  /* [2][2][][] */ 96, 41, -69, 
  /* [3][0][][] */ -112, 69, -37, 
  /* [3][1][][] */ -127, 111, -76, 
  /* [3][2][][] */ -9, 26, 17, 
  /* [4][0][][] */ 127, 21, -8, 
  /* [4][1][][] */ 124, 15, 8, 
  /* [4][2][][] */ 81, 39, 7, 
  /* [5][0][][] */ -127, 102, 74, 
  /* [5][1][][] */ -74, 66, 62, 
  /* [5][2][][] */ -123, 90, 67, 
  /* [6][0][][] */ 123, 122, -127, 
  /* [6][1][][] */ 83, 43, -104, 
  /* [6][2][][] */ 54, -8, -122, 
  /* [7][0][][] */ 87, 96, 53, 
  /* [7][1][][] */ 93, 127, 66, 
  /* [7][2][][] */ 29, 103, 11, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant8_scale = { 8, { 0.0035787781234830618, 0.0041703660972416401, 0.0044801724143326283, 0.0038539813831448555, 0.005087745375931263, 0.0033414573408663273, 0.0034500847104936838, 0.0038964597042649984, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,74,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.043563146144151688, } };
const TfArray<1, int> quant9_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,74,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.02578461542725563, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,37,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.02578461542725563, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,37,7,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.042037125676870346, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,19,4,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.042037125676870346, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,1216 } };
const TfArray<1, float> quant14_scale = { 1, { 0.042037125676870346, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.20790812373161316, } };
const TfArray<1, int> quant15_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,6,5 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,4,3 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 962, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 9728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7696), (TfLiteIntArray*)&g0::tensor_dimension9, 962, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 7696, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7696), (TfLiteIntArray*)&g0::tensor_dimension11, 2072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 4144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4144), (TfLiteIntArray*)&g0::tensor_dimension13, 1216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 1216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1216), (TfLiteIntArray*)&g0::tensor_dimension15, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 17, };
const size_t tflNodes_subgraph_index[] = {0, 8, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  16, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 8; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
