/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 07.05.2025 05:31:10

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 8464;
#else
constexpr int kTensorArenaSize = 7440;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const TfArray<1, float> quant0_scale = { 1, { 0.058445822447538376, } };
const TfArray<1, int> quant0_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 49, 13, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[6] = { 1, 6, -4, 9, 13, 3, };
const TfArray<1, int> tensor_dimension3 = { 1, { 6 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00023794516164343804, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[6*832] = { 
  -2, 41, -16, -7, -15, 3, 6, 0, -15, 36, -12, -9, -2, -3, -10, 1, -2, -11, -4, 6, -13, -3, -31, 9, -4, -23, -16, -4, 24, 4, -22, 2, -4, -9, -22, -10, -20, -9, -25, 14, 7, 15, 23, 3, -36, -27, 9, -7, -8, -12, -17, -18, 46, -4, 14, -21, -19, -12, 3, -12, -2, 52, -20, -26, 11, -8, 1, -3, 2, 4, -6, -1, -6, 15, 3, -5, 5, 1, 17, -4, 1, -4, -11, 11, -11, -1, -10, 9, -5, -2, -3, -29, 30, -9, -26, 32, -7, -7, -12, 10, -18, 18, 4, 10, 21, -6, 10, -20, -12, -15, -3, 0, -39, -12, -6, 16, 45, -17, -11, -27, -24, -10, 32, 18, 13, -23, -8, -24, 4, 6, -6, 19, -16, -4, 6, -7, -14, 11, -9, -10, -3, -19, 2, -17, -14, 43, -3, 1, -4, 2, 6, 5, -7, 4, -19, -21, -2, -17, -6, 16, 6, 1, -15, -6, 0, 11, 1, 5, -2, -10, -9, -9, -13, -9, 19, -6, -29, -20, -9, 3, 28, -32, -13, -9, -22, 23, 32, 2, -5, -21, -31, -18, -5, -12, -4, 19, -6, -8, 2, -8, 9, -20, -6, -18, -2, -15, 3, -8, 9, 11, 10, 21, -16, 31, 10, 26, 2, -8, 6, -15, 8, -16, 0, 7, -8, -8, -11, 18, -8, 15, -18, -2, 26, 32, 8, -19, -22, 20, 0, -9, -8, -13, -10, -9, -4, -24, 2, -8, -18, 8, 35, 9, -7, 18, -2, 3, -24, -4, 0, 31, -4, 11, 29, -2, 13, -18, -1, -2, -8, -15, -10, 4, -2, 17, 14, -13, -3, 4, 24, -4, -13, -4, -1, -3, 3, -7, 24, -8, -5, -14, 12, 26, 8, 11, -11, -1, 6, 45, -7, -11, 28, -11, -16, -23, 5, -5, 1, -10, -4, -16, 28, -13, -2, -11, 26, 8, -6, 5, -12, 12, -21, -14, 0, 3, 1, -4, 14, -10, 3, -15, 2, -28, -5, 16, -9, -7, 6, -12, 25, -7, -19, 56, 31, 0, -17, 16, -12, -4, -1, -3, 4, -23, -4, 29, 29, -17, 37, -5, -15, -7, -11, -5, -10, -19, 15, -14, -7, -5, -2, -3, -13, -25, -9, -17, 15, -10, 6, -7, -4, 2, 21, -9, -19, -15, -14, -3, -4, 16, -3, -18, -2, -6, 21, 1, 2, -10, -3, 7, -5, -4, 3, -17, -2, -13, -6, 17, 8, -11, 1, -9, 9, 12, 0, -8, 7, -9, -13, 8, 4, -13, 30, 17, -15, 22, 35, 1, -16, -12, -4, 13, -16, -19, -11, -35, -10, -13, 11, -11, 25, -13, 4, 8, -1, 0, -5, -5, -19, -23, -7, -5, 5, 4, -1, -15, -6, 2, 0, -10, -7, 7, 8, 22, 0, -7, 24, -24, -6, 4, -9, 13, 2, 4, -3, -13, 13, -6, -13, 2, 0, -1, -1, 28, -1, -13, 24, 5, 4, 17, 21, 20, -12, -9, -8, 25, -19, -5, -14, 3, -9, -13, 36, 9, 3, -3, 7, 2, 13, -16, 5, -12, -14, -10, 19, 0, 15, 14, 2, -13, 35, -3, -3, -3, 0, -6, -6, -5, 3, -8, 5, 5, -20, -2, 2, 15, 13, 7, -7, 2, 22, -1, -9, 16, -2, 22, 4, -1, 12, -7, 6, 3, 12, -8, -6, -5, -4, 16, 0, -11, -7, -10, -4, 25, 15, -4, 5, 10, 7, 16, -4, -2, -1, 4, -2, -1, 0, -6, 5, -4, 12, -1, 6, -18, 16, 1, 12, 5, -11, -4, -7, -6, 22, 3, 25, -18, -21, -2, 0, -6, 11, 7, -9, 1, 15, 3, 20, 17, -21, 0, -7, -16, 6, 15, -15, -8, -4, 4, -3, -12, 5, 23, -10, -19, -10, -17, 17, 10, 4, 10, 16, 0, -2, -2, -8, -17, 0, -14, 0, 18, 20, -3, 13, 12, -5, -7, 8, -22, -10, -7, 4, -6, -9, -20, 5, 8, 24, -7, 3, -23, -11, -3, 0, 3, 1, -14, -8, 3, 4, 0, 10, -3, -21, 17, -22, -6, 0, 33, -15, -6, -16, -8, -6, -11, -8, 10, -21, -22, 0, -9, 0, 1, 2, 0, -16, 3, 18, 3, 2, -3, -1, -5, 16, 30, 22, -7, -8, 11, -2, -14, 42, 21, 3, 6, -13, 32, -20, -26, -11, 12, 28, -1, 14, -11, -12, 8, -14, -7, -10, -14, -9, -7, -5, -13, 28, 3, -11, 52, -18, -2, 1, 0, -6, -20, -24, -15, 35, 14, -9, 30, -24, -11, -12, 2, -13, -1, -11, -8, -9, 3, 6, -29, -10, 14, 4, 4, -4, 7, 7, -24, -10, 10, 20, -16, -5, 16, -18, 13, 26, -6, -11, -41, 23, 30, -3, -3, -17, -6, 0, -23, 9, -4, -2, 0, -33, 0, -9, -18, 25, 42, -11, 18, 11, -1, 1, -2, -5, -11, -14, 5, 9, 15, -7, 14, -29, -36, 2, 15, 9, -14, -5, -5, 31, -4, -20, -22, -15, -2, 1, 5, 12, -1, -13, -28, 
  24, 2, -1, -10, 2, -5, -5, -6, -2, -7, -5, -17, 23, 17, -6, 28, 13, 12, 7, -20, 4, -18, 5, -6, -2, 1, 9, 9, 3, -13, -6, -5, 16, -1, 14, 40, -8, 7, 9, -11, -13, -5, -1, -8, 7, -5, -13, 5, -16, 13, -1, -8, -1, -7, -12, -13, -7, 18, 9, 5, 13, -11, -6, -31, -1, -8, -10, -17, -7, -9, 16, 9, -13, 27, -11, -13, 19, 2, -13, 10, 3, -2, -2, 16, -13, -28, 7, 2, 1, 1, 1, 20, 1, 13, -21, 3, -7, -13, 24, 2, -11, 7, -2, -3, 10, -12, -5, -15, -13, -17, -12, -6, -8, 6, -8, 75, 32, 32, -19, 21, 20, -4, 0, 28, -10, -3, 20, -25, 36, -5, -13, -21, 9, -11, -5, 1, -7, 2, 30, -3, 51, 4, -1, 11, 4, 20, -11, -11, -4, -4, -1, -5, -1, -15, 11, 15, -3, -12, -16, 6, 3, -13, 28, 32, 3, -3, -8, 0, 7, 23, -6, 8, -9, 0, -9, 14, -9, 19, 5, 31, 16, 17, -23, 20, 13, 0, -10, -12, 31, -7, -3, -12, 13, -2, 10, -22, 2, -6, 11, 13, -16, 13, 32, 11, 41, 2, 6, 5, -13, -11, -13, -3, -2, 0, -13, -1, 1, -6, -2, 1, -7, -15, -1, -7, -10, -8, 7, -1, -14, 10, 4, -1, 15, 4, 0, -12, 4, -4, 10, 39, -4, -5, -21, 16, -16, -4, 2, 5, 16, -3, 10, -10, 41, -17, 1, 11, 17, -12, -1, -4, -17, -6, 6, -9, -1, -4, 10, 9, -2, 13, 23, 17, -4, -2, -7, 11, -1, -16, -18, -6, 26, 2, 13, 12, -5, -20, -1, -2, -4, 8, 6, 2, -2, -6, -3, 29, 0, -16, -20, 8, -2, 12, -1, 20, 0, -11, 5, 24, -8, 2, -15, -13, -3, 5, 16, -12, 18, -10, 9, -8, 28, 7, 5, 30, -5, -17, 7, 3, 10, -2, -14, 5, -10, -5, 29, 6, -2, -4, -14, -10, -7, -22, 2, -9, 46, -2, 1, -3, -16, -13, 0, 19, -10, 20, 5, 11, -8, 0, -5, 35, 3, -5, -6, 20, -7, -6, 12, 21, 6, -15, 0, 12, -11, -9, 7, 3, 2, 21, 16, -22, 31, -4, 1, 12, -5, 5, -3, -1, -15, -1, 18, -8, 9, -15, -17, -20, -2, -26, 4, -7, -1, -21, -15, -13, -1, -10, -15, -11, 27, -11, -23, -4, 18, -11, 8, 0, -2, -10, -23, 2, -9, 21, 15, 2, -11, -4, -5, -18, 0, -29, 18, 27, -1, 5, 0, 2, -8, 1, -10, -4, 31, 17, 16, -14, 34, -19, 15, -7, -24, 26, 5, 17, -3, 11, 19, -3, -10, -3, -17, 7, -19, -8, 10, -3, -11, -23, 5, -11, -14, -11, -10, -12, 0, -11, -16, -17, 44, -28, -14, 4, 4, -16, -21, 8, -11, -2, 14, -19, 3, -1, 14, 1, -13, -17, 38, 10, -4, 1, 25, 2, -17, -9, -3, 2, 11, 13, -20, -21, 6, -2, 4, 28, -7, 17, 2, -4, -11, 7, 1, -3, -6, 0, -16, 2, 2, -7, -7, -12, -4, -1, 9, -8, -12, 0, -9, -10, -8, -11, -13, 2, -5, -18, -11, -15, 3, -9, -14, 10, 1, 10, 15, -5, -9, -6, -12, -11, -12, -1, 5, 2, -15, -19, -2, -1, -21, -10, 7, 1, -15, 47, -9, 9, -4, -8, -8, -1, -16, -6, 12, 5, -1, 12, -7, 3, 8, 3, -12, 11, -10, 17, -12, 0, 9, 4, -5, -17, 11, 19, -10, -3, -6, 9, 0, -8, -7, -14, -4, 1, 9, 13, -19, 17, -14, 11, -9, -8, -4, 3, -24, -1, -15, -2, 8, -2, -6, -6, -17, -11, -1, -11, 8, 2, -6, 16, 0, -5, 25, -25, -20, 28, 0, -8, 22, 34, -1, -15, -13, 22, -19, 21, 4, 40, 3, -14, -33, 19, -5, 19, -11, -9, -7, 10, 9, 22, -13, -4, 5, -27, -7, 11, 16, -7, -3, 2, -2, 28, -6, 16, -7, 3, -4, 31, 13, -6, 2, 34, -17, 1, -10, -2, -24, -13, 6, -16, 11, 0, -1, 15, 3, 0, -11, -7, -13, 3, -12, 0, 8, 17, -18, -6, 1, 17, -10, 61, 15, 14, -2, -9, -31, 14, 12, 8, -6, 9, -9, 6, 27, 13, 7, -13, 20, -9, -3, 36, 8, -13, 0, 6, -1, -7, -7, 17, 2, -9, 18, -6, -6, -16, -8, 8, 0, -4, -3, 7, -13, 21, 14, 21, 32, 10, 15, -1, -3, -5, -6, -21, -10, 17, 31, 13, -17, 11, -3, -8, 22, -8, -3, 34, 75, 9, -2, -29, -4, -6, 28, -4, 2, -9, 23, -3, 0, 9, 7, -14, 7, 15, -7, -14, -3, -17, -6, 27, 34, 0, 38, -6, 28, -9, 25, -1, 3, -2, -6, 14, -9, 10, -15, 6, -14, -10, 18, 17, 18, 4, 6, 3, -7, -13, -7, 30, 14, 3, 
  -16, 23, -31, -42, 11, 38, -16, 23, 21, -6, -9, 14, -22, 8, 14, -27, -18, 8, -1, -17, -8, 4, -8, 0, -28, 22, 11, -24, 18, -2, -13, -38, -10, -13, -8, -17, -4, -4, 1, -14, -18, 3, -30, -21, 19, 20, -2, 4, -21, 44, -11, 5, -7, 4, 8, 67, -19, 11, -27, -5, -20, -6, -17, 127, -9, 14, 35, -25, -12, -8, -2, 17, -10, -9, -14, 40, -27, -4, -10, -16, -10, 7, -23, 1, -3, -12, -20, -20, -18, 21, -3, 27, -7, -9, -12, -20, -6, -8, -3, 3, 63, 4, -24, 0, -20, 7, -24, -10, 13, 10, -3, -26, -9, 7, -26, -6, -1, 1, -5, 33, -8, -7, -17, -20, -7, 15, -1, 78, -26, 10, 15, -26, -12, 0, -9, 7, -16, -3, -14, 4, -29, -4, -9, -12, -18, -26, -29, 8, -19, -4, -18, -28, -7, -2, -9, 28, 15, -4, -33, -19, -23, -4, -17, -6, 46, -20, -14, -6, -3, 4, -12, -20, 12, 0, -18, -12, -14, 0, -27, 33, -22, -3, -12, -13, 0, 0, -3, -7, -13, -29, -18, 34, -30, 11, -16, -19, -3, 11, -1, 10, -25, 4, 6, 30, -16, -18, -15, 35, -10, -16, -8, 34, -17, -7, -2, -20, 1, 33, 17, -3, -5, -7, -17, -21, -12, 15, -12, -21, 47, -24, 7, 2, -6, 10, -7, 5, 2, 39, -17, -5, 4, -15, -12, 27, -21, 5, 3, 3, -2, -21, -5, -19, -23, -13, -12, 8, -1, 6, -2, -23, -5, 22, -20, 3, -9, -1, -27, 17, 22, -5, -8, 40, -13, -16, 2, 14, -6, -5, 13, -17, -10, 34, 8, -5, -12, -10, -14, -12, 29, 16, -4, -19, 19, -18, 9, -1, -4, -11, -4, -23, 14, 31, 9, -7, 20, 1, -21, 3, -24, -3, 16, -15, 5, 14, 14, 7, -9, 8, -13, 1, -11, -10, -24, -2, -6, 7, -9, -11, -8, 40, -2, -3, 49, -4, -25, -4, -24, 0, -17, 41, -11, -1, 9, 7, -8, 10, -10, -2, -25, -10, -14, -11, -8, 11, 1, -16, -14, -24, -8, -7, 16, -12, 4, -5, 3, 2, 9, 9, 24, -8, -26, 29, -27, -47, 79, -17, 7, -6, 20, 22, -14, -6, 11, 32, -8, -20, -21, 11, 46, 4, -13, -12, -24, 27, -8, -21, 38, 4, -27, -8, -22, -12, 8, 27, -20, -7, 11, -1, -2, -19, 2, 5, -10, -3, -22, 0, -4, -3, 1, -19, -8, -10, 24, -5, -8, -22, -13, 41, 22, -2, 18, -10, 29, -26, -13, 24, -9, 0, 79, -35, 20, -27, -18, 28, -29, 41, 24, -26, 8, -11, -18, -10, -8, 1, -4, -16, -9, 16, 9, -10, 13, -7, -5, 16, -20, 29, -3, 50, 12, -16, -13, 14, 7, -29, -13, -13, -12, -19, -15, 17, -9, 16, -11, -15, -13, -10, 26, -8, 36, -17, -26, 5, 20, -9, 27, 8, 16, -20, -4, -19, -14, 1, 104, -6, 10, -34, -6, -8, -12, 6, 33, -22, 29, -7, 2, -9, -3, -7, -8, 3, -12, 2, 30, 0, 10, -12, -5, 9, -12, 21, 29, 1, -5, -16, -5, 22, 36, -25, -17, -6, -11, -17, -15, 6, -20, 31, -10, -12, -12, -19, 19, -11, -1, -2, 13, 43, -9, -30, -13, -10, 29, -32, -13, -9, -13, -27, 93, -34, 14, -6, 0, -9, -19, 52, 51, -3, 8, -2, -4, -5, -1, 8, 4, 7, 2, -15, -3, -2, -3, -2, 34, 9, 9, 31, 40, 5, -7, -21, -20, 25, 21, -20, -29, -19, -6, -17, -5, 22, -4, 9, -27, -16, -26, -28, 32, -14, 3, -23, 38, 41, -4, -25, -3, -7, 66, -22, 38, -20, -20, -6, 53, -38, -11, -10, -4, -6, -8, 70, 37, -7, 33, -16, -12, -8, -13, 8, 4, -7, 26, -23, 3, 81, -12, 13, 53, -16, 4, -12, 9, -2, -12, -32, -10, 12, 4, 4, -17, -32, 20, -6, -10, 23, -9, 7, -20, -23, -22, 4, 19, -14, 9, -10, 62, 19, -14, -27, 13, -11, 22, 7, 6, -26, -17, 31, 28, -23, -22, -1, -7, 19, 8, 34, 11, 6, -3, -24, 36, -27, 1, 12, -6, -6, 3, -34, 11, 77, -22, 25, 43, -17, 2, 12, 27, -16, -14, -19, 26, -10, -10, 22, -26, -10, 43, -8, -6, 1, 25, -4, -15, -12, -13, -12, -4, -6, -10, -15, 37, 36, -22, -8, -12, 14, 18, 3, -1, 8, -23, 21, -1, -6, -29, -11, -13, 40, 1, 31, 54, 7, 1, -26, 2, -15, -12, 0, -18, 17, -9, -28, -13, 64, -26, -7, 38, -11, -1, 10, -19, -7, -25, -3, -9, -5, -2, -8, -7, 24, 29, -8, 1, -17, -6, 3, -6, -21, -4, -21, 7, -9, -33, -4, -11, 3, -21, 0, -7, 0, 10, 5, -10, 19, 5, 7, -5, -1, -9, -10, 4, 35, -12, 9, -3, 17, 
  2, -14, -4, 19, -7, -9, -14, 3, 7, 9, 8, 3, -16, -17, -16, -7, -2, -7, -17, 54, -1, 21, -6, -11, 39, -23, -8, -4, -25, -16, 5, -21, -7, 0, 4, -6, 5, 8, -2, 6, -4, 62, -8, -6, -14, 19, 5, -19, -39, 12, -3, -15, -13, -32, 23, 26, -24, 49, -1, -23, 13, -33, -46, 53, -4, -4, -9, 63, -17, -1, 14, -12, 14, 2, -15, -3, -6, -15, -19, -7, -7, 42, 5, 9, 7, 77, -3, 20, 21, -1, -5, 18, -8, -9, 34, -8, 13, -4, 22, 25, 14, -23, -7, 2, -11, 49, -5, 8, 1, 26, 0, 37, 10, 5, -10, -27, -1, -8, 54, -2, -5, 38, -1, -16, 28, 4, 9, 43, -6, -13, 0, 34, -3, -3, 2, -1, -18, -1, -24, 6, 2, -6, -7, 1, 0, -4, -15, -2, 1, 24, -9, 22, -5, -5, 3, 35, -1, -29, 34, -10, -8, 9, 10, -9, -25, -32, 7, -11, -2, 19, 8, 27, 2, 13, -2, -3, 28, -10, -11, -9, -12, -10, 4, 5, 3, 6, 13, -9, 34, 38, 51, 13, -3, -20, 21, 2, -2, -12, -11, 5, -4, -16, -38, 33, 7, 28, -1, 6, -6, 6, -8, -5, 8, -13, -13, 32, 1, -15, -16, -5, -3, -19, 8, -10, 0, 5, -4, -29, -21, -18, -12, 1, -15, -18, 23, 1, 11, -32, -7, 12, 50, -3, -18, -15, -16, 18, 24, -24, -13, -13, -10, 27, -6, -4, 15, -39, 4, 21, 29, 1, -23, -8, 3, 0, 41, 8, -20, 33, 4, -2, 3, 17, 2, 50, 5, -8, -2, 6, 33, 4, 21, -8, -22, -2, -3, -15, 40, 4, -10, 4, -15, -8, -17, -11, -5, -7, -8, -29, 26, -3, -3, -31, -9, 19, 16, -2, 29, -16, 10, -8, 14, -14, 3, -15, -15, 8, -3, -6, 17, -26, 2, 0, 17, 0, -18, -3, -7, -10, 7, -11, -13, 24, -20, -12, -18, 16, 54, 61, 40, -27, -8, -11, 7, -7, -22, 6, -33, -6, 38, -12, 3, 3, 17, -30, -7, -9, -6, -8, 8, -12, -17, -11, -3, 58, -17, -7, 4, -16, -15, 6, -12, 4, 26, 49, -5, -7, 8, 3, -12, -8, 0, -7, 22, -4, -4, -5, -1, 0, -11, -7, 2, -6, -7, -12, 18, 14, 6, -14, -18, -6, 42, 27, 41, -16, 4, 0, 36, 21, -12, 1, -1, 10, 15, -3, 17, 10, 27, -8, 1, 13, -16, -23, -25, -8, -5, -16, -14, 5, -5, -7, -7, -10, 44, 34, -15, 12, 18, -26, 29, 1, -7, -9, -3, 24, -10, 5, 22, 19, 2, -18, 6, 26, 2, -6, 13, -9, -4, 20, 30, 23, 5, -7, -6, 5, 17, 31, 8, 21, -1, 7, 74, 26, -10, 3, 16, 28, 0, 0, 11, 20, 21, -12, -3, -1, 0, -10, -21, -17, 13, 6, -22, 3, -15, -5, 15, -11, 18, -2, -3, -5, 20, 26, 15, -12, -9, -37, -15, 3, 11, 2, 13, 3, -3, -15, 5, 8, -3, -12, -8, -10, -16, 30, 62, 7, -6, -11, -15, 7, 20, -20, 32, 0, -20, -5, 7, 6, -9, 23, 5, 8, 7, -29, 23, -12, -3, 13, -14, 7, 31, -6, -25, -6, 21, -2, -9, -13, 12, -12, -9, -10, -7, -10, 4, -11, 23, -5, 24, 7, 13, -30, 1, -10, 2, 16, -4, 18, 8, 1, -21, -12, -3, -23, 10, -10, 14, 22, 10, 8, 8, 7, -4, 6, -2, -7, -2, -9, 9, 22, 2, 5, -10, 9, -5, -18, 2, 4, 9, 0, -4, -17, -9, -2, 14, 8, -30, -3, 27, -19, -10, -15, -3, 9, 4, -3, -10, -9, 4, -14, 12, 10, -12, -11, 19, 20, 23, 21, -5, 18, -11, -5, 5, -1, -4, -8, 0, -24, -14, -16, 12, -13, -9, -6, 14, -7, -6, 23, -17, -12, 19, 6, -2, 20, 19, -2, 2, -1, 5, -16, -5, -1, 15, -12, 12, -7, -28, -16, 23, 16, -14, 6, -1, -10, -5, -9, 41, 13, -3, -22, -3, -9, -11, -4, 53, 0, 5, -8, -14, 1, 25, -12, -6, -15, -28, -13, 12, -5, -6, 28, -5, -10, -17, -4, 48, -22, -13, 8, 8, 29, -3, 2, -5, -13, 1, 6, -9, 4, 1, 21, 23, -3, -3, -8, -22, -5, -8, -13, -12, -8, -15, -8, -16, 20, 4, 15, 4, 38, 7, -7, 7, -16, 0, -20, -6, -21, 3, -24, 48, -18, 4, 3, -16, 44, -9, 5, 20, 8, -15, -9, 10, -6, -5, 15, -13, -27, -19, 9, 29, -9, -5, -8, 7, 5, -7, -16, 0, -10, -15, -13, -5, 1, -5, -11, 27, -7, 28, -24, -21, -9, -17, -7, 4, -23, -2, -11, 20, 11, 12, -14, -8, 9, -5, -12, -3, 1, -2, -22, -6, -6, -6, -5, 3, 1, -21, -13, -10, -7, 31, -11, -1, 9, -19, 9, 
  20, -24, 8, -26, -8, -11, -3, -7, 5, -34, 17, 51, 4, 21, -14, -1, 22, -26, -9, -13, -11, -9, -5, 1, 5, -4, -8, -12, -23, 4, 53, 29, 9, 41, 13, -8, 6, 18, 22, -4, 5, -17, 12, 16, 20, -5, 17, -13, 33, -1, -8, -16, -10, 18, 52, 13, 22, -2, 16, 16, 14, -15, 49, -7, 19, 16, -2, -27, -19, -8, -16, -7, 20, -21, 18, 26, -5, -16, -5, 48, 31, -2, -6, -14, 3, -7, -1, -8, 6, 21, 5, -16, -4, -18, 20, 36, -4, 14, -7, 4, -12, 16, 17, 13, -15, -14, -5, 10, 24, -4, 26, -8, 34, 3, 14, -34, -3, 20, 42, -6, 12, 7, -14, -3, -14, 42, 20, -4, -9, 0, -18, -3, -5, 5, -17, 3, 52, -23, -12, -11, -2, -26, 2, -3, 10, -22, -10, -4, -19, -29, -7, 3, 18, -10, -3, -23, -3, 1, -12, 12, 5, 30, 2, -1, 6, 0, -14, 7, -9, -23, -13, 31, -14, -10, -11, -8, 5, -3, 40, -24, -13, 8, 77, 4, -5, 8, -11, -18, -1, 10, 4, 4, 4, 10, -19, -5, -15, -16, -7, -12, 2, -21, -12, -14, -1, -13, 14, 11, -3, -7, -8, 12, -4, -15, 2, -14, 3, -3, 7, 12, -2, -12, -10, -4, 9, 13, 2, -2, -4, 3, -5, -7, 7, 5, -1, 24, -4, -14, 20, -4, -19, -6, 13, -13, 35, 34, 15, 8, -4, -9, -12, -11, -5, 27, -2, 10, 9, 3, 10, 17, 6, -11, -5, -13, -12, 1, -9, 0, -23, -11, 5, 7, -7, -27, -4, 12, -5, -17, -11, 11, 5, -3, 12, 4, 13, 9, -13, -2, -9, -9, -6, 3, -15, -6, 9, 4, 13, 4, -7, -14, 3, 14, -3, -11, -19, 18, -18, -3, 19, 48, -13, 21, 5, -8, -8, 11, -12, -11, -17, 37, -7, 8, 0, -16, 11, -4, -17, -8, -11, 11, 2, 19, 0, 8, -1, 23, -7, -13, 0, 36, -10, -19, -12, 1, -3, 8, -4, -16, -7, -5, -26, 6, -1, 0, -11, -4, 20, -8, -10, -3, -5, 3, 17, -8, 3, 3, -18, -5, -10, -10, 2, 27, 37, 17, -31, 8, 1, -24, -11, -10, -16, -1, -19, 47, -3, 3, 35, 3, -14, 3, -9, 17, 5, 4, 28, 38, 14, 18, 4, -4, -2, 2, -7, 10, -14, -17, -14, -5, 22, 10, 2, -15, 5, -8, -27, 14, -8, -11, -5, -11, 8, 32, 26, 18, 6, 14, -6, -12, 4, -7, 14, -12, 5, 4, -10, 21, 10, 28, -17, -1, -11, -13, -11, -4, 0, -4, -19, 15, -3, 15, -15, -19, -9, 6, 5, -8, -6, -21, 8, -15, 4, 9, -3, 15, -8, 1, 4, 17, -14, -10, -10, -15, 4, 30, -2, -15, 8, 2, -20, 35, 14, 6, 27, 13, 4, -8, 26, 3, -14, 40, 14, -11, -6, -5, -2, -17, -8, 1, 2, 11, 15, 1, -6, 13, -14, -10, -3, -9, 5, -21, -11, -7, -14, 6, -14, -30, -2, -13, -3, -15, -13, -11, -7, -15, -16, -17, -17, 7, -13, 13, 3, 10, -9, 0, -7, -12, 1, 18, -7, -11, -10, -2, -11, -7, -8, -16, 36, 2, -3, 3, 9, 1, -20, 39, 5, -19, -7, 5, 11, -8, -12, 2, -20, 38, 35, 3, -10, 44, 34, -11, -4, 10, 4, -21, 1, -17, -7, -16, -19, -27, -13, 1, -9, -1, -17, 9, -10, -32, 16, 0, -2, 19, -13, -7, 10, 0, -18, -4, 2, -6, -5, 6, -11, -4, -1, -13, -12, 16, 12, 20, 44, 12, 9, -6, 10, -14, 7, 23, -10, -17, 14, -7, -3, 2, 9, -16, -12, 17, -3, 0, -8, 18, 0, -7, 11, 10, -10, -6, -2, -34, -3, -19, -9, -23, -12, -7, 10, -20, -20, -11, 3, -19, -12, -9, -6, -10, -5, -4, 0, 30, -12, -2, -8, -16, -16, -12, 2, -11, -9, -9, -19, -13, 10, 17, 39, -11, -2, -1, 47, -8, -8, -6, -11, -14, 13, -6, 5, -8, 11, 0, 10, -1, -11, 28, -21, -2, 5, 9, 9, 7, -1, 3, 2, 0, 9, 7, 0, -18, -5, 0, 35, -16, -2, -16, 27, 11, -13, 0, -1, 7, -17, 3, -10, 32, -1, -4, -20, -4, 20, -11, -7, -5, -14, -17, -3, -10, 15, -10, -1, -13, -6, 12, 23, -4, -3, -17, 7, -13, 42, -7, -16, -16, 33, -11, 21, 2, -5, 20, -16, 5, 8, -10, 16, -10, 24, 0, 26, -9, -4, 3, 1, -19, 2, 7, 22, -11, -1, 9, -11, 40, -16, 30, 3, 39, 4, -2, 1, 23, 27, 12, 11, -2, 47, -5, 5, -13, -13, -7, 6, 24, 7, 9, -2, -16, -6, 12, -20, -5, 24, -10, 16, -3, 14, 27, 18, 7, 13, -8, 25, -6, -3, 17, 43, 5, 5, 7, -1, 8, -11, 23, -7, 21, 
  -16, 4, -9, 48, 11, -3, 36, 11, 0, 64, 3, -21, -4, 11, 5, -9, -10, 7, 25, 7, -16, 14, 38, -6, -14, 1, -6, 9, 19, 2, -5, 0, 36, -10, -6, 6, -11, -16, 16, -24, -4, -10, -6, 3, 57, -1, 3, 24, 17, 16, 21, 41, -20, -2, 18, 6, 18, -20, 2, 17, -22, -8, 36, 3, -14, -18, -5, 25, 18, 11, -3, -6, -14, 20, 8, -18, -5, 16, -2, -23, -4, -13, 36, -10, -8, 14, -3, 7, -20, -5, -9, 31, -15, 36, 16, -15, 19, -6, 9, 0, 9, -14, -4, -21, -14, -6, 30, -17, 10, 23, 2, 13, 13, 1, 10, -5, -23, 14, 7, -1, 24, -4, -7, -12, -6, 20, -16, 21, -6, 0, 13, 31, 31, 15, -15, -9, -2, -3, 17, -8, -15, 46, -10, -9, 3, -13, 5, 4, -5, 4, 6, 11, -14, -2, 2, 18, -7, 32, 11, -15, 40, -14, -2, -5, 9, -15, 4, 0, -15, -3, -3, 0, 15, 12, -3, 34, 27, 10, 35, -8, -22, 7, 28, -13, 8, -8, -5, 24, -17, 15, 18, 42, -2, -1, -21, -14, 9, -1, -12, 1, -1, 31, 21, -3, 1, -12, 0, -4, 7, 0, 17, -17, 2, 12, -12, -14, -2, -12, -2, 10, -2, 33, 5, -21, 4, -4, -6, -15, 4, -17, 30, -4, -21, -11, -1, -12, 36, 4, -9, 17, 23, 26, 4, -6, -10, 7, 29, 9, -8, -8, -2, 8, -13, 3, 5, 20, 19, -12, -4, -31, 11, -5, -8, 6, -19, 12, 30, 2, -4, 0, -15, -23, -7, 4, -1, -19, 33, 11, -15, 8, -13, -18, -3, 6, 9, 24, 1, -7, -2, -12, 5, -9, -11, -11, 26, 2, -26, -4, 3, -6, 3, -4, 5, 14, 8, 5, 20, -4, -4, 12, 24, 5, -9, 8, -7, -4, -12, 6, 24, 9, -6, -5, -4, -21, 26, -7, -11, 7, 0, 3, 57, 2, 26, -16, -8, -13, -5, 3, -15, -17, 36, 26, -24, 9, -14, -25, -3, 2, -13, 21, 8, -17, 1, -7, 13, 7, -5, -1, -2, 4, -5, -11, 8, 0, -5, 7, 4, -3, 24, -6, 18, -13, -3, 16, 10, 0, 3, 2, -14, 6, -1, 43, 2, 6, 19, -11, 5, -21, 10, -7, -16, 16, -9, -4, 27, 7, 8, -6, -2, -4, 12, 31, -11, -23, 24, 39, -17, 4, -2, -6, 2, -4, -7, 45, 4, 9, 13, 11, 2, -7, -11, -10, -3, -8, -8, -12, -7, 14, -10, 9, -13, 8, 1, 16, 9, -3, -16, 19, 9, 13, -3, -4, -5, -1, 10, 32, -4, 15, 43, -5, 13, -16, 30, 5, -5, 21, 13, 8, -6, -13, -1, -5, 25, -8, -7, 22, -9, -24, 23, 9, 5, -3, -12, -9, -6, 16, -13, 10, -12, -13, -7, -4, -8, 1, -6, 1, 3, -11, 0, -9, 3, 13, -11, 36, -15, 17, -3, 13, 5, -2, -19, 3, 9, -13, 0, -8, 24, -11, -8, 21, 8, 22, 5, -1, 3, -8, 12, 1, -14, 1, -4, -7, 13, 7, 7, 6, -4, -24, -2, -6, -8, -15, 31, 2, -7, -8, -14, -11, -4, 28, -2, 63, -7, -8, 5, -9, -7, 3, 19, -11, -13, 3, 3, -11, -13, -2, 1, 34, -18, -2, -2, -6, 24, 9, -16, 17, 0, 10, 1, -13, -12, -3, -19, 10, 3, 15, 4, 17, -6, -2, 13, 24, -7, -3, -6, -9, 11, 37, -6, 14, 39, -16, -1, 0, -1, -5, 17, 24, -11, -4, 2, -15, 12, 45, 17, -4, 4, -20, -14, -17, 8, 1, -6, -9, -5, -14, -9, -6, 3, 4, 1, 20, -10, 13, 0, -8, 21, -3, -15, 0, 7, -1, 1, -7, -4, -14, -17, 0, 7, 52, -6, 4, -7, -2, 8, 26, -4, 20, 7, -7, -12, -8, 6, 6, -5, -9, -15, 5, -11, -14, 24, -13, -8, -8, -13, -5, 34, 52, -1, 26, 10, -20, 2, 1, 9, -6, 0, 2, -6, -14, -3, 13, 1, -2, -5, 4, -12, 7, -12, -3, 3, 1, -7, -7, -9, 7, 1, 22, -12, -11, -15, -5, -7, 25, 5, 9, -7, -5, -3, -3, -7, -5, 0, 2, -5, 6, 7, -13, 18, -17, 3, 0, -2, -4, -14, 13, 7, 13, 4, 0, 19, 56, -8, 9, 6, -15, 16, -17, 16, -7, 7, -9, -3, -5, 0, 5, 1, 4, 7, 28, 11, 14, -13, 1, -9, 12, 3, 1, 4, -6, -2, 9, -4, -9, -11, 2, 4, 34, -11, -11, -20, 3, -18, 5, -8, 3, -3, 8, -13, 3, 3, -25, 1, 0, -3, -4, -11, 11, -18, -17, -10, 5, -2, 4, 1, 42, -8, 6, -13, -7, -8, 4, 1, -5, -1, -8, 28, -1, 2, -16, 0, -13, -4, 16, 9, 16, -4, 31, 13, 0, 17, 7, 17, -3, 7, 11, 2, -2, -8, 0, -9, 4, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 6,832 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0057191704399883747, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[16] = { 37, -56, 5, 3, 13, -21, 81, -47, -46, -26, -43, 1, -44, 29, -13, 11, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.00024286088591907173, 0.00014952734636608511, 0.00015116939903236926, 0.00012227687693666667, 0.00021872068464290351, 0.00014526856830343604, 0.00013326460612006485, 0.00011731606355169788, 0.00012442625302355736, 0.00015306244313251227, 0.00022948018158785999, 0.00015418710245285183, 0.00015609221009071916, 0.00017505417054053396, 0.00018775530043058097, 0.00015341452672146261, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[16*3*3*8] = { 
  /* [0][0][][] */ 3,49,37,10,-41,-18,16,3, 12,0,-8,-17,-3,-16,32,-41, -21,1,-17,0,-35,-14,11,21, 
  /* [0][1][][] */ -21,127,22,18,-21,-27,0,-49, -23,0,0,-8,-13,-19,10,-28, -19,62,17,7,25,22,15,-25, 
  /* [0][2][][] */ -33,85,-16,-10,-38,-4,79,3, 37,13,-11,-27,-20,-17,-24,-31, 16,15,18,-19,-8,-15,63,11, 
  /* [1][0][][] */ -45,74,-3,55,-35,-50,-28,10, -68,-39,-19,-2,87,111,25,127, 65,-46,-52,-66,-17,-36,-69,19, 
  /* [1][1][][] */ 32,79,51,-10,-44,-59,38,-48, -5,-21,40,47,-9,67,11,-15, 81,-28,-71,-58,75,22,-101,8, 
  /* [1][2][][] */ -27,33,54,-41,82,3,8,-57, 14,-84,1,-15,66,12,-47,-15, -47,-96,-60,-38,23,-45,-104,-64, 
  /* [2][0][][] */ -14,67,-42,32,-33,-21,-24,27, 10,36,43,15,2,-71,-41,33, -49,-27,10,-9,-20,71,22,60, 
  /* [2][1][][] */ 92,61,-32,4,-63,-14,26,8, -12,55,30,-29,9,-20,-21,-37, -40,-127,26,20,11,59,5,-13, 
  /* [2][2][][] */ 42,33,-26,-11,-64,-24,-98,-52, -34,78,79,87,78,28,-12,57, -6,-72,-12,-33,-55,-58,-42,-58, 
  /* [3][0][][] */ 112,-102,106,-39,92,-17,-52,62, -26,-69,-62,69,-56,-33,-71,-13, -43,-58,-15,-20,32,-10,42,25, 
  /* [3][1][][] */ 121,-118,101,-21,16,-32,-46,19, -40,-22,-91,-18,-83,14,-32,28, -60,-68,85,-6,-36,-35,40,34, 
  /* [3][2][][] */ 94,-57,127,-65,88,-14,52,3, -103,-8,-60,-18,-83,-38,-30,38, -34,-81,83,-72,30,-42,2,-9, 
  /* [4][0][][] */ -28,7,-36,4,-44,-19,25,-2, -29,-3,-38,-25,-24,30,31,-11, 12,30,9,-24,-35,48,3,10, 
  /* [4][1][][] */ -39,-6,-13,56,6,55,81,-33, -2,127,-27,6,-43,51,-24,2, -19,13,-7,22,42,-11,40,-1, 
  /* [4][2][][] */ -28,2,-20,41,-6,-4,33,-40, -9,40,-36,30,-12,-12,-10,32, -18,74,-41,-6,39,-6,-27,60, 
  /* [5][0][][] */ -83,11,0,37,-62,-39,-6,0, -34,20,-58,-41,55,25,-34,-71, -51,37,-21,57,-12,24,-59,14, 
  /* [5][1][][] */ -43,7,-17,-23,-65,-19,7,-81, -36,18,-37,16,62,78,70,22, -2,68,-67,127,-61,47,-78,16, 
  /* [5][2][][] */ -26,62,-59,43,-35,23,-36,-2, 17,43,-49,126,76,-8,62,-16, -23,-36,-74,40,-65,74,-55,-30, 
  /* [6][0][][] */ 30,40,11,36,-87,14,28,18, 66,-72,70,-56,-18,-15,14,25, -2,-82,-16,41,-25,65,-33,-18, 
  /* [6][1][][] */ -6,42,42,-27,-99,0,-20,-40, 113,-49,-12,-67,45,73,54,30, 8,53,83,-28,-20,21,54,87, 
  /* [6][2][][] */ 127,-17,17,-106,-66,-61,-48,-83, 68,-27,-26,-64,21,29,2,30, -71,-40,39,2,-125,-77,-32,-70, 
  /* [7][0][][] */ -55,52,-26,-127,-70,-3,75,-31, -3,33,2,90,46,85,41,19, -17,-60,-52,-43,36,19,35,-4, 
  /* [7][1][][] */ -37,23,-6,-122,71,-76,31,-2, -26,23,7,74,-17,97,60,14, -57,-20,-34,-23,-42,-59,-63,36, 
  /* [7][2][][] */ -65,-43,9,-18,33,-85,-27,41, -14,-49,21,46,92,26,-23,2, -11,-4,8,-43,-70,-17,53,-20, 
  /* [8][0][][] */ 60,-101,100,15,-12,-34,38,10, -25,-42,-73,26,-32,-46,-95,-1, -19,-81,60,41,24,68,-39,-15, 
  /* [8][1][][] */ 22,-84,127,-16,-31,-66,43,-51, -22,63,-28,1,-10,1,-90,-37, -36,-96,-28,14,29,62,44,16, 
  /* [8][2][][] */ 9,-77,125,-40,1,13,39,-53, 68,-69,53,-40,13,-64,-72,-2, 82,-50,-41,-10,6,-31,49,-52, 
  /* [9][0][][] */ -21,-45,-27,79,0,72,-27,80, -54,-82,-26,-46,34,44,-1,77, -46,-100,-28,60,8,126,-11,127, 
  /* [9][1][][] */ -53,-1,-80,-47,-34,106,-52,84, -33,-83,65,-77,68,-10,-14,-14, -48,-32,-2,16,1,90,23,-35, 
  /* [9][2][][] */ -63,51,-82,-11,-7,36,-63,-2, -16,-51,12,-57,-23,-8,-19,46, -8,-67,-58,-27,36,81,24,-41, 
  /* [10][0][][] */ -13,-39,-21,61,16,69,20,38, -36,-37,-2,-35,-16,-49,-22,-33, -12,9,-32,29,-31,7,-17,6, 
  /* [10][1][][] */ -11,14,-12,34,8,78,82,32, 33,-55,35,-13,-11,-31,106,-11, -4,120,-58,17,-10,-5,-41,-46, 
  /* [10][2][][] */ 25,-34,-39,-19,-12,-24,64,-25, -16,21,46,8,-15,8,-34,-24, -37,127,-58,-17,-44,-34,-28,-67, 
  /* [11][0][][] */ -64,97,-59,127,39,11,-33,-37, -20,-16,33,-29,38,-76,23,-12, -37,54,-42,88,-76,-55,-58,-18, 
  /* [11][1][][] */ 126,49,32,-45,22,-44,75,-64, -36,31,-58,5,-59,-24,-18,-28, -23,27,-38,30,-60,-21,4,-36, 
  /* [11][2][][] */ -2,39,52,108,66,-26,-55,-24, 2,51,-18,52,-54,-5,-45,-25, -31,-30,-35,60,-36,-20,35,18, 
  /* [12][0][][] */ -100,82,-70,127,-79,36,3,27, 23,-36,2,-34,-8,7,-51,-25, -4,103,35,11,30,-76,-18,-5, 
  /* [12][1][][] */ -80,19,-27,86,-5,108,-21,100, 37,-45,-9,-59,12,-37,-6,-58, -7,-8,24,-28,9,-40,50,16, 
  /* [12][2][][] */ -73,-114,-22,-16,12,48,-37,55, -6,-28,-7,-2,25,-42,-54,-112, 50,-12,31,-2,36,-38,-28,-30, 
  /* [13][0][][] */ 15,55,-9,-37,-45,3,-23,-43, 29,104,-28,8,-44,-50,-30,-36, -19,51,48,18,48,-43,-47,42, 
  /* [13][1][][] */ 2,59,-5,-45,36,-27,32,-8, -18,23,-44,-65,-49,33,76,34, -30,-21,25,-44,32,-1,34,39, 
  /* [13][2][][] */ -14,127,-49,91,-41,-2,-51,-30, 2,67,5,-16,32,-52,-50,-24, -42,60,-32,-19,-30,-5,-22,17, 
  /* [14][0][][] */ 50,16,75,-26,-31,-15,55,-50, 9,35,43,-2,-28,-24,41,-68, -13,-17,-47,127,-39,-31,-60,5, 
  /* [14][1][][] */ 50,8,-21,-28,-57,9,36,-82, 44,54,18,15,-2,-19,24,-21, -59,-12,-40,4,-22,93,-32,91, 
  /* [14][2][][] */ -7,121,-25,-27,-44,2,-33,-94, 8,-33,16,-36,-9,-44,34,-33, -22,21,-39,-34,-40,102,-34,95, 
  /* [15][0][][] */ 49,127,1,-43,-1,-60,-29,14, -39,-33,51,-13,-60,-33,-8,55, -15,-60,65,-55,-44,-50,-1,20, 
  /* [15][1][][] */ 32,34,24,-44,12,-22,-16,-13, -42,-76,83,-23,-83,52,11,61, 63,-41,65,-59,27,-10,-45,-24, 
  /* [15][2][][] */ -30,70,-30,-27,-22,-88,-5,70, -17,-57,93,14,-45,-43,-14,-2, 75,-32,66,-75,-49,-46,-59,4, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant6_scale = { 16, { 0.0051167327910661697, 0.0031503280624747276, 0.0031849239021539688, 0.0025761995930224657, 0.0046081333421170712, 0.0030606016516685486, 0.0028076954185962677, 0.0024716823827475309, 0.0026214839890599251, 0.003224807558581233, 0.0048348205164074898, 0.0032485027331858873, 0.0032886406406760216, 0.0036881419364362955, 0.0039557367563247681, 0.0032322255428880453, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[8] = { 18, 33, 27, 21, 40, -84, -11, -7, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00019797853019554168, 0.0004303709720261395, 0.00021371504408307374, 0.00031871098326519132, 0.00051627121865749359, 0.00025501425261609256, 0.00032049368019215763, 0.00034002357278950512, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[8*3*3*1] = { 
  /* [0][0][][] */ 64, -37, -101, 
  /* [0][1][][] */ 66, -127, -114, 
  /* [0][2][][] */ 44, -118, -127, 
  /* [1][0][][] */ -51, -76, -47, 
  /* [1][1][][] */ 67, -60, 45, 
  /* [1][2][][] */ -9, 127, 1, 
  /* [2][0][][] */ 127, 109, -114, 
  /* [2][1][][] */ 42, 10, -101, 
  /* [2][2][][] */ 114, 32, -101, 
  /* [3][0][][] */ -127, -18, -68, 
  /* [3][1][][] */ -108, 98, -28, 
  /* [3][2][][] */ 74, 102, 65, 
  /* [4][0][][] */ 78, -46, 39, 
  /* [4][1][][] */ 127, -32, 12, 
  /* [4][2][][] */ 73, 70, 1, 
  /* [5][0][][] */ -57, 127, 17, 
  /* [5][1][][] */ -27, 73, -11, 
  /* [5][2][][] */ -85, -10, -67, 
  /* [6][0][][] */ 19, 127, -39, 
  /* [6][1][][] */ -42, 32, -67, 
  /* [6][2][][] */ -78, -78, -106, 
  /* [7][0][][] */ 32, 48, 55, 
  /* [7][1][][] */ 21, 127, 10, 
  /* [7][2][][] */ -43, 118, 21, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant8_scale = { 8, { 0.0033873855136334896, 0.0073635880835354328, 0.0036566350609064102, 0.005453101359307766, 0.0088333301246166229, 0.0043632588349282742, 0.0054836026392877102, 0.0058177565224468708, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,49,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.058445822447538376, } };
const TfArray<1, int> quant9_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,49,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.047464054077863693, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,25,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.047464054077863693, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.041604839265346527, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.041604839265346527, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,832 } };
const TfArray<1, float> quant14_scale = { 1, { 0.041604839265346527, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,6 } };
const TfArray<1, float> quant15_scale = { 1, { 0.21262632310390472, } };
const TfArray<1, int> quant15_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,6 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,6,5 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,4,3 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 4992, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5104), (TfLiteIntArray*)&g0::tensor_dimension9, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 5096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5104), (TfLiteIntArray*)&g0::tensor_dimension11, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2800), (TfLiteIntArray*)&g0::tensor_dimension13, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension15, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 17, };
const size_t tflNodes_subgraph_index[] = {0, 8, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  16, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_17_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_invoke() {
  for (size_t i = 0; i < 8; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
