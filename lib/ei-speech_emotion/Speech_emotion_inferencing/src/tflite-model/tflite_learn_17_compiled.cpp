/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 07.05.2025 14:11:21

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 8464;
#else
constexpr int kTensorArenaSize = 7440;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const TfArray<1, float> quant0_scale = { 1, { 0.058445822447538376, } };
const TfArray<1, int> quant0_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 49, 13, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[6] = { 1, 11, 0, 27, 20, -16, };
const TfArray<1, int> tensor_dimension3 = { 1, { 6 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00030816649086773396, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[6*832] = { 
  2, 47, -29, 25, -16, 0, 12, 7, -2, 46, -5, -22, 14, -11, -13, -6, -16, 1, -4, 5, -14, 11, -16, 4, 20, -28, -22, -3, 49, -7, -29, 16, -17, -5, -26, 3, -30, -13, -31, 4, 19, 14, 7, 7, -36, -34, -7, -11, -22, -15, -29, 1, 47, -18, -12, -25, -9, -2, -2, -3, 19, -22, -24, -31, 25, -9, 0, 21, -8, -10, -3, -4, -7, 16, 37, -7, 4, -9, 20, -4, -4, -5, -15, 7, -12, 9, -3, 6, 2, -10, -10, -23, 36, -20, -28, 39, -6, -20, -17, 9, -12, 11, 5, 5, 12, -14, 37, -30, -24, -11, -3, -12, -31, -14, -21, 8, 34, -18, -36, -30, -22, -17, 32, 5, -14, -21, -14, -35, 13, -2, 5, 49, -15, -14, 9, -7, -11, -1, 2, -14, -12, -14, 3, -23, -14, 34, -10, 2, -2, 3, 19, 9, -10, -8, -15, -24, 1, -9, 4, 19, 30, -5, -6, -1, 19, 10, -5, 14, -8, 3, -9, -22, -4, 15, 26, -19, -13, -17, -16, 2, 3, -26, -5, -3, -13, 13, 24, 7, 0, -19, -22, -12, -6, -19, -4, 39, -7, -5, 7, -6, 20, -28, 0, -19, -11, -21, -1, -10, 20, 14, -1, 18, -9, 9, 10, 16, 3, -13, 19, -19, 13, -8, 5, -2, -4, -5, -9, 25, -11, 20, -16, -2, 20, 45, 5, -26, 6, 35, -4, -11, -7, -15, -9, -14, -3, 5, 14, -4, -5, 5, 38, 0, -18, 23, -3, 17, -23, -5, 1, 28, -1, 4, 27, 2, 21, -27, 8, -8, -18, -11, -10, -3, -6, 5, 18, -11, -4, 1, 3, -3, -15, -15, -2, 11, 13, -1, 14, -17, -8, -6, 12, 25, 11, 8, -8, -6, -8, 53, -15, -9, 19, -3, -20, -24, 1, 4, -5, -13, 0, 2, 60, -6, -6, -15, 16, 5, -8, 8, -9, 21, -25, -11, 2, 3, 2, -10, 5, -7, 12, -22, 2, -17, -6, 11, -11, -8, 4, -17, 26, -3, -16, 49, 12, 1, -19, 8, -9, 29, -2, -8, 6, -20, -4, 33, 34, -15, 42, 4, -18, -4, -17, -1, -17, -14, 16, -6, -7, -8, -5, -12, -16, -34, -8, -27, 26, -7, -4, 0, -4, -5, 30, -25, -11, -14, -20, 6, -6, 25, -10, -19, 4, -1, 45, -7, 3, -2, -18, -1, -3, -4, 2, -22, 3, -10, -8, 20, 4, -10, 2, -10, 10, 39, 6, -10, 7, -6, -12, 13, 1, -17, 29, 21, -13, 22, 17, -4, -16, -8, -11, 10, -15, -28, -10, -34, -11, -20, 23, -29, 16, -15, -2, 3, 5, -2, -13, -15, -28, -34, -10, 5, 5, 15, -2, -11, 7, 8, 10, -11, -9, 20, -8, 13, 3, -7, 23, -28, -8, 3, -10, 11, 4, 8, -6, -14, 10, 3, -9, 3, 1, -2, -1, 31, -6, -15, 19, 11, 1, 13, 15, 12, -13, -6, -7, 38, -13, -13, -18, 6, -11, -14, 40, 12, 2, 1, 5, -2, 9, -17, 2, -29, -21, -2, 10, 5, 14, 23, 2, -8, 37, -2, 5, -5, 3, 2, -14, -6, 6, -10, 3, -1, -18, -3, 4, 13, 8, 6, -10, -3, 18, 9, -4, 17, -1, 5, 3, 0, 17, -8, 5, 9, 13, -5, -2, -5, -6, 10, 2, -10, -6, -15, -5, 25, 10, -2, 8, 0, 0, 7, 0, 1, 1, 1, 3, -12, -11, -2, -1, 9, 5, 3, 2, -8, 11, 3, 22, 5, -7, 9, -10, -7, 19, 0, 21, -24, -23, -6, 6, 0, 4, 5, -12, 4, 7, 4, 15, 12, -21, -7, -7, -17, 15, 5, -10, -5, -8, 1, -6, -8, -3, 15, -10, -19, -14, -19, 9, 9, -9, 14, 8, -5, -3, 1, -10, -23, -2, -14, -6, 4, 12, 7, 13, 15, -16, 4, 2, -11, -3, -6, 13, -9, -5, -19, 2, 3, 23, -7, 4, -26, -12, -4, 4, 16, 7, -14, -11, 9, 10, 0, 12, -8, -16, 11, -24, 0, 7, 46, -14, -8, -23, -9, -5, 1, -13, 16, -19, -20, -2, -10, -6, -1, -5, 3, -20, -16, 21, -2, 2, -1, 2, -6, -7, 23, 7, 2, -8, 8, -13, 2, 40, 20, 14, 7, -3, 25, -11, -33, -9, 10, 31, -4, 19, -18, -13, 12, -13, 7, -7, -10, -9, 0, 0, -21, 21, 2, -13, 40, -19, 6, 1, 6, -4, -14, -27, -16, 35, 24, -15, 26, -33, -10, -12, -4, -16, -4, -13, -8, -8, -7, -7, -28, -10, 19, 2, 1, -15, 10, 5, -22, -11, 1, 21, 8, -5, 5, -10, 21, 30, -2, -3, -11, 30, 36, 0, -6, -16, -12, 2, -19, 7, 5, 3, -4, -32, 0, -2, 10, 22, 55, -11, 14, 3, 5, -4, 0, -14, -2, -18, 4, 10, 26, -7, 19, -37, -34, 1, 4, 10, -15, 6, -2, 36, -28, -18, -24, -21, 4, 15, 14, 12, -28, -22, -28, 
  16, 3, 0, -17, 7, 1, -13, -7, -1, 0, -2, -14, 21, 13, -5, 24, 22, 8, 2, -15, -2, -26, -5, -6, 3, 8, 7, -5, -1, -9, -12, -15, 14, 4, 24, 32, -5, 0, 10, -11, -7, -13, 8, -5, 3, -4, -11, -10, -5, 15, 13, -4, 3, 0, -16, -13, -9, 5, 3, 12, -8, 0, -11, -27, -5, -10, -6, -17, -2, -4, 22, 10, -20, 23, -13, -2, 13, -2, -12, 16, -4, 2, 1, 25, -16, -23, 12, 0, 4, -1, -4, 11, 3, 4, -28, 6, -10, -15, 48, 3, -5, 4, -11, -2, 7, -16, -3, -13, -10, -12, -10, -9, -14, 10, -8, 60, 43, 15, -10, 18, 15, 0, -5, 32, 0, 6, 5, -35, 20, -10, -10, -18, 7, -6, -7, 0, -10, 20, 20, 9, 43, 3, -2, 16, -6, 13, -16, -10, -2, 9, 2, -11, 4, -15, -1, 28, -4, -15, -16, -5, -5, -13, 16, 28, -8, -8, 1, -2, 1, 13, -8, 4, 5, -6, -1, 7, -5, 8, -4, 39, 11, 8, -39, 9, 20, 5, -14, -7, 55, -12, -13, -16, 9, -8, -4, -18, 6, 2, 17, 21, -17, 23, 40, 40, 33, -1, 18, 0, -16, -17, -24, 1, -4, 15, -16, -4, 6, 5, -6, 0, -9, -22, -11, -10, -11, -12, 0, -3, -14, 7, 9, -3, 8, -1, 11, -5, 6, -10, 2, 30, -6, -7, -18, 28, -13, -10, -6, 4, 12, -4, 8, -7, 44, -11, 0, -2, 5, -14, -6, -2, -16, 1, 5, -10, 0, 6, 27, 26, -6, 13, 27, 19, -6, -1, -15, 20, -4, -15, -13, -6, 31, 16, 9, -8, -5, -25, -4, 1, -7, -1, -6, 11, -5, -3, 2, 33, 4, -9, -17, 5, -4, 12, 5, 20, 3, -8, 6, 18, -16, -8, -23, -11, 0, 8, 7, -16, 19, -9, -4, -6, 21, 10, -4, 21, -5, -12, 6, 5, 10, -4, -4, 12, -17, -8, 28, 5, -1, -9, -16, -7, -6, -19, 6, -10, 45, 0, -1, -26, -17, -10, -6, 17, -14, 7, -11, 16, -7, -5, -6, 28, 11, -7, 3, 6, -9, -8, 5, 26, 20, -3, 14, 14, -15, 0, 0, 1, -1, 20, 23, -21, 28, 11, -6, 11, 3, 5, -6, -8, -9, 2, 9, -7, 7, -16, -18, -18, -3, -22, 5, -11, 0, -13, -14, -15, 1, -6, -15, -7, 20, -16, -18, -16, 19, 0, 3, -1, 0, -13, -15, 5, -9, 16, 18, 3, -6, -3, -3, -20, -7, -22, 17, 29, 10, 17, -1, 10, -5, -1, -6, 0, 19, 18, 14, -10, 36, -9, 24, -4, -25, 27, -9, 10, -2, 10, 10, -4, -10, 0, -14, 3, -19, -5, 5, -5, -9, -22, 3, -13, -11, -12, -16, -10, -3, -14, -11, -19, 46, -25, -17, 2, 6, -13, -21, 7, -9, -5, 17, -17, 6, 2, 8, 5, -12, -16, 30, 13, 2, -2, 19, 10, -23, -11, -15, 3, 10, 14, -16, -14, 10, 1, -2, 22, -6, 17, -6, -6, -10, 7, -3, -5, -8, 3, -19, 6, -6, -9, -9, -16, -5, -7, 5, -11, -4, 8, -16, -10, -10, -10, -19, 12, -6, -17, -12, -17, 2, -7, -17, 1, 8, 3, 20, -8, -8, -7, -9, -3, -8, 2, 5, 4, -8, -21, 1, 5, -17, 0, -4, 2, -18, 44, -7, 14, -6, -3, -7, -10, -10, -4, 13, 6, -4, 7, -6, 5, 16, 2, -17, 32, -17, 17, -12, -4, 0, 2, -6, -11, 17, 15, -11, -4, -5, 6, 1, -3, -6, -8, -5, -4, 11, 12, -16, 22, -13, 8, -8, -11, -4, 4, -19, -4, -21, -2, 8, -1, 1, -3, -10, -11, 2, 1, 0, 9, -2, 2, -4, 2, 23, -15, -19, 19, 2, -10, 29, 26, -2, -17, -18, 20, -14, 25, -2, 66, -12, -18, -28, 19, -10, 10, -6, -6, 3, 7, 4, 19, -14, -6, 2, -20, -6, 7, 12, -7, 0, 4, -7, 19, -7, 23, -5, 2, -3, 14, 15, -8, -1, 28, -18, -1, -10, -3, -17, -19, 6, 6, 5, 0, -1, 9, 0, -2, -3, -5, -7, -1, -10, -4, 20, 7, -20, -9, -6, 13, -6, 60, 7, 55, -13, -13, -33, 14, 3, 16, -13, 9, -6, 0, 22, 10, 9, -22, 19, -8, -5, 44, 6, -9, -2, 3, 2, -7, -6, 19, 0, -7, 17, -11, -2, -12, -7, 7, 2, -6, -1, 11, -10, 16, 22, 31, 36, 10, 12, -6, -2, -2, 3, -18, -7, 16, 42, 23, -17, 5, -9, -11, 11, -14, -5, 30, 43, 40, -9, -36, -2, -1, 24, -4, 4, -9, 30, -10, 2, 12, 14, -21, 6, 15, -7, -15, -4, -19, -1, 28, 38, 4, 43, -9, 21, -8, 28, -4, 15, 14, -6, 20, -6, 11, -15, 17, -8, -12, 15, 13, 21, 3, 10, 1, -9, -9, 1, 43, 19, -7, 
  -13, 58, -15, -28, 8, 20, -21, 17, 19, 0, 5, -11, -15, 16, 10, -21, -28, 2, -12, -15, -10, 10, -18, -3, -22, 35, 23, -20, 12, -6, -10, -37, -6, -22, -9, -23, 17, 2, -13, -16, -26, -7, -34, -28, 27, 16, -11, -9, -11, 2, -17, 16, -9, 5, 14, 73, -2, -4, -33, -4, -33, 1, -10, 127, -4, 32, -12, -19, -2, -21, -4, 13, 1, -12, -18, 6, -22, 22, -9, -27, -6, -12, -11, -12, -2, -16, -32, -25, -17, 18, 1, 9, -19, -1, -11, -27, -19, -10, -10, 29, 63, 4, -20, -11, -14, 7, -32, -17, 33, -1, -18, -3, -17, -13, -31, -3, -15, 9, -5, 12, 2, 8, -15, -31, -8, -12, -34, 104, -20, 60, 16, -39, 1, -2, -15, 15, -11, -8, -21, -28, -16, 1, -8, -11, -10, -30, -16, 0, -24, -17, -18, -29, 1, -9, 3, 22, 23, -9, -38, -16, -31, -7, -25, 9, 33, -15, 20, -11, 25, -8, -6, -14, -11, -1, -30, 5, -11, -6, -23, 22, -28, -14, 2, -20, 8, -8, 27, -20, 0, -40, -39, 36, -22, 22, -15, -26, -4, -8, -4, 3, -28, 0, -11, 10, -6, 7, -9, 35, 1, -15, 26, 31, -24, -20, -18, -24, -13, 32, 17, 18, 16, -15, -15, -7, 3, 34, -18, -20, 31, -20, 23, 11, 13, 3, -2, 20, 4, 38, 3, 10, -4, -15, -1, -2, -29, 1, 1, 8, -19, -24, 7, -19, -5, -8, -1, -5, -5, 22, 11, -24, -1, 27, -24, 3, -16, 15, -17, 23, 27, -10, -13, 36, -4, -6, 2, 12, -15, -18, -5, -24, -17, 33, 31, -2, -12, -5, -14, -5, 54, 8, 7, 0, 0, -17, 43, 3, 13, -10, -3, -14, 22, 41, 15, 16, 9, -3, -19, -1, -3, -13, 4, -13, -12, 31, 31, 15, -6, 0, 3, -5, -18, -11, -14, -3, -14, 6, -11, -13, -9, 58, -17, 14, 44, -8, -28, -2, -26, 10, -18, 50, -8, 9, -9, 2, -12, 2, -9, 16, -23, -14, -2, -16, 8, 21, 29, -23, -9, -12, 5, 0, 7, -18, -4, -14, 23, 2, 18, 27, 1, -14, -40, 27, -28, -38, 43, -15, 9, -7, 22, 31, -15, -15, -6, 22, -9, -18, -15, 15, 26, 1, -14, -18, -17, 40, 2, -1, 43, -7, -29, -10, -24, -17, 26, 35, -13, -3, 12, 2, 6, -11, 24, 3, -3, 1, -15, -4, -14, 0, 2, -33, -15, -3, 22, -2, -7, -20, -13, 36, 69, 3, 24, -6, 18, -32, -28, 8, -18, -3, 65, -40, 5, -21, -11, 25, -23, 22, -12, -15, 15, -13, 2, -8, -16, -7, -10, -20, -4, 4, 31, -19, 29, -18, -13, 9, -18, 39, -7, 28, 19, -25, -11, 8, 9, -33, -18, -12, -17, -12, 3, 9, -7, 1, -9, -27, -24, -10, 12, -4, 16, -21, -28, 6, 18, -13, 25, -4, 37, -8, -2, -26, -16, -7, 74, -6, 2, -36, 3, -9, -18, -1, 40, -28, 24, -3, 7, -6, -8, -21, -6, -3, -2, -16, 51, 7, 19, -19, -7, 14, -19, 16, 1, 10, -5, -25, -5, 16, 48, -33, -21, 2, -13, -9, -16, 6, -11, 16, -15, -25, -20, -7, 28, -9, -6, -2, 16, 35, -23, -26, -9, -4, 16, -28, -18, -16, -9, -19, 81, -33, 4, -21, 0, -6, -5, 27, 68, -2, 15, -2, -6, 12, -3, 11, 23, 2, 8, -22, 3, 10, -4, 4, 44, 12, 9, 9, 5, 5, -13, -23, -22, 21, 22, -19, -20, 0, -11, -15, -14, 26, -3, -8, -23, -25, -24, -28, 27, -15, 0, -27, 40, 35, -24, -29, -6, -16, 64, -16, 53, -23, -19, -19, 59, -37, -12, -26, -8, -7, 6, 55, 25, -29, 15, -22, 7, -3, -11, 0, 14, -6, 40, -26, -12, 23, 1, 32, 72, -11, 23, -13, -9, -8, -20, -32, -7, 12, -7, -1, 0, -35, 18, -13, -15, 28, -3, 2, -19, -26, -15, 3, 7, -11, 6, -21, 48, 17, -39, -21, 6, -11, 0, -2, 10, -23, -2, 22, 13, -19, -19, -10, -13, 7, 25, 43, 8, -11, -9, -25, 37, -13, -8, -7, 1, -10, 11, -32, 24, 51, -9, 18, 46, -12, 6, 18, 34, -6, -22, -23, 0, -9, -10, 21, -21, -3, 45, -8, -1, -6, 29, -4, -18, -16, -21, -10, -7, -5, -7, -5, 24, 7, -27, -11, -15, 9, 9, -5, -2, 23, -19, 22, -7, -18, -29, -14, -17, 37, 3, 35, 39, -2, 10, -24, 11, -8, -12, -10, -14, 9, -7, -28, -2, 73, -27, -7, 38, 0, -3, 7, -18, 9, -24, -6, -5, 5, 1, 1, -7, 8, 24, 8, 1, -20, -4, 6, -3, -27, -12, -16, 2, -14, -27, 4, -2, -47, -27, -2, -12, 13, 11, 5, -19, 24, 6, 24, -18, 9, -12, -8, 8, 45, -6, -13, 1, 26, 
  3, -15, 17, 26, -4, -13, -13, 2, 0, 25, 9, 8, -16, -30, -18, -11, 2, 20, -14, 57, -2, 68, -15, -2, 49, -25, -10, -2, -39, -16, 14, -14, -8, -10, 26, -9, 9, 4, 26, 11, -17, 58, 21, 2, -16, 35, 15, -1, -35, -7, -2, -23, -7, -28, -12, -9, -18, 44, 4, -33, 27, -21, -40, 26, -7, -19, -9, 73, -29, -11, 16, -14, 5, 1, -13, 2, -10, -17, -18, -5, 3, 30, 23, -3, 6, 55, -12, 12, 28, -5, -8, 52, -16, -16, 55, -9, 11, 0, 0, 18, -2, -26, 0, -1, -15, 61, -3, 25, 27, 6, 1, 60, 5, 8, -15, -6, -3, 5, 63, -7, 18, 27, 14, -6, 54, 0, 32, 53, -1, -12, -5, 38, 15, -1, -3, 0, -19, -17, -29, 22, 0, 1, -5, 1, 1, -13, -13, -5, -4, -6, -7, 18, -2, -16, 4, -4, -9, -25, 19, -1, -10, -1, 11, -13, -19, -24, -26, -7, -3, 8, 3, 21, 3, -5, -7, 1, 21, -11, -15, -3, -21, -17, 27, -4, 4, 0, 9, -14, -5, -10, 50, 10, -13, -6, 28, 1, 0, -3, -10, 9, 5, 0, -33, 35, 4, 18, -4, 1, -16, 15, -1, -4, 6, -11, -4, 38, 4, -11, -11, -19, -8, -18, 8, -4, 8, -8, -9, -27, -15, -16, -17, 5, -10, -14, 6, -7, 8, -23, -14, 5, 60, 5, -23, -12, -11, 14, 62, -25, -5, -24, -13, 36, -28, -7, 24, -27, 13, 20, 21, -3, -27, -10, 0, 8, 30, -9, -30, 52, -1, -14, 3, 25, -2, 79, 4, -11, 2, 21, 27, 0, 19, -10, -17, -5, -8, -18, 24, 2, -9, 3, -9, -15, -11, -6, -10, -5, -12, -31, 25, 1, 13, -29, -2, 10, -7, 2, 21, -14, 7, -7, 10, -12, 13, -21, -17, 9, 2, -6, 14, -20, 4, -6, 12, 0, -22, -9, -7, -12, 8, -6, -9, 17, -12, -20, -23, 21, 41, 66, 23, -28, -10, -16, 11, -6, -18, 8, -30, -5, 36, -19, 9, 3, 10, -33, -8, -11, -9, -11, 1, -12, -20, -5, -7, 83, -12, -21, -2, -14, -20, 5, -13, 7, 32, 31, -7, -9, 25, 0, -18, -7, 4, -14, 19, -5, -1, -9, 10, -1, -13, -14, -2, -9, -11, -15, 19, 34, 2, -16, -21, -6, 42, 23, 20, -18, -2, -4, 24, 17, -10, 5, -6, 6, 13, -4, 22, 17, 26, -12, -4, 14, -17, -20, -29, -9, -6, -3, -18, 17, -3, -11, -8, -3, 28, 40, -20, 15, -1, 0, 16, 2, -5, -10, -4, 17, -16, -3, 17, 30, 5, -27, 21, 31, 3, -10, 10, -8, -12, 9, 17, 26, 10, -5, -3, 7, 16, 23, 25, 18, 2, 18, 60, 22, -11, 11, 11, 23, -5, 1, 11, 24, 21, -13, 1, -4, 2, -13, -12, -17, 9, 16, -16, 7, -19, -3, 15, -5, 15, 2, -9, -1, 32, 15, 17, -12, -8, -41, -11, 5, -5, -2, 26, -11, 0, -19, 22, 2, -2, -17, -9, -11, -13, 26, 49, 30, -5, -14, -16, 7, 22, -22, 36, -4, -13, -5, -2, 9, -9, 16, 15, -3, -3, -14, 25, -12, -5, 19, -12, 9, 23, -7, -27, -7, 10, 5, -7, -19, 6, -11, -11, -8, -2, -4, 4, -1, 15, -4, 18, 16, 12, -35, 0, -10, 2, -1, -6, 9, 11, -6, -9, -10, -4, -22, 10, -11, 14, 32, 13, 19, 12, -4, -3, 9, 1, 4, 0, -8, 9, 14, -6, 6, -5, 10, -2, -14, 6, 6, 5, 13, -11, -18, -14, 5, 13, 26, -30, -3, 40, -13, -8, 6, -6, 4, 0, -4, -5, -12, 1, -17, -3, -5, -25, -18, 14, 29, 28, 16, -29, 19, -4, 9, 0, 0, 3, -7, 6, -23, -14, -14, 7, -6, -7, 4, 10, -6, -8, 20, -13, -18, 13, 5, -6, 8, 15, 1, 3, 2, 8, -34, -1, 12, 11, -8, 8, -5, -27, -10, 19, 30, -13, 7, 3, -13, -7, -2, 35, 6, -3, -17, 5, -3, -14, -9, 20, -7, 4, -14, -16, 2, 36, -5, -12, -28, -21, 1, 13, -3, -7, 20, -1, -6, -14, -3, 44, -15, -14, 9, -2, 41, -3, -1, 0, -20, 5, 5, -6, 7, -1, 22, 23, 7, 6, -20, -18, 0, -5, -10, -10, -1, -16, -8, -16, 11, -1, 13, 8, 41, 6, -4, 25, -18, -3, -17, 4, -24, -4, -30, 14, -19, 8, -3, -12, 46, -6, 6, 15, 4, -18, -10, 8, -8, -11, 11, -8, -21, -14, 16, 29, -8, -5, 10, 13, 13, -9, -19, 0, -9, -6, -13, -7, -2, -9, -9, 23, -6, 23, -34, -20, 0, -13, 0, 6, -22, -4, -9, 6, 3, 7, -12, -14, 13, -8, -4, 2, 1, -4, -16, -6, -18, 2, -14, -5, 3, -13, -19, -11, -4, 22, -23, -7, -5, -17, 9, 
  18, -16, 6, -22, -11, -9, 15, -2, 1, -40, -2, 62, -8, 18, -12, 4, 14, -31, -20, -12, -9, -26, 14, 0, -5, -4, -3, -9, -16, -4, 58, 36, 7, 33, -6, 1, 6, 33, 28, -1, 12, -13, 1, 15, 28, -6, 19, -5, 14, 14, -17, -21, -15, 16, 81, 36, 13, -6, 27, 10, 18, -9, 49, 8, 13, 32, 10, -36, -14, 8, -16, -3, 24, -28, 4, 1, -1, -17, -9, 38, 30, 2, -17, -14, 2, -19, 2, -5, -6, 34, 17, -30, -7, -16, 11, 29, -3, 20, -15, 7, -15, 31, 3, 12, -8, -15, -17, 15, -2, -10, 20, -12, 34, -3, 21, -32, -2, 4, 27, 1, 1, 7, -13, -9, -5, 44, 13, -2, -9, -8, -19, -8, -9, 14, -10, 14, 54, -33, -8, -10, 2, -23, 6, 0, 21, -15, 3, 13, -18, -27, -9, 11, 14, 2, 0, -19, 2, -3, -10, 5, 11, 23, 0, 0, 7, 2, -10, 2, -5, -28, -16, 45, -28, -8, -14, 0, -2, 3, 69, -21, 2, 3, 92, 6, -18, 10, -7, -13, 4, 41, 6, 0, 2, 13, -21, -12, -15, -18, -9, -12, -2, -39, -6, -9, -1, -11, 9, 14, -1, -11, 9, 21, 2, -7, 9, -5, 2, -7, 2, 20, -6, 1, -1, -8, -3, 18, 0, -4, -2, -5, -14, -7, 11, 5, -2, 21, -15, -8, 18, 4, -12, -4, 18, -12, 38, 28, 4, 9, -11, -2, -13, -13, 18, 16, -10, 14, 3, 2, -5, 19, 8, -9, -6, -15, -14, -1, -11, -4, -17, -6, 1, 1, -5, -35, 0, 9, -2, -18, -1, 17, 5, 0, 8, 14, 7, 15, -9, -4, -11, -13, -6, 4, -14, -8, -6, 1, 18, -4, -5, -17, 1, 5, -7, -15, -9, 7, -19, 0, 22, 29, -4, 9, 8, -10, -1, 12, -9, -13, -19, 23, -5, 8, -10, -11, 11, -1, -12, -6, -12, 12, -2, 22, 9, 12, 1, 17, -8, -18, 2, 31, -11, -17, -5, 0, -5, 9, 0, -10, -9, -5, -27, 2, -1, -2, -8, -4, 13, -9, -12, -5, -2, 0, 16, -9, 4, 1, -14, -10, -13, -12, -5, 29, 43, 25, -28, 4, 4, -25, -11, -6, -28, 1, -15, 40, -6, 2, 20, 11, -11, 5, -5, 18, 3, 9, 23, 29, 24, 15, 5, -2, -4, 6, -11, 13, -12, -16, -7, -6, 24, 15, 0, -7, -4, -14, -26, 2, -8, -12, -8, -11, 9, 34, 18, 19, 12, 11, -2, -18, 13, -1, 13, -13, 2, -4, -8, 22, 4, 33, -13, 3, -6, -14, -13, -4, 2, 5, -22, 17, -2, 14, -19, -16, -7, 7, 3, -6, -5, -18, -4, -8, 6, 9, -2, 14, -12, 2, -4, 24, -12, -7, -8, -12, 6, 32, -3, -7, 0, -5, -21, 32, 7, -1, 22, 13, 9, -6, 13, 2, -11, 34, 16, -19, -6, -7, -5, -18, -13, -1, 2, 6, 20, 18, 4, 10, -14, -6, -4, -13, 14, -14, -10, -1, -14, 8, -18, -28, -4, -11, 0, -10, -14, -6, -6, -24, -4, -14, -13, 8, -12, 30, 1, 19, -14, -5, 5, -10, 4, 28, 1, -17, -9, -8, -14, -2, -12, -20, 38, 14, -1, -2, -1, 4, -16, 35, 6, -17, -9, -1, 7, -11, -11, -1, -19, 34, 25, -8, -4, 32, 37, -6, -3, 14, 14, -12, 0, -14, -8, -17, -22, -28, -10, -3, -11, -1, -22, 14, -9, -42, 28, 0, 1, 25, -12, -3, 11, 1, -20, -3, 8, -6, -6, 8, -10, -9, 3, -18, -10, 13, 7, 24, 30, 13, 7, -11, 7, -7, 7, 13, -9, -17, 32, -5, 0, 4, 6, -18, -12, 25, -2, -13, -3, 6, 0, 3, 17, 2, 17, -11, -4, -37, -1, -18, -15, -21, -11, -9, 10, -19, -23, -8, 3, -27, 1, -8, -7, -10, -4, 6, 1, 33, -17, -7, -7, -15, -11, -15, -3, -3, -12, -6, -16, -15, 4, 12, 37, -11, -3, -10, 47, -6, -9, 0, -7, -20, 26, -9, 4, -8, 11, 1, 11, 5, -10, 18, -14, 0, 4, 14, 9, 4, 17, 2, -2, -5, 10, 12, -2, -19, -3, 1, 31, -15, -7, -18, 18, -10, -5, 2, 1, 8, -18, 6, -6, 30, -3, -7, -17, -5, 16, -9, -9, 3, -15, -23, -7, -8, 15, -14, 1, -13, -5, 6, 29, -4, -5, -17, 9, -14, 28, -5, -15, -10, 30, -9, 25, 4, -5, 13, -11, 10, 9, -6, 24, -14, 28, -3, 21, -8, -9, -1, 5, -19, 9, 13, 24, -8, 0, 8, -10, 23, -16, 36, 4, 34, 6, 4, -7, 23, 17, 15, 11, -1, 34, -2, 4, 17, -15, -16, 7, 29, 9, 4, 2, -15, 0, 3, -14, -5, 21, -14, 6, -8, 12, 17, 18, 2, 14, -11, 15, -1, 13, 9, 47, 5, 4, 10, 1, 1, -14, 26, -6, 24, 
  -15, -14, -14, 14, 15, -2, 8, 2, -5, 36, 2, -11, -15, 48, 7, -12, 4, -5, 60, 1, -11, 32, 5, -4, -28, -4, -7, 11, 7, 35, 6, -14, 68, -10, -6, -3, -9, -19, 5, -25, -12, -4, -9, 0, 43, 4, 4, 37, 50, 30, 41, 26, -24, -5, 4, 10, 7, -14, 8, 19, -14, 8, 28, 1, -13, -15, -9, 14, 25, 11, -8, -7, -10, 45, -1, -12, -10, 33, -1, -24, 2, -14, 50, -3, -2, 29, -13, 17, -23, -5, -11, 40, -9, 68, 28, -15, 32, 7, 26, -3, 8, -16, 13, -16, -13, 3, 28, -22, 28, 35, 7, 13, 29, 8, 39, -7, -23, 25, 20, 3, 12, -4, -8, -7, 1, 19, 5, 36, -5, 3, -4, 25, 22, 10, -19, -15, -3, 15, 12, -25, -19, 22, -13, -13, 0, -6, 4, -1, -4, 9, -6, 7, -15, 6, -1, 12, -9, 39, 11, -12, 28, -4, -8, -6, 5, -17, 6, 3, -12, 10, 2, 0, 21, 9, 0, 28, 15, 11, 34, -12, -12, 4, 1, -9, 3, -4, -6, 8, -17, 19, 29, 49, 6, -3, -11, -11, 11, -7, -19, 0, -4, 52, -3, -22, 7, -9, -2, -3, 8, 9, 9, -20, -6, 8, -15, -15, -3, -12, -4, 7, -1, 26, 4, -18, 5, -3, -3, -13, 1, -15, 37, -5, -21, -7, -3, -15, 21, -6, -6, 14, 12, 26, -8, -5, -18, -15, 17, 0, -15, -1, 4, 6, 1, -3, 4, 20, 37, -14, 16, -30, 13, -7, -7, 4, -19, 19, 6, -17, -2, 10, -15, -21, -1, 7, 1, -21, 32, 17, -17, 10, -15, -20, -6, 3, 11, 23, 9, -4, -2, -5, 7, -16, -11, -15, 27, 2, -25, -2, 6, -4, 4, -11, 2, 17, 15, 3, 29, 0, -6, 8, 2, 2, -11, 11, -5, -3, 4, 10, 40, 6, 2, -5, 10, -20, 32, -4, -10, 6, -8, 3, 36, -21, 21, -8, -5, -10, -1, 12, -11, -19, 33, 28, -26, 15, -12, -22, -12, -9, -12, 33, 5, -17, 5, -2, 21, 5, -5, -5, -1, 4, -9, -15, 7, -1, -14, 17, 8, -7, 37, -2, 25, -13, -11, -4, 2, 2, 0, 2, -12, -1, 19, 51, 1, 17, 14, -15, 6, -24, 12, -5, -15, 15, -15, 1, 23, -5, 11, 1, -1, -4, 10, 18, -12, -18, 21, 30, -18, 1, -4, -5, -4, -10, -7, 35, 0, 13, 12, 15, 1, 1, -9, -14, 2, -10, -8, -14, -9, 10, -14, 1, -16, 8, -1, 7, 19, -4, -14, 0, 10, 1, 1, 0, -3, -5, 27, 26, 6, 5, 47, -10, 17, -23, 24, 5, -6, 15, 2, 7, 4, -18, -1, -2, 25, -7, -6, 30, -7, -17, 18, 5, 10, -4, -8, -7, -3, 5, -14, 19, -11, -8, -8, 2, -3, 16, -6, 0, 7, -10, 1, -8, 2, 11, -6, 34, -15, 22, 0, 12, 12, 2, -28, -14, 7, -15, 1, -1, 21, -14, 7, 27, 12, 25, 11, -8, 5, -10, 14, 1, -15, 1, -9, -9, 12, -16, 3, 14, -5, -21, 3, 3, -5, -12, 18, 6, -3, -8, -12, -7, -3, 14, -5, 52, -4, -1, 10, -6, -8, 13, 8, -12, -9, 3, 3, -8, -16, -4, 8, 34, -20, 1, -3, -3, 21, 6, -17, 9, 11, 15, 2, -13, -10, -9, -6, 13, 11, 28, 2, 9, -7, -6, 21, 25, -7, -2, -14, -12, 10, 3, -10, 22, 36, -16, 6, 3, 3, -5, 11, 20, -8, -2, 2, -15, 6, 28, 10, -3, 4, -13, -8, -14, 4, 4, -9, -17, 2, -13, -7, -6, 6, 4, 1, 14, -10, 15, 1, -5, 20, -4, -13, 3, 10, 3, 0, -4, -3, -15, -10, 6, 16, 57, -4, 3, -7, -8, 10, 23, -5, 16, -2, -12, -7, -17, 4, 10, -7, -8, -15, 10, -15, -13, 14, -17, -13, -8, -10, -2, 25, 50, 1, 23, 4, -16, 4, -4, 5, -5, -1, -5, 2, -13, -6, 4, 2, 1, -6, 10, -7, 6, -8, -3, 2, 4, -2, -13, -15, 7, 0, 18, -13, -9, -6, 3, -2, 24, 3, 5, -10, -10, 1, 0, -9, -5, -9, 0, -7, -9, 1, -7, 21, -17, 8, -3, -5, -8, -16, 4, 4, 12, 2, -1, 4, 56, -6, 9, 7, -13, 13, -18, 7, -6, 4, -11, 2, -5, -1, -1, 5, 13, 15, 20, 11, 14, -16, 3, -8, 20, 5, 4, -1, -7, -3, 5, -6, -5, -4, 0, 16, 28, -13, -11, -21, -5, -15, 7, -9, -1, -6, 5, -12, -11, 1, -20, 1, -1, -3, -6, -10, 4, -17, -21, -14, 2, -6, 4, -4, 47, -3, 3, -13, -3, -10, 4, -6, -3, -2, -10, 37, -3, 0, -19, 5, 4, -1, 10, 8, 27, -2, 33, -2, 10, 4, -5, 4, 1, 3, 4, -1, -3, -11, 13, -2, 13, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 6,832 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0059473710134625435, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[16] = { 37, -56, 38, 11, 2, -89, 163, -74, -53, -38, -45, -18, 10, 1, -5, 18, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.00024884261074475944, 0.00018045000615529716, 0.00017177635163534433, 0.00013339470024220645, 0.00025761561118997633, 0.00016015757864806801, 0.00015145783254411072, 0.00014678626030217856, 0.0001338261499768123, 0.0002252735139336437, 0.00020856030459981412, 0.0001803375780582428, 0.00022345992329064757, 0.00020473130280151963, 0.00022794606047682464, 0.0002357245102757588, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[16*3*3*8] = { 
  /* [0][0][][] */ -4,67,35,11,-24,-10,10,8, 15,-3,-1,-10,-13,1,50,-36, -21,27,-19,-2,-46,-17,26,6, 
  /* [0][1][][] */ -29,127,18,17,-10,-30,-14,-45, -20,24,4,-18,-21,-29,8,-38, -21,113,25,1,13,15,15,-28, 
  /* [0][2][][] */ -49,90,-43,-17,-39,2,63,9, 38,39,-5,-26,-23,-7,-19,-19, 13,32,11,-23,-19,-12,73,2, 
  /* [1][0][][] */ -40,39,-7,61,-23,-52,-50,15, -74,-62,-25,9,47,102,31,127, 100,-30,-32,-82,0,-32,-32,18, 
  /* [1][1][][] */ 5,-13,30,-32,-45,-39,62,-42, 38,-26,40,53,-8,64,8,-10, 78,-12,-71,-30,70,0,-91,-15, 
  /* [1][2][][] */ -18,18,55,-56,64,14,1,-66, 22,-58,-26,12,40,53,-52,-10, -101,-41,-92,-13,31,-32,-114,-55, 
  /* [2][0][][] */ -24,73,-75,16,-38,4,-33,35, 21,83,60,-6,21,-86,-43,-11, -84,3,-22,5,-55,94,-1,68, 
  /* [2][1][][] */ 75,60,-70,-11,-88,-2,7,10, -27,79,25,-20,54,-22,-35,-37, -44,-127,27,42,-18,38,-16,-31, 
  /* [2][2][][] */ 50,53,-43,-7,-73,5,-94,-33, -42,81,85,84,91,37,-19,94, 54,-88,16,-56,-40,-81,-42,-84, 
  /* [3][0][][] */ 97,-115,71,-27,83,-37,-69,54, -41,-92,-43,63,-68,-37,-62,-7, -34,-57,-17,-30,38,-48,28,17, 
  /* [3][1][][] */ 116,-125,72,-22,6,-46,-48,11, -47,-38,-68,-30,-102,7,-34,40, -39,-89,91,-4,-25,-53,56,25, 
  /* [3][2][][] */ 105,-62,127,-68,77,-46,37,-24, -91,-35,-35,-9,-72,-32,-7,48, -22,-79,76,-60,60,-54,26,-20, 
  /* [4][0][][] */ -32,-5,-33,3,-51,-23,9,-11, -26,11,-39,-20,-16,22,21,-14, 10,29,8,-17,-36,54,-3,17, 
  /* [4][1][][] */ -42,-3,-12,65,7,51,60,-28, -4,127,-23,3,-40,48,-13,6, -14,5,-4,19,35,-4,64,1, 
  /* [4][2][][] */ -29,-14,-18,34,-2,7,25,-41, -6,32,-28,30,-13,2,7,39, -19,77,-38,-10,32,0,-24,43, 
  /* [5][0][][] */ -49,113,7,41,-4,-68,-37,6, -71,-6,-61,-44,27,56,20,-41, -51,19,-77,79,3,81,-100,66, 
  /* [5][1][][] */ -5,54,24,-56,22,-43,-11,-86, -63,-6,-41,54,28,102,90,43, 0,41,-98,127,-48,105,-91,36, 
  /* [5][2][][] */ -33,58,-54,13,-64,12,-44,-2, -8,16,-36,94,79,-20,78,-24, 20,-5,-90,44,-23,60,-73,-38, 
  /* [6][0][][] */ 19,-7,20,41,-75,-10,54,29, 62,-94,71,-49,-21,-5,54,18, -8,-94,-29,34,-4,78,-65,-16, 
  /* [6][1][][] */ -16,-12,35,-54,-94,-33,3,-49, 127,-12,-12,-65,44,27,62,19, 21,54,59,-20,-15,27,52,82, 
  /* [6][2][][] */ 111,-23,7,-96,-62,-10,-4,-68, 99,3,4,-55,31,32,13,43, -71,-9,20,51,-120,-82,-23,-70, 
  /* [7][0][][] */ -24,47,-6,-127,-75,-31,85,-51, -17,58,3,86,4,67,58,3, -10,-42,-43,-31,44,28,-2,8, 
  /* [7][1][][] */ -22,81,-18,-94,49,-83,4,-20, -34,36,5,87,-24,62,60,7, -38,-48,-41,-31,-27,-50,-57,39, 
  /* [7][2][][] */ -59,-43,-18,-25,32,-73,-46,15, -7,-37,40,30,78,22,12,2, 6,-3,21,-30,-58,11,57,-13, 
  /* [8][0][][] */ 61,-104,105,22,-11,-45,53,28, -34,-64,-71,38,-18,-43,-97,4, -9,-88,59,38,35,84,-20,-1, 
  /* [8][1][][] */ 17,-108,127,-19,-27,-57,43,-28, -27,7,-21,-7,-15,6,-71,-37, -24,-115,-27,9,31,51,74,9, 
  /* [8][2][][] */ -16,-98,114,-34,-10,3,28,-50, 43,-70,50,-32,38,-63,-67,-6, 75,-61,-61,-15,7,-31,43,-76, 
  /* [9][0][][] */ -25,-33,-29,77,-7,70,-30,64, -58,-59,-28,-42,40,-12,-16,67, -53,-80,-21,46,39,85,-26,127, 
  /* [9][1][][] */ -39,-6,-63,-22,-18,83,-46,88, -24,-68,50,-84,34,-45,-16,-10, -56,-43,-20,26,37,79,-19,4, 
  /* [9][2][][] */ -37,30,-57,-7,2,27,-46,-12, -6,-48,2,-74,-41,-42,-21,10, -6,-54,-51,-8,50,22,-3,-35, 
  /* [10][0][][] */ -27,-65,-31,39,20,31,2,43, -39,-51,-5,-42,-19,-52,-1,-35, -24,-4,-41,37,-21,20,-44,36, 
  /* [10][1][][] */ -7,7,-22,29,18,54,75,40, 60,-52,65,-32,-22,-49,127,-5, 8,86,-77,27,10,34,-42,-30, 
  /* [10][2][][] */ 54,-38,-48,-25,27,-44,77,-48, -17,-9,97,3,-33,22,-10,-19, -20,57,-82,11,-28,-2,-24,-63, 
  /* [11][0][][] */ -29,10,-41,116,65,21,-13,-43, -27,-25,17,-28,-18,-60,27,-32, -42,80,-68,42,-110,-56,-48,-20, 
  /* [11][1][][] */ 127,44,35,-37,31,-46,50,-78, -31,13,-94,8,-94,-25,-25,-55, -17,3,-37,5,-96,-25,-28,-17, 
  /* [11][2][][] */ 48,16,103,88,64,-35,-34,-26, 14,33,-63,12,-66,9,-18,-46, -6,-35,-21,58,-30,-4,26,39, 
  /* [12][0][][] */ -52,22,-38,127,-57,45,26,4, 14,-31,-10,-17,-35,-20,-29,-38, 29,76,72,-14,34,-67,31,-21, 
  /* [12][1][][] */ -66,-25,-34,75,-1,65,-25,20, 31,-65,-10,-30,-1,-46,-15,-47, 14,-20,44,-50,-9,-31,54,-8, 
  /* [12][2][][] */ -77,-106,-41,-36,-43,-27,-36,-3, 18,-20,6,18,82,-22,-18,-64, 78,-14,43,12,52,-28,8,-14, 
  /* [13][0][][] */ 17,74,-10,-26,-43,17,-20,-47, 18,127,-27,5,-49,-39,-24,-38, -17,63,61,17,35,-32,-40,21, 
  /* [13][1][][] */ 5,68,1,-47,28,-30,39,-19, -15,16,-40,-53,-48,67,84,38, -32,-9,29,-44,15,3,9,42, 
  /* [13][2][][] */ -6,121,-43,59,-42,-11,-54,-39, -12,88,-5,-6,21,-34,-44,-21, -40,76,-24,-15,-28,6,-29,39, 
  /* [14][0][][] */ 47,25,36,-23,-33,-2,39,-45, -2,42,38,-8,-39,-16,26,-62, -5,-5,-48,93,-33,-26,-49,3, 
  /* [14][1][][] */ 73,5,-17,-21,-58,34,62,-59, 27,84,7,12,-15,13,23,6, -59,22,-47,-22,-10,110,-39,98, 
  /* [14][2][][] */ -1,93,-27,-16,-43,36,-25,-73, 4,-10,4,-37,-9,-25,7,-23, -44,49,-44,-14,-18,116,-41,127, 
  /* [15][0][][] */ 47,127,3,-29,-19,-37,-17,4, -22,-33,55,-8,-43,-21,-2,32, -20,-47,36,-20,-28,-23,-4,33, 
  /* [15][1][][] */ 24,7,22,-19,-1,14,-6,-9, -14,-57,66,-16,-59,38,16,34, 38,-47,44,-40,16,4,-24,-17, 
  /* [15][2][][] */ -20,42,-18,-18,-21,-13,29,69, -7,-43,86,6,-36,-29,12,-25, 49,-45,41,-37,-41,-28,-30,-14, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant6_scale = { 16, { 0.0048153060488402843, 0.0034918538294732571, 0.0033240115735679865, 0.002581295557320118, 0.0049850712530314922, 0.0030991788953542709, 0.0029308318626135588, 0.0028404330369085073, 0.0025896443985402584, 0.0043592252768576145, 0.0040358109399676323, 0.003489678492769599, 0.0043241307139396667, 0.0039617167785763741, 0.0044109411537647247, 0.0045614605769515038, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[8] = { 45, 6, 95, 30, 6, -69, -19, -36, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00026281771715730429, 0.00042726189712993801, 0.0002426824503345415, 0.00035973801277577877, 0.00040731710032559931, 0.00020525649597402662, 0.00029836141038686037, 0.0003309377352707088, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[8*3*3*1] = { 
  /* [0][0][][] */ 45, -47, -75, 
  /* [0][1][][] */ 20, -100, -82, 
  /* [0][2][][] */ 31, -101, -127, 
  /* [1][0][][] */ -68, -75, -47, 
  /* [1][1][][] */ 113, -61, 47, 
  /* [1][2][][] */ -40, 127, -3, 
  /* [2][0][][] */ 107, 68, -127, 
  /* [2][1][][] */ 39, 10, -104, 
  /* [2][2][][] */ 114, 59, -114, 
  /* [3][0][][] */ -127, 16, -48, 
  /* [3][1][][] */ -107, 123, -29, 
  /* [3][2][][] */ 9, 107, 11, 
  /* [4][0][][] */ 108, -71, 42, 
  /* [4][1][][] */ 127, -48, 25, 
  /* [4][2][][] */ 120, 63, 9, 
  /* [5][0][][] */ -1, 47, 47, 
  /* [5][1][][] */ 26, 109, 23, 
  /* [5][2][][] */ -127, -56, -80, 
  /* [6][0][][] */ 45, 127, -30, 
  /* [6][1][][] */ -36, 3, -78, 
  /* [6][2][][] */ -103, -54, -110, 
  /* [7][0][][] */ 12, 62, 80, 
  /* [7][1][][] */ -30, 119, 29, 
  /* [7][2][][] */ -64, 127, 9, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant8_scale = { 8, { 0.0044967751018702984, 0.0073103923350572586, 0.0041522635146975517, 0.0061550680547952652, 0.0069691394455730915, 0.0035119105596095324, 0.0051049226894974709, 0.0056622992269694805, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,49,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.058445822447538376, } };
const TfArray<1, int> quant9_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,49,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.051677420735359192, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,25,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.051677420735359192, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.051815580576658249, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.051815580576658249, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,832 } };
const TfArray<1, float> quant14_scale = { 1, { 0.051815580576658249, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,6 } };
const TfArray<1, float> quant15_scale = { 1, { 0.23834407329559326, } };
const TfArray<1, int> quant15_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,6 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,6,5 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,4,3 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 4992, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5104), (TfLiteIntArray*)&g0::tensor_dimension9, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 5096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5104), (TfLiteIntArray*)&g0::tensor_dimension11, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2800), (TfLiteIntArray*)&g0::tensor_dimension13, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension15, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 17, };
const size_t tflNodes_subgraph_index[] = {0, 8, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  16, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_17_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_invoke() {
  for (size_t i = 0; i < 8; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
